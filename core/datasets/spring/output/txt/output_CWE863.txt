<org.springframework.messaging.simp.broker.SimpleBrokerMessageHandler: void handleDisconnect(java.lang.String,java.security.Principal,org.springframework.messaging.Message)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.Connection createConnection()> 
<org.springframework.jca.cci.connection.CciLocalTransactionManager: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: void checkDefaultConnectionProperties(java.sql.Connection)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: void updateAuthenticationDefaults()> 
<org.springframework.jdbc.datasource.ConnectionHolder: void setConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.SimpleConnectionHandle: void releaseConnection(java.sql.Connection)> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: boolean isConnected()> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: void disconnectOnCompletion(org.hibernate.Session)> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logout()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutRequestMatcher(org.springframework.security.web.util.matcher.RequestMatcher)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection createConnection()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler getLogoutSuccessHandler()> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void createLogoutFilter()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: javax.resource.cci.Connection getConnection()> 
<org.springframework.web.socket.messaging.StompSubProtocolHandler: java.lang.String getDisconnectReceipt(org.springframework.messaging.simp.SimpMessageHeaderAccessor)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.security.config.http.HttpConfigurationBuilder: org.springframework.beans.BeanMetadataElement getCsrfLogoutHandler()> 
<org.springframework.jms.connection.SingleConnectionFactory: void closeConnection(javax.jms.Connection)> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.Connection getConnection()> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient,com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: void setTargetConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: org.springframework.security.authentication.AuthenticationManager authenticationManager()> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void setConnectOnStartup(boolean)> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void removeConnectionSpecFromCurrentThread()> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void closeConnection()> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection getSharedConnectionProxy(javax.jms.Connection)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: boolean isCustomLogoutSuccess()> 
<org.springframework.web.socket.client.WebSocketConnectionManager: boolean isConnected()> 
<org.springframework.web.socket.client.standard.EndpointConnectionManager: void openConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getConnection()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutSuccessHandler(org.springframework.security.web.authentication.logout.LogoutSuccessHandler)> 
<org.springframework.jms.connection.SingleConnectionFactory: void initConnection()> 
<org.springframework.web.socket.sockjs.support.AbstractSockJsService: long getDisconnectDelay()> 
<org.springframework.jms.connection.SingleConnectionFactory102: javax.jms.Connection doCreateConnection()> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: void handleLogout(org.springframework.security.core.session.SessionDestroyedEvent)> 
<org.springframework.security.authentication.ProviderManager: org.springframework.security.core.Authentication doAuthentication(org.springframework.security.core.Authentication)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.JmsResourceHolder: javax.jms.Connection getConnection(java.lang.Class)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.jms.connection.CachingConnectionFactory: void resetConnection()> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.web.socket.client.standard.EndpointConnectionManager: void closeConnection()> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection doCreateQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.orm.hibernate4.HibernateTransactionManager: void disconnectOnCompletion(org.hibernate.Session)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer addLogoutHandler(org.springframework.security.web.authentication.logout.LogoutHandler)> 
<org.springframework.jdbc.datasource.ConnectionHolder: org.springframework.jdbc.datasource.ConnectionHandle getConnectionHandle()> 
<org.springframework.jca.support.LocalConnectionFactoryBean: void setConnectionManager(javax.resource.spi.ConnectionManager)> 
<org.springframework.web.socket.config.annotation.SockJsServiceRegistration: org.springframework.web.socket.config.'annotation'.SockJsServiceRegistration setDisconnectDelay(long)> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl: java.util.Collection attemptAuthentication(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.JmsTransactionManager102: javax.jms.Connection createConnection()> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void createLazyConnection()> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection getTransactionAwareConnectionProxy(javax.jms.Connection)> 
<org.springframework.web.socket.client.WebSocketConnectionManager: void openConnection()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void prepareConnection(java.sql.Connection)> 
<org.springframework.jms.connection.SingleConnectionFactory: boolean isReconnectOnException()> 
<org.springframework.jdbc.datasource.ConnectionHolder: boolean hasConnection()> 
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getTransactionAwareConnectionProxy(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getConnection()> 
<org.springframework.jca.support.LocalConnectionFactoryBean: void setManagedConnectionFactory(javax.resource.spi.ManagedConnectionFactory)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: org.springframework.beans.factory.support.ManagedList getLogoutHandlers()> 
<org.springframework.jms.connection.JmsTransactionManager: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)> 
<org.springframework.jdbc.datasource.ConnectionHolder: java.sql.Connection getConnection()> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: void openConnection()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void resetConnection()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void setConnectionSpec(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection createConnection()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.TopicConnection doCreateTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jmx.access.ConnectorDelegate: javax.management.MBeanServerConnection connect(javax.management.remote.JMXServiceURL,java.util.Map,java.lang.String)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void resetConnection()> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection createConnection()> 
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: org.springframework.security.config.'annotation'.web.builders.HttpSecurity getHttp()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: void setShouldStopConnections(boolean)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.JmsTransactionManager: javax.jms.Connection createConnection()> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection doCreateConnection()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutUrl(java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jms.connection.SingleConnectionFactory: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.connection.JmsResourceHolder: void addConnection(javax.jms.Connection)> 
<org.springframework.jca.cci.connection.ConnectionHolder: javax.resource.cci.Connection getConnection()> 
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: java.sql.Connection getConnection()> 
<org.springframework.jms.connection.JmsResourceHolder: javax.jms.Connection getConnection()> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.authentication.ProviderManagerBuilder)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory,javax.resource.cci.ConnectionSpec)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.ConnectionFactoryUtils: void releaseConnection(javax.jms.Connection,javax.jms.ConnectionFactory,boolean)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void prepareConnection(javax.resource.cci.Connection)> 
<org.springframework.web.socket.client.WebSocketConnectionManager: void closeConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver: void setWebConnection(com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: org.springframework.security.core.Authentication authenticateIfRequired()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()> 
<org.springframework.jdbc.datasource.SimpleConnectionHandle: java.sql.Connection getConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection doCreateConnection(java.lang.String,java.lang.String)> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: void closeConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutSuccessUrl(java.lang.String)> 
<org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver: com.gargoylesoftware.htmlunit.WebConnection getWebConnection()> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: void doReleaseConnection(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection doCreateConnection()> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: void releaseConnection(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getLogoutRequestMatcher(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getCloseSuppressingConnectionProxy(java.sql.Connection)> 
<org.springframework.security.authentication.jaas.JaasAuthenticationProvider: void handleLogout(org.springframework.security.core.session.SessionDestroyedEvent)> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: java.sql.Connection getConnection()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getCloseSuppressingConnectionProxy(javax.resource.cci.Connection)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void initConnection()> 
<org.springframework.web.socket.sockjs.support.AbstractSockJsService: void setDisconnectDelay(long)> 
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: void initDefaultLoginFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.lang.String getLogoutSuccessUrl()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jca.cci.connection.CciLocalTransactionManager: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: boolean isConnectionTransactional(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.support.ManagedList getLogoutHandlers()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: void prepareConnection(javax.jms.Connection)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.builders.HttpSecurity authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)> 
<org.springframework.security.config.http.HttpConfigurationBuilder: void setLogoutHandlers(org.springframework.beans.factory.support.ManagedList)> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void connect()> 
<org.springframework.jms.connection.SingleConnectionFactory: void setReconnectOnException(boolean)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void initConnection()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void setConnectionSpecForCurrentThread(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jms.connection.SingleConnectionFactory: void resetConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.connection.JmsTransactionManager: void setConnectionFactory(javax.jms.ConnectionFactory)> 
