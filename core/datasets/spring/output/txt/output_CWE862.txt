<org.springframework.messaging.simp.stomp.Reactor2TcpStompClient: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.messaging.simp.stomp.StompSessionHandler)> 
<org.springframework.jms.core.JmsTemplate102: javax.jms.Connection createConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.Connection createConnection()> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.jca.cci.connection.CciLocalTransactionManager: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: void checkDefaultConnectionProperties(java.sql.Connection)> 
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: int getPhase()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: void setNativeConnectionNecessaryForNativeStatements(boolean)> 
<org.springframework.orm.hibernate4.LocalSessionFactoryBuilder: org.springframework.orm.hibernate4.LocalSessionFactoryBuilder setMultiTenantConnectionProvider(java.lang.Object)> 
<org.springframework.jca.cci.core.support.CciDaoSupport: javax.resource.cci.Connection getConnection()> 
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: org.springframework.messaging.support.MessageHeaderInitializer getHeaderInitializer()> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: void updateAuthenticationDefaults()> 
<org.springframework.orm.hibernate3.HibernateTransactionManager: boolean isSameConnectionForEntireSession(org.hibernate.Session)> 
<org.springframework.jdbc.datasource.ConnectionHolder: void setConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.SimpleConnectionHandle: void releaseConnection(java.sql.Connection)> 
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: void setRefreshHomeOnConnectFailure(boolean)> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: boolean isConnected()> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getTargetConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnectionFromDriver(java.util.Properties)> 
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logout()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutRequestMatcher(org.springframework.security.web.util.matcher.RequestMatcher)> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.http.HttpHeaders: void setConnection(java.util.List)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection createConnection()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler getLogoutSuccessHandler()> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void createLogoutFilter()> 
<org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory: org.springframework.jdbc.datasource.embedded.ConnectionProperties getConnectionProperties()> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.DataSourceUtils: boolean isConnectionTransactional(java.sql.Connection,javax.sql.DataSource)> 
<org.springframework.jms.listener.serversession.ServerSessionMessageListenerContainer102: javax.jms.Connection createConnection()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: javax.resource.cci.Connection getConnection()> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection getNativeConnectionFromStatement(java.sql.Statement)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.security.config.http.HttpConfigurationBuilder: org.springframework.beans.BeanMetadataElement getCsrfLogoutHandler()> 
<org.springframework.transaction.jta.UserTransactionAdapter: void setTransactionTimeout(int)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()> 
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void scheduleConnectTimeoutTask(org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback)> 
<org.springframework.jms.listener.serversession.ServerSessionMessageListenerContainer: boolean sharedConnectionEnabled()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.http.client.OkHttp3ClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer: org.springframework.security.provisioning.JdbcUserDetailsManager getUserDetailsService()> 
<org.springframework.jms.connection.SingleConnectionFactory: void closeConnection(javax.jms.Connection)> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.Connection getConnection()> 
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: org.springframework.jdbc.datasource.ConnectionHolder getConnectionHolderForSavepoint()> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient,com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.jms.listener.DefaultMessageListenerContainer102: javax.jms.Connection createConnection()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.security.config.ldap.LdapUserServiceBeanDefinitionParser: org.springframework.beans.factory.config.RuntimeBeanReference parseServerReference(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Object,java.net.URI)> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: void setTargetConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setHideUserNotFoundExceptions(boolean)> 
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: org.springframework.security.authentication.AuthenticationManager authenticationManager()> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void setConnectOnStartup(boolean)> 
<org.springframework.web.socket.messaging.DefaultSimpUserRegistry: org.springframework.messaging.simp.user.SimpUser getUser(java.lang.String)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: void setUsername(java.lang.String)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer: org.springframework.security.core.userdetails.UserDetailsService getUserDetailsService()> 
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.userdetails.UserDetailsChecker getPreAuthenticationChecks()> 
<org.springframework.security.core.userdetails.User: java.lang.String getUsername()> 
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.web.socket.messaging.StompSubProtocolHandler: org.springframework.messaging.simp.stomp.StompHeaderAccessor afterStompSessionConnected(org.springframework.messaging.Message,org.springframework.messaging.simp.stomp.StompHeaderAccessor,org.springframework.web.socket.WebSocketSession)> 
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: void setPathMatcher(org.springframework.util.PathMatcher)> 
<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void removeConnectionSpecFromCurrentThread()> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.security.config.http.UserDetailsServiceFactoryBean: java.util.Map getBeansOfType(java.lang.Class)> 
<org.springframework.messaging.simp.user.MultiServerUserRegistry: int getOrder()> 
<org.springframework.orm.hibernate5.LocalSessionFactoryBuilder: org.springframework.orm.hibernate5.LocalSessionFactoryBuilder setMultiTenantConnectionProvider(org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider)> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setConnectTimeout(int)> 
<org.springframework.messaging.simp.user.UserDestinationResult: java.lang.String getSourceDestination()> 
<org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.jms.config.AbstractJmsListenerContainerFactory: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void closeConnection()> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.config.'annotation'.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer passwordEncoder(org.springframework.security.crypto.password.PasswordEncoder)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection getSharedConnectionProxy(javax.jms.Connection)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: void setPassword(java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: boolean isCustomLogoutSuccess()> 
<org.springframework.http.client.SimpleClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: void setConnectionHolder(org.springframework.jdbc.datasource.ConnectionHolder)> 
<org.springframework.web.socket.client.WebSocketConnectionManager: boolean isConnected()> 
<org.springframework.messaging.simp.user.MultiServerUserRegistry: java.util.Set getUsers()> 
<org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent: org.springframework.security.authentication.AuthenticationCredentialsNotFoundException getCredentialsNotFoundException()> 
<org.springframework.orm.jdo.DefaultJdoDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.jdo.PersistenceManager,boolean)> 
<org.springframework.web.socket.client.standard.EndpointConnectionManager: void openConnection()> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.config.'annotation'.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer passwordEncoder(org.springframework.security.authentication.encoding.PasswordEncoder)> 
<org.springframework.orm.jpa.DefaultJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> 
<org.springframework.jms.core.JmsMessagingTemplate: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.sql.Connection getConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getConnection()> 
<org.springframework.jmx.access.MBeanClientInterceptor: void setConnectOnStartup(boolean)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutSuccessHandler(org.springframework.security.web.authentication.logout.LogoutSuccessHandler)> 
<org.springframework.security.core.userdetails.cache.SpringCacheBasedUserCache: org.springframework.security.core.userdetails.UserDetails getUserFromCache(java.lang.String)> 
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.jms.connection.SingleConnectionFactory: void initConnection()> 
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.jms.connection.SingleConnectionFactory102: javax.jms.Connection doCreateConnection()> 
<org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor: void handleNotAuthorized(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> 
<org.springframework.jdbc.datasource.DataSourceUtils: boolean connectionEquals(org.springframework.jdbc.datasource.ConnectionHolder,java.sql.Connection)> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: void handleLogout(org.springframework.security.core.session.SessionDestroyedEvent)> 
<org.springframework.security.authentication.ProviderManager: org.springframework.security.core.Authentication doAuthentication(org.springframework.security.core.Authentication)> 
<org.springframework.security.config.authentication.AbstractUserDetailsServiceBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> 
<org.springframework.security.access.intercept.RunAsUserToken: java.lang.Class getOriginalAuthentication()> 
<org.springframework.orm.jdo.DefaultJdoDialect: void releaseJdbcConnection(org.springframework.jdbc.datasource.ConnectionHandle,javax.jdo.PersistenceManager)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)> 
<org.springframework.messaging.simp.user.UserDestinationResult: java.lang.String getSubscribeDestination()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: void setNativeConnectionNecessaryForNativePreparedStatements(boolean)> 
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: org.springframework.jdbc.datasource.ConnectionHolder getConnectionHolder()> 
<org.springframework.jms.connection.JmsResourceHolder: javax.jms.Connection getConnection(java.lang.Class)> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: void setRefreshStubOnConnectFailure(boolean)> 
<org.springframework.http.client.SimpleClientHttpRequestFactory: java.net.HttpURLConnection openConnection(java.net.URL,java.net.Proxy)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: void setEnableAuthorities(boolean)> 
<org.springframework.security.core.userdetails.User: java.util.Collection getAuthorities()> 
<org.springframework.security.core.userdetails.memory.UserAttribute: java.lang.String getPassword()> 
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: org.springframework.messaging.core.MessageSendingOperations getBrokerMessagingTemplate()> 
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.jms.support.JmsAccessor: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.security.provisioning.MutableUser: boolean isCredentialsNonExpired()> 
<org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession: void delegateConnectionClosed(org.springframework.web.socket.CloseStatus)> 
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void connect(org.springframework.web.socket.WebSocketHandler,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.messaging.simp.user.UserSessionRegistryAdapter: java.util.Set getUsers()> 
<org.springframework.security.access.intercept.RunAsUserToken: java.lang.Object getCredentials()> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.security.provisioning.InMemoryUserDetailsManager: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)> 
<org.springframework.jms.connection.CachingConnectionFactory: void resetConnection()> 
<org.springframework.messaging.simp.user.UserRegistryMessageHandler: long getRegistryExpirationPeriod()> 
<org.springframework.orm.jpa.DefaultJpaDialect: void releaseJdbcConnection(org.springframework.jdbc.datasource.ConnectionHandle,javax.persistence.EntityManager)> 
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: void setHeaderInitializer(org.springframework.messaging.support.MessageHeaderInitializer)> 
<org.springframework.orm.hibernate4.HibernateTransactionManager: void setPrepareConnection(boolean)> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection getNativeConnection(java.sql.Connection)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: boolean getEnableAuthorities()> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Class,javax.websocket.ClientEndpointConfig,java.net.URI)> 
<org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter: void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.messaging.simp.stomp.StompHeaders processConnectHeaders(org.springframework.messaging.simp.stomp.StompHeaders)> 
<org.springframework.web.socket.client.standard.EndpointConnectionManager: void closeConnection()> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection doCreateQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.security.access.intercept.RunAsUserToken: int getKeyHash()> 
<org.springframework.orm.hibernate4.HibernateTransactionManager: boolean isSameConnectionForEntireSession(org.hibernate.Session)> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: void setConnectionProperties(java.util.Properties)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer addLogoutHandler(org.springframework.security.web.authentication.logout.LogoutHandler)> 
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: javax.jms.Connection createConnection()> 
<org.springframework.messaging.simp.stomp.StompClientSupport: org.springframework.messaging.simp.stomp.StompHeaders processConnectHeaders(org.springframework.messaging.simp.stomp.StompHeaders)> 
<org.springframework.jdbc.datasource.ConnectionHolder: org.springframework.jdbc.datasource.ConnectionHandle getConnectionHandle()> 
<org.springframework.jca.support.LocalConnectionFactoryBean: void setConnectionManager(javax.resource.spi.ConnectionManager)> 
<org.springframework.security.access.intercept.RunAsUserToken: java.lang.Object getPrincipal()> 
<org.springframework.security.provisioning.JdbcUserDetailsManager: void setUserCache(org.springframework.security.core.userdetails.UserCache)> 
<org.springframework.jms.listener.SimpleMessageListenerContainer: boolean sharedConnectionEnabled()> 
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult parseSubscriptionMessage(org.springframework.messaging.Message,java.lang.String)> 
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl: java.util.Collection attemptAuthentication(java.lang.String,java.lang.String)> 
<org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer: org.springframework.jdbc.datasource.init.DatabasePopulator getDatabasePopulator()> 
<org.springframework.web.socket.sockjs.client.SockJsClient: void setConnectTimeoutScheduler(org.springframework.scheduling.TaskScheduler)> 
<org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter: void afterConnected(org.springframework.messaging.simp.stomp.StompSession,org.springframework.messaging.simp.stomp.StompHeaders)> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.lang.Integer prepareConnectionForTransaction(java.sql.Connection,org.springframework.transaction.TransactionDefinition)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: java.lang.String getRolePrefix()> 
<org.springframework.web.socket.sockjs.client.WebSocketTransport: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.security.config.http.UserDetailsServiceFactoryBean: org.springframework.security.core.userdetails.UserDetailsService getUserDetailsService()> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.JmsTransactionManager102: javax.jms.Connection createConnection()> 
<org.springframework.jca.cci.core.CciTemplate: void setConnectionSpec(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void createLazyConnection()> 
<org.springframework.web.socket.sockjs.client.AbstractXhrTransport: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler)> 
<org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache: org.springframework.security.core.userdetails.UserDetails getUserFromCache(java.lang.String)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection getTransactionAwareConnectionProxy(javax.jms.Connection)> 
<org.springframework.web.socket.client.WebSocketConnectionManager: void openConnection()> 
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: java.lang.String getAuthoritiesByUsernameQuery()> 
<org.springframework.messaging.simp.user.MultiServerUserRegistry: org.springframework.messaging.simp.user.SimpUser getUser(java.lang.String)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void prepareConnection(java.sql.Connection)> 
<org.springframework.jms.connection.SingleConnectionFactory: boolean isReconnectOnException()> 
<org.springframework.jdbc.datasource.ConnectionHolder: boolean hasConnection()> 
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getTransactionAwareConnectionProxy(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getConnection()> 
<org.springframework.jmx.access.MBeanClientInterceptor: void setRefreshOnConnectFailure(boolean)> 
<org.springframework.jca.support.LocalConnectionFactoryBean: void setManagedConnectionFactory(javax.resource.spi.ManagedConnectionFactory)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.SecurityBuilder)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setUserCache(org.springframework.security.core.userdetails.UserCache)> 
<org.springframework.orm.hibernate5.LocalSessionFactoryBean: void setMultiTenantConnectionProvider(org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider)> 
<org.springframework.jdbc.support.JdbcUtils: void closeConnection(java.sql.Connection)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.web.socket.sockjs.client.UndertowXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.messaging.simp.stomp.DefaultStompSession: void afterConnectFailure(java.lang.Throwable)> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: org.springframework.beans.factory.support.ManagedList getLogoutHandlers()> 
<org.springframework.messaging.simp.user.UserSessionRegistryAdapter: org.springframework.messaging.simp.user.SimpUser getUser(java.lang.String)> 
<org.springframework.jms.connection.JmsTransactionManager: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.messaging.simp.user.UserRegistryMessageHandler: java.lang.String getBroadcastDestination()> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)> 
<org.springframework.jdbc.datasource.ConnectionHolder: java.sql.Connection getConnection()> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: void openConnection()> 
<org.springframework.security.config.authentication.JdbcUserServiceBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void resetConnection()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void setConnectionSpec(javax.resource.cci.ConnectionSpec)> 
<org.springframework.messaging.simp.stomp.Reactor2TcpStompClient: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection createConnection()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection()> 
<org.springframework.jdbc.datasource.DataSourceUtils: void doReleaseConnection(java.sql.Connection,javax.sql.DataSource)> 
<org.springframework.jdbc.support.nativejdbc.XAPoolNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: java.lang.String getDestinationPrefix()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setPostAuthenticationChecks(org.springframework.security.core.userdetails.UserDetailsChecker)> 
<org.springframework.security.core.userdetails.memory.UserAttribute: void setAuthorities(java.util.List)> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: void setPrepareConnection(boolean)> 
<org.springframework.jms.core.JmsMessagingTemplate: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.TopicConnection doCreateTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.support.nativejdbc.XAPoolNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jdbc.datasource.DataSourceUtils: void releaseConnection(java.sql.Connection,javax.sql.DataSource)> 
<org.springframework.security.provisioning.JdbcUserDetailsManager: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.messaging.simp.user.UserDestinationResult: java.util.Set getTargetDestinations()> 
<org.springframework.jdbc.core.JdbcTemplate: java.sql.Connection createConnectionProxy(java.sql.Connection)> 
<org.springframework.transaction.jta.UserTransactionAdapter: int getStatus()> 
<org.springframework.security.config.ldap.LdapUserServiceBeanDefinitionParser: org.springframework.beans.BeanMetadataElement parseUserDetailsClassOrUserMapperRef(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> 
<org.springframework.web.socket.sockjs.client.JettyXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: void setUsername(java.lang.String)> 
<org.springframework.jdbc.datasource.DataSourceUtils: void resetConnectionAfterTransaction(java.sql.Connection,java.lang.Integer)> 
<org.springframework.web.socket.messaging.DefaultSimpUserRegistry: int getOrder()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void resetConnection()> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection createConnection()> 
<org.springframework.security.core.userdetails.User: java.lang.String getPassword()> 
<org.springframework.jms.support.JmsUtils: void closeConnection(javax.jms.Connection)> 
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: org.springframework.security.config.'annotation'.web.builders.HttpSecurity getHttp()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: void setShouldStopConnections(boolean)> 
<org.springframework.jdbc.support.nativejdbc.JBossNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.security.config.authentication.UserServiceBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> 
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jms.connection.JmsTransactionManager: javax.jms.Connection createConnection()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.support.nativejdbc.XAPoolNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.orm.jpa.vendor.TopLinkJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)> 
<org.springframework.messaging.simp.user.MultiServerUserRegistry: int getUserCount()> 
<org.springframework.web.socket.messaging.DefaultSimpUserRegistry: java.util.Set getUsers()> 
<org.springframework.security.config.ldap.LdapUserServiceBeanDefinitionParser: org.springframework.beans.factory.support.RootBeanDefinition parseSearchBean(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection doCreateConnection()> 
<org.springframework.jms.support.JmsAccessor: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: boolean isSameConnectionForEntireSession(org.hibernate.Session)> 
<org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutUrl(java.lang.String)> 
<org.springframework.security.access.event.AuthenticationCredentialsNotFoundEvent: java.util.Collection getConfigAttributes()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutFilter createLogoutFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.userdetails.UserCache getUserCache()> 
<org.springframework.security.provisioning.MutableUser: java.util.Collection getAuthorities()> 
<org.springframework.jms.core.JmsTemplate: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.transaction.jta.UserTransactionAdapter: javax.transaction.TransactionManager getTransactionManager()> 
<org.springframework.jms.connection.SingleConnectionFactory: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: java.sql.Connection getRawConnection(java.sql.Connection)> 
<org.springframework.jms.connection.JmsResourceHolder: void addConnection(javax.jms.Connection)> 
<org.springframework.jca.cci.core.CciTemplate: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getConnection(javax.sql.DataSource)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.Authentication createSuccessAuthentication(java.lang.Object,org.springframework.security.core.Authentication,org.springframework.security.core.userdetails.UserDetails)> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jca.cci.connection.ConnectionHolder: javax.resource.cci.Connection getConnection()> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setLegacyConnectionTimeout(org.apache.http.client.HttpClient,int)> 
<org.springframework.orm.hibernate3.LocalDataSourceConnectionProvider: java.sql.Connection getConnection()> 
<org.springframework.security.core.userdetails.memory.UserAttribute: void setEnabled(boolean)> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setLegacyConnectionTimeout(org.apache.http.client.HttpClient,int)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: void setEnableGroups(boolean)> 
<org.springframework.jms.connection.JmsResourceHolder: javax.jms.Connection getConnection()> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: boolean shouldObtainFixedConnection(javax.sql.DataSource)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setConnectionRequestTimeout(int)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.authentication.ProviderManagerBuilder)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: boolean getEnableGroups()> 
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: java.lang.String getBroadcastDestination()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setForcePrincipalAsString(boolean)> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.orm.hibernate4.LocalSessionFactoryBean: void setMultiTenantConnectionProvider(java.lang.Object)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory,javax.resource.cci.ConnectionSpec)> 
<org.springframework.remoting.rmi.RmiClientInterceptor: void setRefreshStubOnConnectFailure(boolean)> 
<org.springframework.security.config.authentication.CachingUserDetailsService: void setUserCache(org.springframework.security.core.userdetails.UserCache)> 
<org.springframework.security.config.http.UserDetailsServiceFactoryBean: void setApplicationContext(org.springframework.context.ApplicationContext)> 
<org.springframework.jms.connection.ConnectionFactoryUtils: void releaseConnection(javax.jms.Connection,javax.jms.ConnectionFactory,boolean)> 
<org.springframework.jms.core.JmsTemplate102: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.web.socket.messaging.StompSubProtocolHandler: org.springframework.messaging.simp.stomp.StompHeaderAccessor convertConnectAcktoStompConnected(org.springframework.messaging.simp.stomp.StompHeaderAccessor)> 
<org.springframework.jdbc.core.support.JdbcDaoSupport: java.sql.Connection getConnection()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void prepareConnection(javax.resource.cci.Connection)> 
<org.springframework.jms.core.support.JmsGatewaySupport: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.web.socket.client.WebSocketConnectionManager: void closeConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.orm.jpa.vendor.OpenJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> 
<org.springframework.jms.listener.AbstractJmsListeningContainer: void prepareSharedConnection(javax.jms.Connection)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: void setUsernameBasedPrimaryKey(boolean)> 
<org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver: void setWebConnection(com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: org.springframework.security.core.Authentication authenticateIfRequired()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.userdetails.UserDetailsChecker getPostAuthenticationChecks()> 
<org.springframework.jdbc.datasource.SimpleDriverDataSource: java.sql.Connection getConnectionFromDriver(java.util.Properties)> 
<org.springframework.jms.listener.DefaultMessageListenerContainer: boolean sharedConnectionEnabled()> 
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult parse(org.springframework.messaging.Message)> 
<org.springframework.jms.core.support.JmsGatewaySupport: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection doGetConnection(javax.sql.DataSource)> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.util.Properties getConnectionProperties()> 
<org.springframework.jms.listener.SimpleMessageListenerContainer: void prepareSharedConnection(javax.jms.Connection)> 
<org.springframework.messaging.simp.user.UserSessionRegistryAdapter: int getUserCount()> 
<org.springframework.security.authentication.UsernamePasswordAuthenticationToken: java.lang.Object getPrincipal()> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(javax.websocket.Endpoint,javax.websocket.ClientEndpointConfig,java.net.URI)> 
<org.springframework.jdbc.datasource.DataSourceUtils: int getConnectionSynchronizationOrder(javax.sql.DataSource)> 
<org.springframework.messaging.simp.user.MultiServerUserRegistry: java.lang.Object getLocalRegistryDto()> 
<org.springframework.messaging.simp.user.UserDestinationResult: java.lang.String getUser()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.config.'annotation'.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer withObjectPostProcessor(org.springframework.security.config.'annotation'.ObjectPostProcessor)> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()> 
<org.springframework.jdbc.datasource.SimpleConnectionHandle: java.sql.Connection getConnection()> 
<org.springframework.security.config.http.UserDetailsServiceFactoryBean: org.springframework.security.core.userdetails.AuthenticationUserDetailsService authenticationUserDetailsService(java.lang.String)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection doCreateConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.listener.AbstractJmsListeningContainer: javax.jms.Connection getSharedConnection()> 
<org.springframework.http.client.OkHttpClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: void closeConnection()> 
<org.springframework.security.config.http.ClearCredentialsMethodInvokingFactoryBean: boolean isEraseCredentialsAfterAuthentication()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache: void setCache(net.sf.ehcache.Ehcache)> 
<org.springframework.security.core.userdetails.cache.NullUserCache: org.springframework.security.core.userdetails.UserDetails getUserFromCache(java.lang.String)> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.net.URI,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler)> 
<org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl: java.lang.String getUsersByUsernameQuery()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.config.'annotation'.web.configurers.LogoutConfigurer logoutSuccessUrl(java.lang.String)> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver: com.gargoylesoftware.htmlunit.WebConnection getWebConnection()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.messaging.simp.user.UserRegistryMessageHandler: void setRegistryExpirationPeriod(long)> 
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.jms.listener.AbstractPollingMessageListenerContainer: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.web.socket.sockjs.frame.SockJsFrame: org.springframework.web.socket.sockjs.frame.SockJsFrame closeFrameAnotherConnectionOpen()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setPreAuthenticationChecks(org.springframework.security.core.userdetails.UserDetailsChecker)> 
<org.springframework.security.config.ldap.LdapUserServiceBeanDefinitionParser: org.springframework.beans.factory.support.RootBeanDefinition parseAuthoritiesPopulator(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.sql.Connection getConnection()> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper: void setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: void doReleaseConnection(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.messaging.simp.stomp.DefaultStompSession: boolean isConnected()> 
<org.springframework.messaging.simp.stomp.DefaultStompSession: void afterConnected(org.springframework.messaging.tcp.TcpConnection)> 
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.orm.jpa.vendor.HibernateJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionFactory)> 
<org.springframework.http.client.Netty4ClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: org.springframework.messaging.simp.user.SimpUserRegistry getSimpUserRegistry()> 
<org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: void setReobtainTransactionalConnections(boolean)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection doCreateConnection()> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: void releaseConnection(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jdbc.core.support.JdbcDaoSupport: void releaseConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.UserDetailsServiceConfigurer: org.springframework.security.core.userdetails.UserDetailsService getUserDetailsService()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)> 
<org.springframework.security.provisioning.MutableUser: java.lang.String getPassword()> 
<org.springframework.messaging.simp.user.DefaultUserDestinationResolver: org.springframework.messaging.simp.user.DefaultUserDestinationResolver$ParseResult parseMessage(org.springframework.messaging.MessageHeaders,java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getLogoutRequestMatcher(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: void setPassword(java.lang.String)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getCloseSuppressingConnectionProxy(java.sql.Connection)> 
<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler: int getConnectionCount()> 
<org.springframework.jms.support.JmsUtils: void closeConnection(javax.jms.Connection,boolean)> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: void setNativeConnectionNecessaryForNativeCallableStatements(boolean)> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Class,java.net.URI)> 
<org.springframework.jms.listener.SimpleMessageListenerContainer102: javax.jms.Connection createConnection()> 
<org.springframework.security.authentication.jaas.JaasAuthenticationProvider: void handleLogout(org.springframework.security.core.session.SessionDestroyedEvent)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.authentication.ProviderManagerBuilder)> 
<org.springframework.remoting.rmi.RmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: java.sql.Connection getConnection()> 
<org.springframework.security.config.authentication.CachingUserDetailsService: org.springframework.security.core.userdetails.UserCache getUserCache()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getCloseSuppressingConnectionProxy(javax.resource.cci.Connection)> 
<org.springframework.security.config.ldap.LdapUserServiceBeanDefinitionParser: java.lang.String getBeanClassName(org.w3c.dom.Element)> 
<org.springframework.security.provisioning.MutableUser: java.lang.String getUsername()> 
<org.springframework.messaging.simp.user.UserDestinationMessageHandler: org.springframework.messaging.simp.user.UserDestinationResolver getUserDestinationResolver()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void initConnection()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: void releaseConnection(javax.resource.cci.Connection)> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: boolean isPhysicallyConnected(org.hibernate.Session)> 
<org.springframework.jca.cci.core.CciTemplate: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jca.cci.core.CciTemplate: javax.resource.cci.ConnectionSpec getConnectionSpec()> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setConnectionRequestTimeout(int)> 
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: void initDefaultLoginFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isCorbaConnectFailure(java.lang.Throwable)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.lang.String getLogoutSuccessUrl()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jca.cci.connection.CciLocalTransactionManager: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.orm.toplink.TopLinkTransactionManager: java.sql.Connection getJdbcConnection(oracle.toplink.sessions.Session)> 
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: boolean isConnectionTransactional(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.orm.hibernate3.HibernateTransactionManager: void setPrepareConnection(boolean)> 
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.support.ManagedList getLogoutHandlers()> 
<org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor: void prepareConnection(java.net.HttpURLConnection,int)> 
<org.springframework.core.io.AbstractFileResolvingResource: void customizeConnection(java.net.HttpURLConnection)> 
<org.springframework.scheduling.quartz.LocalDataSourceJobStore: void closeConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.authentication.configurers.provisioning.JdbcUserDetailsManagerConfigurer: org.springframework.jdbc.datasource.init.DataSourceInitializer getDataSourceInit()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setMessageSource(org.springframework.context.MessageSource)> 
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.support.JmsAccessor: javax.jms.Connection createConnection()> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(org.omg.CORBA.SystemException)> 
<org.springframework.http.HttpHeaders: java.util.List getConnection()> 
<org.springframework.jms.listener.AbstractJmsListeningContainer: javax.jms.Connection createSharedConnection()> 
<org.springframework.web.socket.messaging.DefaultSimpUserRegistry: int getUserCount()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.jms.connection.SingleConnectionFactory: void prepareConnection(javax.jms.Connection)> 
<org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache: net.sf.ehcache.Ehcache getCache()> 
<org.springframework.jms.listener.DefaultMessageListenerContainer102: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.security.core.userdetails.memory.UserAttribute: java.util.List getAuthorities()> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.builders.HttpSecurity authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)> 
<org.springframework.security.config.http.HttpConfigurationBuilder: void setLogoutHandlers(org.springframework.beans.factory.support.ManagedList)> 
<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void connect()> 
<org.springframework.jms.connection.SingleConnectionFactory: void setReconnectOnException(boolean)> 
<org.springframework.jdbc.support.nativejdbc.Jdbc4NativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.core.userdetails.UserDetailsService getUserDetailsService()> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void initConnection()> 
<org.springframework.jdbc.datasource.DelegatingDataSource: java.sql.Connection getConnection()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void setConnectionSpecForCurrentThread(javax.resource.cci.ConnectionSpec)> 
<org.springframework.security.authentication.UsernamePasswordAuthenticationToken: java.lang.Object getCredentials()> 
<org.springframework.jca.cci.object.EisOperation: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.SingleConnectionFactory: void resetConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.connection.JmsTransactionManager: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void setRefreshServiceAfterConnectFailure(boolean)> 
