<org.springframework.mock.web.portlet.MockPortletResponse: void setProperty(java.lang.String,java.lang.String)> 
<org.springframework.http.client.AbstractClientHttpResponse: org.springframework.http.HttpStatus getStatusCode()> 
<org.springframework.mock.web.portlet.MockActionResponse: java.lang.String getRedirectedUrl()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String encodeUrl(java.lang.String)> 
<org.springframework.http.client.SimpleClientHttpRequestFactory: void setReadTimeout(int)> 
<org.springframework.web.util.ContentCachingResponseWrapper: int getContentSize()> 
<org.springframework.mock.web.portlet.MockMimeResponse: javax.portlet.PortletURL createActionURL()> 
<org.springframework.http.server.ServletServerHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: void setEvent(java.lang.String,java.io.Serializable)> 
<org.springframework.jms.listener.adapter.JmsResponse: java.lang.Object getResponse()> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setReadTimeout(int)> 
<org.springframework.mock.web.portlet.MockPortletResponse: java.lang.String[] getProperties(java.lang.String)> 
<org.springframework.web.multipart.support.StandardMultipartHttpServletRequest: java.util.Enumeration getParameterNames()> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setReadTimeout(int)> 
<org.springframework.mock.web.MockHttpServletResponse: int getContentLength()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String encodeURL(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.Object getHeaderValue(java.lang.String)> 
<org.springframework.http.client.Netty4ClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.mock.web.portlet.MockActionResponse: void sendRedirect(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletRequest: java.util.Map getParameterMap()> 
<org.springframework.web.client.DefaultResponseErrorHandler: java.nio.charset.Charset getCharset(org.springframework.http.client.ClientHttpResponse)> 
<org.springframework.web.util.ContentCachingResponseWrapper: void setStatus(int)> 
<org.springframework.web.servlet.view.document.AbstractPdfStamperView: com.lowagie.text.pdf.PdfReader readPdfResource()> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.io.OutputStream getPortletOutputStream()> 
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.util.List getMatchingAdvice(org.springframework.core.MethodParameter,java.lang.Class)> 
<org.springframework.mock.web.MockHttpServletResponse: void setHeader(java.lang.String,java.lang.String)> 
<org.springframework.web.context.request.ServletWebRequest: java.lang.String getParameter(java.lang.String)> 
<org.springframework.web.bind.MissingServletRequestParameterException: java.lang.String getParameterType()> 
<org.springframework.mock.web.portlet.MockPortletResponse: javax.servlet.http.Cookie getCookie(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: void setForwardedUrl(java.lang.String)> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setContentType(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)> 
<org.springframework.web.client.MessageBodyClientHttpResponseWrapper: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.mock.web.portlet.MockMimeResponse: javax.portlet.CacheControl getCacheControl()> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void initialize(org.springframework.web.servlet.mvc.method.'annotation'.ResponseBodyEmitter$Handler)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.util.Map getRenderParameterMap()> 
<org.springframework.http.client.SimpleClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void send(java.lang.Object)> 
<org.springframework.http.client.BufferingClientHttpResponseWrapper: int getRawStatusCode()> 
<org.springframework.http.client.OkHttp3ClientHttpRequestFactory: void setReadTimeout(int)> 
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: org.springframework.http.HttpInputMessage beforeBodyRead(org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> 
<org.springframework.mock.web.portlet.MockBaseURL: java.lang.String getParameter(java.lang.String)> 
<org.springframework.http.client.OkHttpClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.io.Serializable getEvent(java.lang.String)> 
<org.springframework.mock.web.portlet.MockResourceResponse: int getContentLength()> 
<org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag: boolean isReadonly()> 
<org.springframework.http.client.Netty4ClientHttpRequestFactory: void setReadTimeout(int)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.io.Serializable getEvent(javax.xml.namespace.QName)> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void sendInternal(java.lang.Object,org.springframework.http.MediaType)> 
<org.springframework.http.client.SimpleClientHttpResponse: java.io.InputStream getBody()> 
<org.springframework.web.util.ContentCachingResponseWrapper: void sendError(int)> 
<org.springframework.mock.web.MockHttpServletResponse: void setBufferSize(int)> 
<org.springframework.http.client.OkHttp3ClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.mock.web.MockHttpServletResponse: javax.servlet.http.Cookie[] getCookies()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String encodeRedirectUrl(java.lang.String)> 
<org.springframework.web.client.MessageBodyClientHttpResponseWrapper: int getRawStatusCode()> 
<org.springframework.util.ResponseTimeMonitorImpl: int getAverageResponseTimeMillis()> 
<org.springframework.web.bind.MissingServletRequestParameterException: java.lang.String getParameterName()> 
<org.springframework.http.client.OkHttp3ClientHttpResponse: java.io.InputStream getBody()> 
<org.springframework.mock.web.portlet.MockPortletResponse: java.util.Set getPropertyNames()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String encodeRedirectURL(java.lang.String)> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setIncludedUrl(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.io.PrintWriter getWriter()> 
<org.springframework.remoting.httpinvoker.CommonsHttpInvokerRequestExecutor: void setReadTimeout(int)> 
<org.springframework.mock.web.MockHttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()> 
<org.springframework.http.client.HttpComponentsClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.mock.web.portlet.MockActionResponse: void setRenderParameters(java.util.Map)> 
<org.springframework.mock.web.MockHttpServletResponse: void setCommitted(boolean)> 
<org.springframework.mock.web.portlet.MockPortletResponse: java.lang.String getNamespace()> 
<org.springframework.mock.web.MockHttpServletResponse: void setDateHeader(java.lang.String,long)> 
<org.springframework.web.util.ContentCachingResponseWrapper: void sendRedirect(java.lang.String)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.lang.String getRenderParameter(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: int getBufferSize()> 
<org.springframework.web.client.RestClientResponseException: java.lang.String getResponseBodyAsString()> 
<org.springframework.http.client.BufferingClientHttpResponseWrapper: org.springframework.http.HttpStatus getStatusCode()> 
<org.springframework.mock.web.portlet.MockRenderResponse: java.util.Collection getNextPossiblePortletModes()> 
<org.springframework.http.ResponseEntity: org.springframework.http.HttpStatus getStatusCode()> 
<org.springframework.http.client.HttpComponentsClientHttpResponse: java.io.InputStream getBody()> 
<org.springframework.mock.web.portlet.MockMimeResponse: int getBufferSize()> 
<org.springframework.mock.web.MockHttpServletResponse: void setContentLengthLong(long)> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.lang.String getIncludedUrl()> 
<org.springframework.mock.web.DelegatingServletInputStream: int read()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getContentAsString()> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleException(java.lang.Exception,org.springframework.web.context.request.WebRequest)> 
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor: void handleReturnValue(java.lang.Object,org.springframework.core.MethodParameter,org.springframework.web.method.support.ModelAndViewContainer,org.springframework.web.context.request.NativeWebRequest)> 
<org.springframework.util.ResponseTimeMonitorImpl: long getUptimeMillis()> 
<org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver: void setMessageSource(org.springframework.context.MessageSource)> 
<org.springframework.web.client.DefaultResponseErrorHandler: byte[] getResponseBody(org.springframework.http.client.ClientHttpResponse)> 
<org.springframework.web.client.MessageBodyClientHttpResponseWrapper: org.springframework.http.HttpStatus getStatusCode()> 
<org.springframework.mock.web.MockHttpServletResponse: java.util.List getIncludedUrls()> 
<org.springframework.web.util.ContentCachingResponseWrapper: java.io.PrintWriter getWriter()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getForwardedUrl()> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.lang.String getContentType()> 
<org.springframework.mock.web.portlet.MockPortletResponse: javax.servlet.http.Cookie[] getCookies()> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: void send(java.lang.Object,org.springframework.http.MediaType)> 
<org.springframework.web.client.RestClientResponseException: byte[] getResponseBodyAsByteArray()> 
<org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor: org.springframework.remoting.support.RemoteInvocationResult readRemoteInvocationResult(java.io.InputStream,java.lang.String)> 
<org.springframework.http.client.Netty4ClientHttpResponse: java.io.InputStream getBody()> 
<org.springframework.mock.web.portlet.MockRenderResponse: void setTitle(java.lang.String)> 
<org.springframework.mock.web.portlet.MockPortletResponse: java.lang.String encodeURL(java.lang.String)> 
<org.springframework.web.client.RestClientResponseException: org.springframework.http.HttpHeaders getResponseHeaders()> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.lang.String getForwardedUrl()> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.util.Locale getLocale()> 
<org.springframework.http.client.HttpComponentsAsyncClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.mock.web.MockHttpServletResponse: long getDateHeader(java.lang.String)> 
<org.springframework.web.context.request.ServletWebRequest: java.lang.String[] getParameterValues(java.lang.String)> 
<org.springframework.mock.web.portlet.MockRenderResponse: java.lang.String getTitle()> 
<org.springframework.mock.web.MockHttpServletRequest: java.util.Enumeration getParameterNames()> 
<org.springframework.mock.web.MockHttpServletResponse: java.util.Locale getLocale()> 
<org.springframework.mock.web.MockHttpServletResponse: void setOutputStreamAccessAllowed(boolean)> 
<org.springframework.http.client.HttpComponentsAsyncClientHttpResponse: java.io.InputStream getBody()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: void setWindowState(javax.portlet.WindowState)> 
<org.springframework.mock.web.MockHttpServletResponse: void setContentLength(int)> 
<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.lang.String[] getParameterValues(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletRequest: java.lang.String getParameter(java.lang.String)> 
<org.springframework.mock.web.portlet.MockActionResponse: void setRenderParameter(java.lang.String,java.lang.String[])> 
<org.springframework.http.server.ServletServerHttpResponse: java.io.OutputStream getBody()> 
<org.springframework.mock.web.MockHttpServletResponse: void setCharacterEncoding(java.lang.String)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: void setRenderParameter(java.lang.String,java.lang.String)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: javax.portlet.PortletMode getPortletMode()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getContentType()> 
<org.springframework.http.client.HttpComponentsAsyncClientHttpResponse: int getRawStatusCode()> 
<org.springframework.mock.web.MockHttpServletResponse: void setContentType(java.lang.String)> 
<org.springframework.web.client.MessageBodyClientHttpResponseWrapper: java.lang.String getStatusText()> 
<org.springframework.mock.web.MockHttpServletResponse: void setHeaderValue(java.lang.String,java.lang.Object)> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setForwardedUrl(java.lang.String)> 
<org.springframework.http.client.HttpComponentsClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.web.util.ContentCachingResponseWrapper: int getStatusCode()> 
<org.springframework.http.client.Netty4ClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.http.client.OkHttpClientHttpResponse: java.io.InputStream getBody()> 
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.lang.Object afterBodyRead(java.lang.Object,org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getRedirectedUrl()> 
<org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver: org.springframework.web.servlet.ModelAndView handleHttpMessageNotReadable(org.springframework.http.converter.HttpMessageNotReadableException,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object)> 
<org.springframework.web.util.ContentCachingResponseWrapper: byte[] getContentAsByteArray()> 
<org.springframework.mock.web.MockHttpServletResponse: int getStatus()> 
<org.springframework.mock.web.portlet.MockPortletResponse: org.w3c.dom.Element getXmlProperty(java.lang.String)> 
<org.springframework.util.ResponseTimeMonitorImpl: int getAccessCount()> 
<org.springframework.web.context.request.ServletWebRequest: java.util.Map getParameterMap()> 
<org.springframework.mock.web.MockHttpServletResponse: void setIncludedUrl(java.lang.String)> 
<org.springframework.util.ResponseTimeMonitorImpl: java.util.Date getLoadDate()> 
<org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver: java.lang.Object readWithMessageConverters(org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type)> 
<org.springframework.web.multipart.support.StandardMultipartHttpServletRequest: java.util.Map getParameterMap()> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setCommitted(boolean)> 
<org.springframework.web.servlet.tags.form.AbstractHtmlInputElementTag: void setReadonly(boolean)> 
<org.springframework.mock.web.portlet.MockPortletResponse: javax.portlet.PortalContext getPortalContext()> 
<org.springframework.web.client.DefaultResponseErrorHandler: org.springframework.http.HttpStatus getHttpStatusCode(org.springframework.http.client.ClientHttpResponse)> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter: java.lang.Long getTimeout()> 
<org.springframework.web.util.ContentCachingResponseWrapper: void setStatus(int,java.lang.String)> 
<org.springframework.mock.web.portlet.MockBaseURL: java.lang.String[] getParameterValues(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.util.List getHeaders(java.lang.String)> 
<org.springframework.http.client.HttpComponentsClientHttpResponse: int getRawStatusCode()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.lang.String[] getRenderParameterValues(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: long getContentLengthLong()> 
<org.springframework.http.client.SimpleClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.test.context.web.ServletTestExecutionListener: boolean alreadyPopulatedRequestContextHolder(org.springframework.test.context.TestContext)> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setCharacterEncoding(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.util.List getHeaderValues(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getCharacterEncoding()> 
<org.springframework.web.util.ContentCachingResponseWrapper: java.io.InputStream getContentInputStream()> 
<org.springframework.web.util.ContentCachingResponseWrapper: void sendError(int,java.lang.String)> 
<org.springframework.mock.web.MockHttpServletRequest: java.io.BufferedReader getReader()> 
<org.springframework.http.client.Netty4ClientHttpResponse: int getRawStatusCode()> 
<org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyAdviceChain: java.util.List getAdvice(java.lang.Class)> 
<org.springframework.mock.web.portlet.MockActionResponse: void setPortletMode(javax.portlet.PortletMode)> 
<org.springframework.mock.http.client.MockClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.mock.web.MockHttpServletResponse: void setStatus(int)> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler: org.springframework.web.servlet.mvc.method.'annotation'.ResponseBodyEmitterAdapter getAdapterFor(java.lang.Class)> 
<org.springframework.mock.web.portlet.MockPortletResponse: java.util.Set getXmlPropertyNames()> 
<org.springframework.mock.web.portlet.MockPortletResponse: void setNamespace(java.lang.String)> 
<org.springframework.web.client.RestClientResponseException: java.lang.String getStatusText()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: javax.portlet.WindowState getWindowState()> 
<org.springframework.mock.http.client.MockClientHttpResponse: int getRawStatusCode()> 
<org.springframework.http.server.ServletServerHttpResponse: javax.servlet.http.HttpServletResponse getServletResponse()> 
<org.springframework.http.client.BufferingClientHttpResponseWrapper: java.lang.String getStatusText()> 
<org.springframework.mock.web.MockHttpServletResponse: void sendRedirect(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.util.Collection getHeaderNames()> 
<org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice: org.springframework.http.converter.json.MappingJacksonValue getOrCreateContainer(java.lang.Object)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: void setPortletMode(javax.portlet.PortletMode)> 
<org.springframework.mock.web.portlet.MockMimeResponse: javax.portlet.PortletURL createRenderURL()> 
<org.springframework.http.client.OkHttp3ClientHttpResponse: int getRawStatusCode()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: void setRenderParameter(java.lang.String,java.lang.String[])> 
<org.springframework.http.client.BufferingClientHttpResponseWrapper: java.io.InputStream getBody()> 
<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Map getParameterMap()> 
<org.springframework.util.ResponseTimeMonitorImpl: int getBestResponseTimeMillis()> 
<org.springframework.http.client.OkHttpClientHttpResponse: int getRawStatusCode()> 
<org.springframework.mock.web.MockHttpServletResponse: void setIntHeader(java.lang.String,int)> 
<org.springframework.mock.web.portlet.MockMimeResponse: byte[] getContentAsByteArray()> 
<org.springframework.http.client.SimpleClientHttpResponse: int getRawStatusCode()> 
<org.springframework.mock.web.MockHttpServletResponse: javax.servlet.http.Cookie getCookie(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: byte[] getContentAsByteArray()> 
<org.springframework.util.ResponseTimeMonitorImpl: int getWorstResponseTimeMillis()> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getIncludedUrl()> 
<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.util.Enumeration getParameterNames()> 
<org.springframework.mock.web.portlet.MockActionResponse: void sendRedirect(java.lang.String,java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getErrorMessage()> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.lang.String getContentAsString()> 
<org.springframework.mock.web.portlet.MockActionResponse: void setRenderParameter(java.lang.String,java.lang.String)> 
<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter: org.springframework.http.HttpInputMessage beforeBodyRead(org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> 
<org.springframework.web.servlet.mvc.method.annotation.JsonViewRequestBodyAdvice: org.springframework.http.HttpInputMessage beforeBodyRead(org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> 
<org.springframework.web.servlet.mvc.method.annotation.AbstractJsonpResponseBodyAdvice: org.springframework.http.MediaType getContentType(org.springframework.http.MediaType,org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse)> 
<org.springframework.remoting.httpinvoker.AbstractHttpInvokerRequestExecutor: org.springframework.remoting.support.RemoteInvocationResult doReadRemoteInvocationResult(java.io.ObjectInputStream)> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.io.PrintWriter getWriter()> 
<org.springframework.http.client.OkHttpClientHttpResponse: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.web.util.ContentCachingResponseWrapper: javax.servlet.ServletOutputStream getOutputStream()> 
<org.springframework.http.client.HttpComponentsAsyncClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.mock.web.portlet.MockRenderResponse: void setNextPossiblePortletModes(java.util.Collection)> 
<org.springframework.web.client.RestClientResponseException: int getRawStatusCode()> 
<org.springframework.web.multipart.support.DefaultMultipartHttpServletRequest: java.lang.String getParameter(java.lang.String)> 
<org.springframework.mock.web.portlet.MockPortletResponse: org.w3c.dom.Element[] getXmlProperties(java.lang.String)> 
<org.springframework.mock.web.MockHttpServletResponse: void setLocale(java.util.Locale)> 
<org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdviceAdapter: java.lang.Object afterBodyRead(java.lang.Object,org.springframework.http.HttpInputMessage,org.springframework.core.MethodParameter,java.lang.reflect.Type,java.lang.Class)> 
<org.springframework.mock.web.MockHttpServletResponse: void setStatus(int,java.lang.String)> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setLocale(java.util.Locale)> 
<org.springframework.http.client.OkHttp3ClientHttpResponse: java.lang.String getStatusText()> 
<org.springframework.test.web.servlet.result.StatusResultMatchers: org.springframework.test.web.servlet.ResultMatcher isAlreadyReported()> 
<org.springframework.mock.web.portlet.MockMimeResponse: java.lang.String getCharacterEncoding()> 
<org.springframework.web.client.MessageBodyClientHttpResponseWrapper: java.io.InputStream getBody()> 
<org.springframework.mock.web.portlet.MockMimeResponse: void setBufferSize(int)> 
<org.springframework.mock.web.MockHttpServletResponse: java.lang.String getHeader(java.lang.String)> 
<org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver: org.springframework.web.servlet.ModelAndView resolveResponseStatus(org.springframework.web.bind.'annotation'.ResponseStatus,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,java.lang.Exception)> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.util.Iterator getEventNames()> 
<org.springframework.mock.web.MockHttpServletResponse: void setWriterAccessAllowed(boolean)> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler: org.springframework.http.ResponseEntity handleHttpMessageNotWritable(org.springframework.http.converter.HttpMessageNotWritableException,org.springframework.http.HttpHeaders,org.springframework.http.HttpStatus,org.springframework.web.context.request.WebRequest)> 
<org.springframework.http.client.BufferingClientHttpResponseWrapper: org.springframework.http.HttpHeaders getHeaders()> 
<org.springframework.mock.web.portlet.MockPortletResponse: java.lang.String getProperty(java.lang.String)> 
<org.springframework.mock.http.client.MockClientHttpResponse: org.springframework.http.HttpStatus getStatusCode()> 
<org.springframework.test.web.servlet.htmlunit.MockWebResponseBuilder: com.gargoylesoftware.htmlunit.util.Cookie createCookie(javax.servlet.http.Cookie)> 
<org.springframework.mock.web.portlet.MockActionResponse: void setWindowState(javax.portlet.WindowState)> 
<org.springframework.http.ResponseEntity: int getStatusCodeValue()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: java.util.Iterator getRenderParameterNames()> 
<org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler: java.util.Map getAdapterMap()> 
<org.springframework.mock.web.portlet.MockStateAwareResponse: void setEvent(javax.xml.namespace.QName,java.io.Serializable)> 
<org.springframework.mock.web.portlet.MockResourceResponse: void setContentLength(int)> 
