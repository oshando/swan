<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.embedded.SimpleDriverDataSourceFactory: org.springframework.jdbc.datasource.embedded.ConnectionProperties getConnectionProperties()> 
<org.springframework.jdbc.datasource.DataSourceUtils: boolean isConnectionTransactional(java.sql.Connection,javax.sql.DataSource)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getConnection()> 
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: org.springframework.jdbc.datasource.ConnectionHolder getConnectionHolderForSavepoint()> 
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.userdetails.UserDetailsChecker getPreAuthenticationChecks()> 
<org.springframework.security.config.annotation.web.configurers.X509Configurer: org.springframework.security.core.userdetails.AuthenticationUserDetailsService getAuthenticationUserDetailsService(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection getSharedConnectionProxy(javax.jms.Connection)> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: org.springframework.security.core.userdetails.AuthenticationUserDetailsService getAuthenticationUserDetailsService(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: boolean isCustomLogoutSuccess()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getConnection()> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationMangerBean()> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()> 
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: org.springframework.jdbc.datasource.ConnectionHolder getConnectionHolder()> 
<org.springframework.security.provisioning.MutableUser: boolean isCredentialsNonExpired()> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.orm.hibernate4.HibernateTransactionManager: boolean isSameConnectionForEntireSession(org.hibernate.Session)> 
<org.springframework.jms.listener.SimpleMessageListenerContainer: boolean sharedConnectionEnabled()> 
<org.springframework.security.authentication.AbstractAuthenticationToken: boolean isAuthenticated()> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection getTransactionAwareConnectionProxy(javax.jms.Connection)> 
<org.springframework.security.access.expression.SecurityExpressionRoot: boolean isAuthenticated()> 
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.jms.connection.SingleConnectionFactory: boolean isReconnectOnException()> 
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getTransactionAwareConnectionProxy(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.ConnectionHolder: java.sql.Connection getConnection()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.jdbc.support.nativejdbc.XAPoolNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: java.sql.Connection getTransactionAwareConnectionProxy(javax.sql.DataSource)> 
<org.springframework.jms.support.JmsAccessor: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: boolean isSameConnectionForEntireSession(org.hibernate.Session)> 
<org.springframework.jca.cci.connection.ConnectionHolder: javax.resource.cci.Connection getConnection()> 
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint getAuthenticationEntryPoint(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.test.web.servlet.result.StatusResultMatchers: org.springframework.test.web.servlet.ResultMatcher isProxyAuthenticationRequired()> 
<org.springframework.jms.core.JmsTemplate102: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.web.AuthenticationEntryPoint getAuthenticationEntryPoint()> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.userdetails.UserDetailsChecker getPostAuthenticationChecks()> 
<org.springframework.jdbc.datasource.SimpleDriverDataSource: java.sql.Connection getConnectionFromDriver(java.util.Properties)> 
<org.springframework.jms.listener.DefaultMessageListenerContainer: boolean sharedConnectionEnabled()> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.util.Properties getConnectionProperties()> 
<org.springframework.jdbc.datasource.SimpleConnectionHandle: java.sql.Connection getConnection()> 
<org.springframework.security.config.http.ClearCredentialsMethodInvokingFactoryBean: boolean isEraseCredentialsAfterAuthentication()> 
<org.springframework.security.access.event.AuthorizedEvent: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.sql.Connection getConnection()> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.security.access.intercept.InterceptorStatusToken: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.security.core.context.SecurityContextImpl: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.security.access.vote.AuthenticatedVoter: boolean isFullyAuthenticated(org.springframework.security.core.Authentication)> 
<org.springframework.security.config.http.CsrfBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getCsrfAuthenticationStrategy()> 
<org.springframework.messaging.simp.stomp.DefaultStompSession: boolean isConnected()> 
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: org.springframework.security.config.'annotation'.authentication.configuration.AuthenticationConfiguration getAuthenticationConfiguration()> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: java.sql.Connection getConnectionFromDriver(java.lang.String,java.lang.String)> 
<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getCloseSuppressingConnectionProxy(java.sql.Connection)> 
<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler: int getConnectionCount()> 
<org.springframework.remoting.rmi.RmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: java.sql.Connection getConnection()> 
<org.springframework.jdbc.datasource.DelegatingDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jca.cci.core.CciTemplate: javax.resource.cci.ConnectionSpec getConnectionSpec()> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isCorbaConnectFailure(java.lang.Throwable)> 
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.support.ManagedList getLogoutHandlers()> 
<org.springframework.security.access.expression.SecurityExpressionRoot: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(org.omg.CORBA.SystemException)> 
<org.springframework.security.authentication.jaas.SecurityContextLoginModule: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.jdbc.datasource.DelegatingDataSource: java.sql.Connection getConnection()> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.authentication.builders.AuthenticationManagerBuilder getAuthenticationRegistry()> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.security.access.event.AuthorizationFailureEvent: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.jca.cci.connection.CciLocalTransactionManager: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: javax.resource.cci.Connection getConnection()> 
<org.springframework.orm.hibernate3.HibernateTransactionManager: boolean isSameConnectionForEntireSession(org.hibernate.Session)> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: boolean isConnected()> 
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnectionFromDriver(java.util.Properties)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.authentication.logout.LogoutSuccessHandler getLogoutSuccessHandler()> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: javax.resource.cci.Connection getConnection()> 
<org.springframework.security.config.http.HttpConfigurationBuilder: org.springframework.beans.BeanMetadataElement getCsrfLogoutHandler()> 
<org.springframework.jms.listener.serversession.ServerSessionMessageListenerContainer: boolean sharedConnectionEnabled()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativePreparedStatements()> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.Connection getConnection()> 
<org.springframework.security.authentication.ProviderManager: boolean isEraseCredentialsAfterAuthentication()> 
<org.springframework.jdbc.datasource.DriverManagerDataSource: java.sql.Connection getConnectionFromDriverManager(java.lang.String,java.util.Properties)> 
<org.springframework.web.socket.client.WebSocketConnectionManager: boolean isConnected()> 
<org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource: java.sql.Connection getConnection()> 
<org.springframework.jdbc.datasource.DataSourceUtils: boolean connectionEquals(org.springframework.jdbc.datasource.ConnectionHolder,java.sql.Connection)> 
<org.springframework.security.access.intercept.RunAsUserToken: java.lang.Class getOriginalAuthentication()> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter getAuthenticationFilter()> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection getConnection()> 
<org.springframework.jdbc.datasource.ConnectionHolder: org.springframework.jdbc.datasource.ConnectionHandle getConnectionHandle()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.jdbc.datasource.ConnectionHolder: boolean hasConnection()> 
<org.springframework.jca.cci.connection.TransactionAwareConnectionFactoryProxy: javax.resource.cci.Connection getConnection()> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: org.springframework.beans.factory.support.ManagedList getLogoutHandlers()> 
<org.springframework.jms.connection.JmsTransactionManager: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.jms.core.JmsMessagingTemplate: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.support.nativejdbc.XAPoolNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.security.authentication.event.LoggerListener: boolean isLogInteractiveAuthenticationSuccessEvents()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.remoting.rmi.RmiClientInterceptorUtils: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.jms.core.JmsTemplate: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.jca.cci.core.CciTemplate: javax.resource.cci.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jms.connection.JmsResourceHolder: javax.jms.Connection getConnection()> 
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.web.authentication.session.SessionAuthenticationStrategy getSessionAuthenticationStrategy(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jdbc.core.support.JdbcDaoSupport: java.sql.Connection getConnection()> 
<org.springframework.jms.core.support.JmsGatewaySupport: javax.jms.ConnectionFactory getConnectionFactory()> 
<org.springframework.jdbc.datasource.DataSourceUtils: int getConnectionSynchronizationOrder(javax.sql.DataSource)> 
<org.springframework.test.web.servlet.result.StatusResultMatchers: org.springframework.test.web.servlet.ResultMatcher isNetworkAuthenticationRequired()> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: boolean isAlwaysReauthenticate()> 
<org.springframework.jms.listener.AbstractJmsListeningContainer: javax.jms.Connection getSharedConnection()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver: com.gargoylesoftware.htmlunit.WebConnection getWebConnection()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeStatements()> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)> 
<org.springframework.jms.listener.AbstractPollingMessageListenerContainer: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.ConnectionFactory getTargetConnectionFactory()> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: org.springframework.security.web.util.matcher.RequestMatcher getLogoutRequestMatcher(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getCloseSuppressingConnectionProxy(javax.resource.cci.Connection)> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: boolean isPhysicallyConnected(org.hibernate.Session)> 
<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.lang.String getLogoutSuccessUrl()> 
<org.springframework.orm.toplink.TopLinkTransactionManager: java.sql.Connection getJdbcConnection(oracle.toplink.sessions.Session)> 
<org.springframework.http.HttpHeaders: java.util.List getConnection()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: boolean isNativeConnectionNecessaryForNativeCallableStatements()> 
<org.springframework.jms.listener.DefaultMessageListenerContainer102: javax.jms.Connection getConnection(org.springframework.jms.connection.JmsResourceHolder)> 
<org.springframework.security.access.expression.SecurityExpressionRoot: boolean isFullyAuthenticated()> 
