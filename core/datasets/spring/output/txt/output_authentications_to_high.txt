<org.springframework.messaging.simp.stomp.Reactor2TcpStompClient: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.messaging.simp.stomp.StompSessionHandler)> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: void setNativeConnectionNecessaryForNativeStatements(boolean)> 
<org.springframework.orm.hibernate4.LocalSessionFactoryBuilder: org.springframework.orm.hibernate4.LocalSessionFactoryBuilder setMultiTenantConnectionProvider(java.lang.Object)> 
<org.springframework.jdbc.datasource.ConnectionHolder: void setConnection(java.sql.Connection)> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void injectAuthenticationDetailsSource(org.w3c.dom.Element,org.springframework.beans.factory.support.BeanDefinitionBuilder)> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.'annotation'.authentication.builders.AuthenticationManagerBuilder authenticationManagerBuilder(org.springframework.security.config.'annotation'.ObjectPostProcessor)> 
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.http.HttpHeaders: void setConnection(java.util.List)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: boolean isCustomLoginPage()> 
<org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.'annotation'.authentication.builders.AuthenticationManagerBuilder parentAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.jms.listener.serversession.ServerSessionMessageListenerContainer102: javax.jms.Connection createConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient,com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.jms.listener.DefaultMessageListenerContainer102: javax.jms.Connection createConnection()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Object,java.net.URI)> 
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: org.springframework.security.authentication.AuthenticationManager authenticationManager()> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void setConnectOnStartup(boolean)> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void createLoginPageFilterIfNeeded()> 
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: void setSessionFixationAuthenticationStrategy(org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: org.springframework.security.config.'annotation'.web.configurers.AbstractAuthenticationFilterConfigurer loginPage(java.lang.String)> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void removeConnectionSpecFromCurrentThread()> 
<org.springframework.security.authentication.jaas.JaasAuthenticationProvider: java.lang.String convertLoginConfigToUrl()> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.security.config.annotation.web.configurers.JeeConfigurer: org.springframework.security.config.'annotation'.web.configurers.JeeConfigurer authenticatedUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService)> 
<org.springframework.orm.hibernate5.LocalSessionFactoryBuilder: org.springframework.orm.hibernate5.LocalSessionFactoryBuilder setMultiTenantConnectionProvider(org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider)> 
<org.springframework.security.authentication.AbstractAuthenticationToken: void setAuthenticated(boolean)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: void setLoginPage(java.lang.String)> 
<org.springframework.jms.config.AbstractJmsListenerContainerFactory: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.http.client.SimpleClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.web.socket.client.standard.EndpointConnectionManager: void openConnection()> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.config.'annotation'.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer passwordEncoder(org.springframework.security.authentication.encoding.PasswordEncoder)> 
<org.springframework.jms.core.JmsMessagingTemplate: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jmx.access.MBeanClientInterceptor: void setConnectOnStartup(boolean)> 
<org.springframework.orm.toplink.LocalSessionFactory: void setDatabaseLogin(oracle.toplink.sessions.DatabaseSession,oracle.toplink.sessions.DatabaseLogin)> 
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.security.authentication.ProviderManager: org.springframework.security.core.Authentication doAuthentication(org.springframework.security.core.Authentication)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: void setNativeConnectionNecessaryForNativePreparedStatements(boolean)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.security.provisioning.JdbcUserDetailsManager: org.springframework.security.core.Authentication createNewAuthentication(org.springframework.security.core.Authentication,java.lang.String)> 
<org.springframework.jms.support.JmsAccessor: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession: void delegateConnectionClosed(org.springframework.web.socket.CloseStatus)> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void setPasswordEncoder(org.springframework.security.authentication.encoding.PasswordEncoder)> 
<org.springframework.jms.connection.CachingConnectionFactory: void resetConnection()> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void <init>(org.springframework.security.core.userdetails.UserDetailsService)> 
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.'annotation'.web.configurers.SessionManagementConfigurer sessionAuthenticationStrategy(org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)> 
<org.springframework.orm.hibernate4.HibernateTransactionManager: void setPrepareConnection(boolean)> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Class,javax.websocket.ClientEndpointConfig,java.net.URI)> 
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: void setAuthenticationConfiguration(org.springframework.security.config.'annotation'.authentication.configuration.AuthenticationConfiguration)> 
<org.springframework.jdbc.datasource.AbstractDriverBasedDataSource: void setConnectionProperties(java.util.Properties)> 
<org.springframework.messaging.simp.stomp.StompClientSupport: org.springframework.messaging.simp.stomp.StompHeaders processConnectHeaders(org.springframework.messaging.simp.stomp.StompHeaders)> 
<org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer: org.springframework.security.ldap.authentication.LdapAuthenticator createLdapAuthenticator(org.springframework.ldap.core.support.BaseLdapPathContextSource)> 
<org.springframework.jca.support.LocalConnectionFactoryBean: void setConnectionManager(javax.resource.spi.ConnectionManager)> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.config.'annotation'.authentication.configurers.GlobalAuthenticationConfigurerAdapter enableGlobalAuthenticationAutowiredConfigurer(org.springframework.context.ApplicationContext)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: org.springframework.security.config.'annotation'.web.configurers.AbstractAuthenticationFilterConfigurer authenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl: java.util.Collection attemptAuthentication(java.lang.String,java.lang.String)> 
<org.springframework.web.socket.sockjs.client.SockJsClient: void setConnectTimeoutScheduler(org.springframework.scheduling.TaskScheduler)> 
<org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer: org.springframework.security.config.'annotation'.web.configurers.FormLoginConfigurer loginPage(java.lang.String)> 
<org.springframework.web.socket.sockjs.client.WebSocketTransport: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler)> 
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void publishAuthenticationFailure(org.springframework.security.core.AuthenticationException,org.springframework.security.core.Authentication)> 
<org.springframework.jca.cci.core.CciTemplate: void setConnectionSpec(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void createLazyConnection()> 
<org.springframework.web.socket.sockjs.client.AbstractXhrTransport: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler)> 
<org.springframework.security.authentication.jaas.SecurityContextLoginModule: boolean login()> 
<org.springframework.jmx.access.MBeanClientInterceptor: void setRefreshOnConnectFailure(boolean)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.SecurityBuilder)> 
<org.springframework.orm.hibernate5.LocalSessionFactoryBean: void setMultiTenantConnectionProvider(org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.messaging.simp.stomp.DefaultStompSession: void afterConnectFailure(java.lang.Throwable)> 
<org.springframework.security.config.annotation.web.configurers.X509Configurer: org.springframework.security.config.'annotation'.web.configurers.X509Configurer authenticationUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService)> 
<org.springframework.messaging.simp.stomp.StompHeaders: void setLogin(java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLoginProcessingUrlMatcher(java.lang.String)> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void setConnectionSpec(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jdbc.datasource.DataSourceUtils: void doReleaseConnection(java.sql.Connection,javax.sql.DataSource)> 
<org.springframework.jdbc.support.nativejdbc.XAPoolNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.orm.hibernate5.HibernateTransactionManager: void setPrepareConnection(boolean)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.TopicConnection doCreateTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jmx.access.ConnectorDelegate: javax.management.MBeanServerConnection connect(javax.management.remote.JMXServiceURL,java.util.Map,java.lang.String)> 
<org.springframework.jdbc.datasource.DataSourceUtils: void releaseConnection(java.sql.Connection,javax.sql.DataSource)> 
<org.springframework.security.provisioning.JdbcUserDetailsManager: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.messaging.simp.stomp.StompHeaderAccessor: void setLogin(java.lang.String)> 
<org.springframework.jdbc.datasource.DataSourceUtils: void resetConnectionAfterTransaction(java.sql.Connection,java.lang.Integer)> 
<org.springframework.jdbc.datasource.AbstractDataSource: void setLoginTimeout(int)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.Connection createConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: void setShouldStopConnections(boolean)> 
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.JmsTransactionManager: javax.jms.Connection createConnection()> 
<org.springframework.security.config.http.HttpSecurityBeanDefinitionParser: org.springframework.beans.factory.config.BeanReference createAuthenticationManager(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,org.springframework.beans.factory.support.ManagedList)> 
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: org.springframework.security.config.'annotation'.web.configurers.AnonymousConfigurer authenticationFilter(org.springframework.security.web.authentication.AnonymousAuthenticationFilter)> 
<org.springframework.remoting.support.SimpleHttpServerFactoryBean: void setAuthenticator(com.sun.net.httpserver.Authenticator)> 
<org.springframework.mock.web.MockHttpServletRequest: void login(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.connection.JmsResourceHolder: void addConnection(javax.jms.Connection)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.Authentication createSuccessAuthentication(java.lang.Object,org.springframework.security.core.Authentication,org.springframework.security.core.userdetails.UserDetails)> 
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.'annotation'.web.configurers.SessionManagementConfigurer sessionAuthenticationErrorUrl(java.lang.String)> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setLegacyConnectionTimeout(org.apache.http.client.HttpClient,int)> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setLegacyConnectionTimeout(org.apache.http.client.HttpClient,int)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.TopicConnection createTopicConnection()> 
<org.springframework.orm.toplink.LocalSessionFactory: void setLoginProperties(java.util.Properties)> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setConnectionRequestTimeout(int)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.authentication.ProviderManagerBuilder)> 
<org.springframework.jdbc.datasource.UserCredentialsDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> 
<org.springframework.orm.toplink.LocalSessionFactory: void setLoginPropertyMap(java.util.Map)> 
<org.springframework.security.authentication.jaas.JaasAuthenticationProvider: void setLoginExceptionResolver(org.springframework.security.authentication.jaas.LoginExceptionResolver)> 
<org.springframework.security.authentication.TestingAuthenticationProvider: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)> 
<org.springframework.orm.toplink.LocalSessionFactory: void setDatabaseLogin(oracle.toplink.sessions.DatabaseLogin)> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: void setGlobalAuthenticationConfigurers(java.util.List)> 
<org.springframework.jdbc.support.nativejdbc.WebLogicNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.remoting.rmi.RmiClientInterceptor: void setRefreshStubOnConnectFailure(boolean)> 
<org.springframework.security.config.annotation.web.configurers.X509Configurer: org.springframework.security.config.'annotation'.web.configurers.X509Configurer authenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void prepareConnection(javax.resource.cci.Connection)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAlwaysReauthenticate(boolean)> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: void setLoginContextName(java.lang.String)> 
<org.springframework.http.client.SimpleClientHttpRequestFactory: void prepareConnection(java.net.HttpURLConnection,java.lang.String)> 
<org.springframework.jms.core.support.JmsGatewaySupport: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationProvider: org.springframework.security.authentication.rcp.RemoteAuthenticationManager getRemoteAuthenticationManager()> 
<org.springframework.jms.listener.SimpleMessageListenerContainer: void prepareSharedConnection(javax.jms.Connection)> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void createFormLoginFilter(org.springframework.beans.factory.config.BeanReference,org.springframework.beans.factory.config.BeanReference)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.config.'annotation'.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer withObjectPostProcessor(org.springframework.security.config.'annotation'.ObjectPostProcessor)> 
<org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: org.springframework.security.config.'annotation'.web.configurers.openid.OpenIDLoginConfigurer authenticationUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService)> 
<org.springframework.http.client.OkHttpClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.security.authentication.jaas.DefaultJaasAuthenticationProvider: javax.security.auth.login.LoginContext createLoginContext(javax.security.auth.callback.CallbackHandler)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.net.URI,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler)> 
<org.springframework.security.config.annotation.web.configurers.SessionManagementConfigurer: org.springframework.security.config.'annotation'.web.configurers.SessionManagementConfigurer addSessionAuthenticationStrategy(org.springframework.security.web.authentication.session.SessionAuthenticationStrategy)> 
<org.springframework.security.config.annotation.web.configurers.JeeConfigurer: org.springframework.security.web.authentication.preauth.j2ee.J2eeBasedPreAuthenticatedWebAuthenticationDetailsSource createWebAuthenticationDetailsSource()> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: org.springframework.security.core.userdetails.UserDetails retrieveUser(java.lang.String,org.springframework.security.authentication.UsernamePasswordAuthenticationToken)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setPreAuthenticationChecks(org.springframework.security.core.userdetails.UserDetailsChecker)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: void setLoginExceptionResolver(org.springframework.security.authentication.jaas.LoginExceptionResolver)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: void doReleaseConnection(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.config.'annotation'.web.configurers.ExceptionHandlingConfigurer authenticationEntryPoint(org.springframework.security.web.AuthenticationEntryPoint)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.security.authentication.jaas.event.JaasAuthenticationEvent: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.jdbc.datasource.embedded.HsqlEmbeddedDatabaseConfigurer: void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties,java.lang.String)> 
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler: void setClientLogin(java.lang.String)> 
<org.springframework.security.authentication.jaas.JaasAuthenticationProvider: void setLoginContextName(java.lang.String)> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void setSaltSource(org.springframework.security.authentication.dao.SaltSource)> 
<org.springframework.orm.jpa.vendor.HibernateJpaDialect: org.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(javax.persistence.EntityManager,boolean)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection doCreateConnection()> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: void releaseConnection(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)> 
<org.springframework.messaging.simp.config.StompBrokerRelayRegistration: org.springframework.messaging.simp.config.StompBrokerRelayRegistration setSystemLogin(java.lang.String)> 
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: org.springframework.security.authentication.AuthenticationManager authenticationManagerBean()> 
<org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor: void setNativeConnectionNecessaryForNativeCallableStatements(boolean)> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(java.lang.Class,java.net.URI)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer: void configure(org.springframework.security.config.'annotation'.authentication.ProviderManagerBuilder)> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.FormLoginConfigurer formLogin()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void initConnection()> 
<org.springframework.jca.cci.core.support.CciDaoSupport: void releaseConnection(javax.resource.cci.Connection)> 
<org.springframework.jca.cci.core.CciTemplate: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setConnectionRequestTimeout(int)> 
<org.springframework.web.socket.handler.PerConnectionWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: void initDefaultLoginFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: org.springframework.security.web.util.matcher.RequestMatcher createLoginProcessingUrlMatcher(java.lang.String)> 
<org.springframework.jdbc.support.nativejdbc.NativeJdbcExtractorAdapter: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.security.authentication.jaas.JaasAuthenticationProvider: void setLoginConfig(org.springframework.core.io.Resource)> 
<org.springframework.jca.cci.connection.CciLocalTransactionManager: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.web.socket.handler.AbstractWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: boolean isConnectionTransactional(javax.resource.cci.Connection,javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jms.connection.SingleConnectionFactory: void prepareConnection(javax.jms.Connection)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.QueueConnection createQueueConnection()> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.builders.HttpSecurity authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)> 
<org.springframework.remoting.rmi.RmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.jms.connection.SingleConnectionFactory: void setReconnectOnException(boolean)> 
<org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer: org.springframework.security.config.'annotation'.web.configurers.RememberMeConfigurer authenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void initConnection()> 
<org.springframework.jms.connection.DelegatingConnectionFactory: void setTargetConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.connection.JmsTransactionManager: void setConnectionFactory(javax.jms.ConnectionFactory)> 
<org.springframework.jms.core.JmsTemplate102: javax.jms.Connection createConnection()> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void createPrauthEntryPoint(org.w3c.dom.Element)> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.lang.String,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler,java.lang.Object[])> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.Connection createConnection()> 
<org.springframework.jdbc.datasource.embedded.H2EmbeddedDatabaseConfigurer: void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties,java.lang.String)> 
<org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy: void checkDefaultConnectionProperties(java.sql.Connection)> 
<org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration: void setAuthenticationTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)> 
<org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy: javax.jms.QueueConnection createQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.core.context.SecurityContextImpl: void setAuthentication(org.springframework.security.core.Authentication)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: void updateAuthenticationDefaults()> 
<org.springframework.security.config.annotation.web.configurers.FormLoginConfigurer: void initDefaultLoginFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jdbc.datasource.SimpleConnectionHandle: void releaseConnection(java.sql.Connection)> 
<org.springframework.ejb.access.AbstractRemoteSlsbInvokerInterceptor: void setRefreshHomeOnConnectFailure(boolean)> 
<org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer: org.springframework.security.ldap.authentication.BindAuthenticator createBindAuthenticator(org.springframework.ldap.core.support.BaseLdapPathContextSource)> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getTargetConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.WebSphereDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> 
<org.springframework.http.client.HttpComponentsClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection createConnection()> 
<org.springframework.security.config.http.DefaultFilterChainValidator: void checkLoginPageIsntProtected(org.springframework.security.web.FilterChainProxy,java.util.List)> 
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void scheduleConnectTimeoutTask(org.springframework.web.socket.sockjs.client.DefaultTransportRequest$ConnectCallback)> 
<org.springframework.http.client.OkHttp3ClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.jdbc.datasource.DelegatingDataSource: void setLoginTimeout(int)> 
<org.springframework.security.authentication.DefaultAuthenticationEventPublisher: void publishAuthenticationSuccess(org.springframework.security.core.Authentication)> 
<org.springframework.jca.cci.connection.DelegatingConnectionFactory: void setTargetConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.web.socket.messaging.StompSubProtocolHandler: org.springframework.messaging.simp.stomp.StompHeaderAccessor afterStompSessionConnected(org.springframework.messaging.Message,org.springframework.messaging.simp.stomp.StompHeaderAccessor,org.springframework.web.socket.WebSocketSession)> 
<org.springframework.jmx.access.MBeanClientInterceptor: java.lang.Object handleConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.'annotation'.authentication.builders.AuthenticationManagerBuilder authenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: java.lang.Object handleRemoteConnectFailure(org.aopalliance.intercept.MethodInvocation,java.lang.Exception)> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void additionalAuthenticationChecks(org.springframework.security.core.userdetails.UserDetails,org.springframework.security.authentication.UsernamePasswordAuthenticationToken)> 
<org.springframework.security.authentication.event.LoggerListener: void setLogInteractiveAuthenticationSuccessEvents(boolean)> 
<org.springframework.messaging.simp.config.StompBrokerRelayRegistration: org.springframework.messaging.simp.config.StompBrokerRelayRegistration setClientLogin(java.lang.String)> 
<org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor: void setConnectTimeout(int)> 
<org.springframework.web.socket.sockjs.client.RestTemplateXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer: org.springframework.security.config.'annotation'.authentication.configurers.userdetails.AbstractDaoAuthenticationConfigurer passwordEncoder(org.springframework.security.crypto.password.PasswordEncoder)> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: org.springframework.security.config.'annotation'.web.configurers.openid.OpenIDLoginConfigurer loginProcessingUrl(java.lang.String)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.JdbcTransactionObjectSupport: void setConnectionHolder(org.springframework.jdbc.datasource.ConnectionHolder)> 
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: void registerDefaultAuthenticationEntryPoint(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.jms.connection.SingleConnectionFactory: void initConnection()> 
<org.springframework.jms.connection.SingleConnectionFactory102: javax.jms.Connection doCreateConnection()> 
<org.springframework.orm.jdo.DefaultJdoDialect: void releaseJdbcConnection(org.springframework.jdbc.datasource.ConnectionHandle,javax.jdo.PersistenceManager)> 
<org.springframework.jms.connection.JmsResourceHolder: javax.jms.Connection getConnection(java.lang.Class)> 
<org.springframework.remoting.rmi.JndiRmiClientInterceptor: void setRefreshStubOnConnectFailure(boolean)> 
<org.springframework.http.client.SimpleClientHttpRequestFactory: java.net.HttpURLConnection openConnection(java.net.URL,java.net.Proxy)> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.web.socket.sockjs.client.DefaultTransportRequest: void connect(org.springframework.web.socket.WebSocketHandler,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService)> 
<org.springframework.orm.jpa.DefaultJpaDialect: void releaseJdbcConnection(org.springframework.jdbc.datasource.ConnectionHandle,javax.persistence.EntityManager)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.web.socket.adapter.jetty.JettyWebSocketHandlerAdapter: void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.messaging.simp.stomp.StompHeaders processConnectHeaders(org.springframework.messaging.simp.stomp.StompHeaders)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.QueueConnection doCreateQueueConnection(java.lang.String,java.lang.String)> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.jms.remoting.JmsInvokerClientInterceptor: javax.jms.Connection createConnection()> 
<org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter: void setAuthenticator(com.sun.net.httpserver.Authenticator)> 
<org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: void registerDefaultAuthenticationEntryPoint(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer: void <init>(org.springframework.security.core.userdetails.UserDetailsService)> 
<org.springframework.messaging.simp.stomp.StompSessionHandlerAdapter: void afterConnected(org.springframework.messaging.simp.stomp.StompSession,org.springframework.messaging.simp.stomp.StompHeaders)> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.lang.Integer prepareConnectionForTransaction(java.sql.Connection,org.springframework.transaction.TransactionDefinition)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.JmsTransactionManager102: javax.jms.Connection createConnection()> 
<org.springframework.security.authentication.event.AbstractAuthenticationEvent: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.web.socket.client.WebSocketConnectionManager: void openConnection()> 
<org.springframework.security.config.annotation.authentication.configurers.ldap.LdapAuthenticationProviderConfigurer: org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator createPasswordCompareAuthenticator(org.springframework.ldap.core.support.BaseLdapPathContextSource)> 
<org.springframework.security.core.AuthenticationException: org.springframework.security.core.Authentication getAuthentication()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void prepareConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.web.configurers.RememberMeConfigurer: void initDefaultLoginFilter(org.springframework.security.config.'annotation'.web.HttpSecurityBuilder)> 
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: org.springframework.security.config.'annotation'.web.configurers.HttpBasicConfigurer authenticationEntryPoint(org.springframework.security.web.AuthenticationEntryPoint)> 
<org.springframework.jca.support.LocalConnectionFactoryBean: void setManagedConnectionFactory(javax.resource.spi.ManagedConnectionFactory)> 
<org.springframework.jms.connection.DelegatingConnectionFactory: javax.jms.TopicConnection createTopicConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.provisioning.InMemoryUserDetailsManager: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.web.socket.sockjs.client.UndertowXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.security.authentication.jaas.AbstractJaasAuthenticationProvider: org.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication)> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void doAfterPropertiesSet()> 
<org.springframework.web.socket.client.standard.AnnotatedEndpointConnectionManager: void openConnection()> 
<org.springframework.jca.cci.connection.SingleConnectionFactory: void resetConnection()> 
<org.springframework.messaging.simp.stomp.Reactor2TcpStompClient: org.springframework.util.concurrent.ListenableFuture connect(org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection createConnection()> 
<org.springframework.jdbc.datasource.IsolationLevelDataSourceAdapter: java.sql.Connection doGetConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.authentication.dao.AbstractUserDetailsAuthenticationProvider: void setPostAuthenticationChecks(org.springframework.security.core.userdetails.UserDetailsChecker)> 
<org.springframework.jdbc.core.JdbcTemplate: java.sql.Connection createConnectionProxy(java.sql.Connection)> 
<org.springframework.security.config.annotation.web.configurers.openid.OpenIDLoginConfigurer: org.springframework.security.config.'annotation'.web.configurers.openid.OpenIDLoginConfigurer loginPage(java.lang.String)> 
<org.springframework.web.socket.sockjs.client.JettyXhrTransport: void connectInternal(org.springframework.web.socket.sockjs.client.TransportRequest,org.springframework.web.socket.WebSocketHandler,java.net.URI,org.springframework.http.HttpHeaders,org.springframework.web.socket.sockjs.client.XhrClientSockJsSession,org.springframework.util.concurrent.SettableListenableFuture)> 
<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.openid.OpenIDLoginConfigurer openidLogin()> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: java.sql.Connection getConnection(java.lang.String,java.lang.String)> 
<org.springframework.jdbc.datasource.SingleConnectionDataSource: void resetConnection()> 
<org.springframework.security.config.annotation.web.configurers.AbstractAuthenticationFilterConfigurer: org.springframework.security.config.'annotation'.web.configurers.AbstractAuthenticationFilterConfigurer loginProcessingUrl(java.lang.String)> 
<org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer: void configureConnectionProperties(org.springframework.jdbc.datasource.embedded.ConnectionProperties,java.lang.String)> 
<org.springframework.jdbc.support.nativejdbc.JBossNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter: org.springframework.security.authentication.AuthenticationManager authenticationManager()> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection createConnection(java.lang.String,java.lang.String)> 
<org.springframework.security.config.annotation.web.configurers.HttpBasicConfigurer: org.springframework.security.config.'annotation'.web.configurers.HttpBasicConfigurer authenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource)> 
<org.springframework.jms.connection.SingleConnectionFactory: javax.jms.Connection doCreateConnection()> 
<org.springframework.cache.interceptor.CacheAspectSupport: void logInvalidating(org.springframework.cache.interceptor.CacheAspectSupport$CacheOperationContext,org.springframework.cache.interceptor.CacheEvictOperation,java.lang.Object)> 
<org.springframework.jdbc.datasource.WebSphereDataSourceAdapter: java.lang.Object createConnectionSpec(java.lang.Integer,java.lang.Boolean,java.lang.String,java.lang.String)> 
<org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor: java.sql.Connection getRawConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection getConnection(javax.sql.DataSource)> 
<org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder: org.springframework.security.config.'annotation'.authentication.builders.AuthenticationManagerBuilder authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)> 
<org.springframework.web.socket.handler.WebSocketHandlerDecorator: void afterConnectionEstablished(org.springframework.web.socket.WebSocketSession)> 
<org.springframework.security.core.AuthenticationException: void setAuthentication(org.springframework.security.core.Authentication)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: boolean shouldObtainFixedConnection(javax.sql.DataSource)> 
<org.springframework.test.web.servlet.htmlunit.MockMvcWebConnectionBuilderSupport: com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient)> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.lang.String,org.springframework.web.socket.WebSocketHttpHeaders,org.springframework.messaging.simp.stomp.StompHeaders,org.springframework.messaging.simp.stomp.StompSessionHandler,java.lang.Object[])> 
<org.springframework.orm.hibernate4.LocalSessionFactoryBean: void setMultiTenantConnectionProvider(java.lang.Object)> 
<org.springframework.jca.cci.connection.ConnectionFactoryUtils: javax.resource.cci.Connection getConnection(javax.resource.cci.ConnectionFactory,javax.resource.cci.ConnectionSpec)> 
<org.springframework.security.authentication.ProviderManager: void setEraseCredentialsAfterAuthentication(boolean)> 
<org.springframework.jms.connection.ConnectionFactoryUtils: void releaseConnection(javax.jms.Connection,javax.jms.ConnectionFactory,boolean)> 
<org.springframework.web.socket.messaging.StompSubProtocolHandler: org.springframework.messaging.simp.stomp.StompHeaderAccessor convertConnectAcktoStompConnected(org.springframework.messaging.simp.stomp.StompHeaderAccessor)> 
<org.springframework.jms.listener.AbstractJmsListeningContainer: void prepareSharedConnection(javax.jms.Connection)> 
<org.springframework.test.web.servlet.htmlunit.webdriver.WebConnectionHtmlUnitDriver: void setWebConnection(com.gargoylesoftware.htmlunit.WebConnection)> 
<org.springframework.security.access.intercept.AbstractSecurityInterceptor: org.springframework.security.core.Authentication authenticateIfRequired()> 
<org.springframework.jdbc.datasource.DataSourceUtils: java.sql.Connection doGetConnection(javax.sql.DataSource)> 
<org.springframework.web.socket.messaging.WebSocketStompClient: org.springframework.util.concurrent.ListenableFuture connect(java.lang.String,org.springframework.messaging.simp.stomp.StompSessionHandler,java.lang.Object[])> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl: void setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager)> 
<org.springframework.test.context.web.socket.MockServerContainer: javax.websocket.Session connectToServer(javax.websocket.Endpoint,javax.websocket.ClientEndpointConfig,java.net.URI)> 
<org.springframework.security.config.http.UserDetailsServiceFactoryBean: org.springframework.security.core.userdetails.AuthenticationUserDetailsService authenticationUserDetailsService(java.lang.String)> 
<org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter: javax.jms.Connection doCreateConnection(java.lang.String,java.lang.String)> 
<org.springframework.web.socket.messaging.SubProtocolWebSocketHandler: void afterConnectionClosed(org.springframework.web.socket.WebSocketSession,org.springframework.web.socket.CloseStatus)> 
<org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer: org.springframework.security.config.'annotation'.web.configurers.ExceptionHandlingConfigurer defaultAuthenticationEntryPointFor(org.springframework.security.web.AuthenticationEntryPoint,org.springframework.security.web.util.matcher.RequestMatcher)> 
<org.springframework.security.config.annotation.web.configurers.AnonymousConfigurer: org.springframework.security.config.'annotation'.web.configurers.AnonymousConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider)> 
<org.springframework.messaging.simp.stomp.DefaultStompSession: void afterConnected(org.springframework.messaging.tcp.TcpConnection)> 
<org.springframework.http.client.Netty4ClientHttpRequestFactory: void setConnectTimeout(int)> 
<org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy: void setReobtainTransactionalConnections(boolean)> 
<org.springframework.jdbc.core.support.JdbcDaoSupport: void releaseConnection(java.sql.Connection)> 
<org.springframework.security.config.annotation.web.configurers.X509Configurer: org.springframework.security.config.'annotation'.web.configurers.X509Configurer x509AuthenticationFilter(org.springframework.security.web.authentication.preauth.x509.X509AuthenticationFilter)> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationManagerImpl: org.springframework.security.authentication.AuthenticationManager getAuthenticationManager()> 
<org.springframework.jms.listener.SimpleMessageListenerContainer102: javax.jms.Connection createConnection()> 
<org.springframework.security.authentication.dao.DaoAuthenticationProvider: void setIncludeDetailsObject(boolean)> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: javax.resource.cci.Connection doGetConnection(javax.resource.cci.ConnectionSpec)> 
<org.springframework.security.authentication.rcp.RemoteAuthenticationProvider: void setRemoteAuthenticationManager(org.springframework.security.authentication.rcp.RemoteAuthenticationManager)> 
<org.springframework.orm.hibernate3.HibernateTransactionManager: void setPrepareConnection(boolean)> 
<org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor: void prepareConnection(java.net.HttpURLConnection,int)> 
<org.springframework.core.io.AbstractFileResolvingResource: void customizeConnection(java.net.HttpURLConnection)> 
<org.springframework.security.config.http.AuthenticationConfigBuilder: void createOpenIDLoginFilter(org.springframework.beans.factory.config.BeanReference,org.springframework.beans.factory.config.BeanReference)> 
<org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler: void setSystemLogin(java.lang.String)> 
<org.springframework.jms.support.JmsAccessor: javax.jms.Connection createConnection()> 
<org.springframework.jms.listener.AbstractJmsListeningContainer: javax.jms.Connection createSharedConnection()> 
<org.springframework.security.config.annotation.web.configurers.JeeConfigurer: org.springframework.security.config.'annotation'.web.configurers.JeeConfigurer j2eePreAuthenticatedProcessingFilter(org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter)> 
<org.springframework.jmx.support.MBeanServerConnectionFactoryBean: void connect()> 
<org.springframework.jdbc.support.nativejdbc.Jdbc4NativeJdbcExtractor: java.sql.Connection doGetNativeConnection(java.sql.Connection)> 
<org.springframework.jca.cci.connection.ConnectionSpecConnectionFactoryAdapter: void setConnectionSpecForCurrentThread(javax.resource.cci.ConnectionSpec)> 
<org.springframework.security.authentication.ProviderManager: void setAuthenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher)> 
<org.springframework.jca.cci.object.EisOperation: void setConnectionFactory(javax.resource.cci.ConnectionFactory)> 
<org.springframework.jms.connection.SingleConnectionFactory: void resetConnection()> 
<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void setRefreshServiceAfterConnectFailure(boolean)> 
<org.springframework.security.access.vote.AuthenticatedVoter: void setAuthenticationTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver)> 
