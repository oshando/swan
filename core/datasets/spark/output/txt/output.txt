<spark.Routable: void connect(java.lang.String,java.lang.String,spark.Route,spark.ResponseTransformer)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.Spark: void setSecure(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINKS_
<spark.Routable: void connect(java.lang.String,java.lang.String,spark.Route)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)> -> _SINKS__CWE601_
<spark.utils.ResourceUtils: java.net.URL getURL(java.lang.String)> -> _SOURCES_
<spark.Spark: void connect(java.lang.String,spark.Route)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.resource.ExternalResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)> -> _SOURCES_
<spark.serialization.DefaultSerializer: void process(java.io.OutputStream,java.lang.Object)> -> _SINKS_
<spark.Spark: void get(java.lang.String,spark.Route)> -> _SOURCES_
<spark.utils.ResourceUtils: java.io.File getFile(java.net.URI)> -> _SOURCES_
<spark.Routable: void get(java.lang.String,java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _SOURCES_
<spark.Service: void addWebSocketHandler(java.lang.String,spark.embeddedserver.jetty.websocket.WebSocketHandlerWrapper)> -> _SINKS_
<spark.resource.ClassPathResource: java.lang.String getDescription()> -> _SOURCES_
<spark.ExceptionMapper: spark.ExceptionHandlerImpl getHandler(java.lang.Class)> -> _SOURCES_
<spark.RequestResponseFactory: spark.Request create(javax.servlet.http.HttpServletRequest)> -> _SOURCES__CWE601_
<spark.embeddedserver.jetty.SocketConnectorFactory: org.eclipse.jetty.server.HttpConnectionFactory createHttpConnectionFactory()> -> _CWE306__CWE862__AUTHENTICATIONS_TO_HIGH_
<spark.Routable: void connect(java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.CustomErrorPages: spark.CustomErrorPages getInstance()> -> _SOURCES_
<spark.serialization.Serializer: void setNext(spark.serialization.Serializer)> -> _SINKS_
<spark.HaltException: java.lang.String getBody()> -> _SOURCES_
<spark.servlet.FilterTools: java.lang.String getRelativePath(javax.servlet.http.HttpServletRequest,java.lang.String)> -> _SOURCES_
<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)> -> _SOURCES_
<spark.route.SimpleRouteMatcher: void parseValidateAddRoute(java.lang.String,java.lang.String,java.lang.Object)> -> _SINKS_
<spark.utils.ResourceUtils: java.io.File getFile(java.net.URL,java.lang.String)> -> _SOURCES_
<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()> -> _SOURCES_
<spark.RouteImpl: java.lang.String getAcceptType()> -> _SOURCES_
<spark.Service: void connect(java.lang.String,spark.Route)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.Response: void redirect(java.lang.String,int)> -> _SINKS__CWE601_
<spark.routematch.RouteMatch: java.lang.Object getTarget()> -> _SOURCES_
<spark.resource.AbstractResource: java.io.File getFileForLastModifiedCheck()> -> _SOURCES_
<spark.resource.AbstractFileResolvingResource: java.io.File getFile()> -> _SOURCES_
<spark.embeddedserver.jetty.websocket.WebSocketHandlerInstanceWrapper: java.lang.Object getHandler()> -> _SOURCES_
<spark.Service: void get(java.lang.String,java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _SOURCES_
<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)> -> _SINKS_
<spark.Spark: void connect(java.lang.String,spark.Route,spark.ResponseTransformer)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.resource.ClassPathResource: java.lang.String getFilename()> -> _SOURCES_
<spark.RouteImpl: java.lang.String getPath()> -> _SOURCES_
<spark.Request: java.util.List getSplat(java.util.List,java.util.List)> -> _SOURCES_
<spark.Routable: void get(java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _SOURCES_
<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)> -> _SINKS_
<spark.Routable: void get(java.lang.String,spark.Route,spark.ResponseTransformer)> -> _SOURCES_
<spark.QueryParamsMap: spark.QueryParamsMap get(java.lang.String[])> -> _SOURCES_
<spark.resource.AbstractResource: java.net.URL getURL()> -> _SOURCES_
<spark.embeddedserver.jetty.SocketConnectorFactory: org.eclipse.jetty.server.ServerConnector createSecureSocketConnector(org.eclipse.jetty.server.Server,java.lang.String,int,spark.ssl.SslStores)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.embeddedserver.jetty.SocketConnectorFactory: void initializeConnector(org.eclipse.jetty.server.ServerConnector,java.lang.String,int)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.Routable: void get(java.lang.String,java.lang.String,spark.Route,spark.ResponseTransformer)> -> _SOURCES_
<spark.resource.AbstractResource: java.net.URI getURI()> -> _SOURCES_
<spark.resource.AbstractResourceHandler: spark.resource.AbstractFileResolvingResource getResource(javax.servlet.http.HttpServletRequest)> -> _SOURCES_
<spark.resource.AbstractFileResolvingResource: java.io.File getFileForLastModifiedCheck()> -> _SOURCES_
<spark.Spark: void get(java.lang.String,java.lang.String,spark.Route)> -> _SOURCES_
<spark.resource.AbstractFileResolvingResource: void customizeConnection(java.net.HttpURLConnection)> -> _CWE306__CWE862__AUTHENTICATIONS_TO_HIGH_
<spark.servlet.FilterTools: java.lang.String getFilterPath(javax.servlet.FilterConfig)> -> _SOURCES_
<spark.Routable: void connect(java.lang.String,java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.Service: void get(java.lang.String,spark.Route)> -> _SOURCES_
<spark.Redirect: void get(java.lang.String,java.lang.String,spark.Redirect$Status)> -> _SOURCES_
<spark.resource.ClassPathResource: java.net.URL getURL()> -> _SOURCES_
<spark.Service: void connect(java.lang.String,spark.Route,spark.ResponseTransformer)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)> -> _SOURCES__CWE601_
<spark.embeddedserver.jetty.HttpRequestWrapper: javax.servlet.ServletInputStream getInputStream()> -> _SOURCES_
<spark.ModelAndView: java.lang.Object getModel()> -> _SOURCES_
<spark.Redirect: void get(java.lang.String,java.lang.String)> -> _SOURCES_
<spark.staticfiles.StaticFilesConfiguration: void setExpireTimeSeconds(long)> -> _SINKS_
<spark.http.matching.MatcherFilter: java.lang.String getHttpMethodFrom(javax.servlet.http.HttpServletRequest)> -> _SOURCES_
<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)> -> _SOURCES_
<spark.Spark: void connect(java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.FilterImpl: java.lang.String getAcceptType()> -> _SOURCES_
<spark.resource.ClassPathResource: java.io.InputStream getInputStream()> -> _SOURCES_
<spark.servlet.SparkFilter: spark.servlet.SparkApplication getApplication(javax.servlet.FilterConfig)> -> _SOURCES_
<spark.Spark: void connect(java.lang.String,java.lang.String,spark.Route,spark.ResponseTransformer)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.Spark: void connect(java.lang.String,java.lang.String,spark.Route)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.CustomErrorPages: java.lang.Object getFor(int,spark.Request,spark.Response)> -> _SOURCES_
<spark.resource.ExternalResource: java.io.InputStream getInputStream()> -> _SOURCES_
<spark.Spark: void get(java.lang.String,java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _SOURCES_
<spark.HaltException: int getStatusCode()> -> _SOURCES_
<spark.routematch.RouteMatch: java.lang.String getAcceptType()> -> _SOURCES_
<spark.resource.ClassPathResource: java.lang.String getPath()> -> _SOURCES_
<spark.Service: void get(java.lang.String,java.lang.String,spark.Route)> -> _SOURCES_
<spark.embeddedserver.jetty.websocket.WebSocketHandlerClassWrapper: java.lang.Object getHandler()> -> _SOURCES_
<spark.Service: void get(java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _SOURCES_
<spark.resource.ExternalResource: java.lang.String getPath()> -> _SOURCES_
<spark.resource.AbstractResource: java.lang.String getFilename()> -> _SOURCES_
<spark.Service: void webSocket(java.lang.String,java.lang.Class)> -> _SINKS_
<spark.Service: void webSocket(java.lang.String,java.lang.Object)> -> _SINKS_
<spark.embeddedserver.jetty.SocketConnectorFactory: org.eclipse.jetty.server.ServerConnector createSocketConnector(org.eclipse.jetty.server.Server,java.lang.String,int)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.ModelAndView: java.lang.String getViewName()> -> _SOURCES_
<spark.QueryParamsMap: java.util.Map getQueryMap()> -> _SOURCES_
<spark.routematch.RouteMatch: java.lang.String getMatchUri()> -> _SOURCES_
<spark.http.matching.RequestWrapper: spark.Request getDelegate()> -> _SOURCES_
<spark.FilterImpl: java.lang.String getPath()> -> _SOURCES_
<spark.servlet.SparkFilter: spark.servlet.SparkApplication[] getApplications(javax.servlet.FilterConfig)> -> _SOURCES_
<spark.resource.AbstractResource: java.io.File getFile()> -> _SOURCES_
<spark.Service: void connect(java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.utils.IOUtils: byte[] toByteArray(java.io.InputStream)> -> _SINKS_
<spark.serialization.BytesSerializer: void process(java.io.OutputStream,java.lang.Object)> -> _SINKS_
<spark.Spark: void get(java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _SOURCES_
<spark.Spark: void setPort(int)> -> _SINKS_
<spark.ExceptionMapper: spark.ExceptionMapper getInstance()> -> _SOURCES_
<spark.Service: java.lang.String getPaths()> -> _SOURCES_
<spark.Routable: void connect(java.lang.String,spark.Route)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.QueryParamsMap: java.lang.String[] parseKey(java.lang.String)> -> _SOURCES_
<spark.Service: void connect(java.lang.String,java.lang.String,spark.Route,spark.ResponseTransformer)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.http.matching.Body: void set(java.lang.Object)> -> _SINKS_
<spark.QueryParamsMap: void loadQueryString(java.util.Map)> -> _SOURCES_
<spark.servlet.SparkFilter: spark.servlet.SparkApplication getApplication(java.lang.String)> -> _SOURCES_
<spark.Routable: void connect(java.lang.String,spark.Route,spark.ResponseTransformer)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.utils.ResourceUtils: java.io.File getFile(java.net.URI,java.lang.String)> -> _SOURCES_
<spark.resource.ExternalResource: java.lang.String getFilename()> -> _SOURCES_
<spark.http.matching.ResponseWrapper: spark.Response getDelegate()> -> _SOURCES__CWE601_
<spark.Service: void get(java.lang.String,spark.Route,spark.ResponseTransformer)> -> _SOURCES_
<spark.routematch.RouteMatch: java.lang.String getRequestURI()> -> _SOURCES_
<spark.utils.StringUtils: java.lang.String getFilename(java.lang.String)> -> _SOURCES_
<spark.Spark: void get(java.lang.String,spark.Route,spark.ResponseTransformer)> -> _SOURCES_
<spark.Spark: void connect(java.lang.String,java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.route.ServletRoutes: spark.route.Routes get()> -> _SOURCES_
<spark.utils.ResourceUtils: java.io.File getFile(java.lang.String)> -> _SOURCES_
<spark.Response: void redirect(java.lang.String)> -> _SINKS__CWE601_
<spark.Service: void connect(java.lang.String,java.lang.String,spark.Route)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)> -> _SANITIZERS__SINKS_
<spark.staticfiles.MimeType: java.lang.String getMimeType(java.lang.String)> -> _SOURCES_
<spark.http.matching.RequestWrapper: spark.http.matching.RequestWrapper create()> -> _SOURCES_
<spark.resource.AbstractFileResolvingResource: void customizeConnection(java.net.URLConnection)> -> _CWE306__CWE862__AUTHENTICATIONS_TO_HIGH_
<spark.utils.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> -> _SINKS_
<spark.Request: java.util.Map getParams(java.util.List,java.util.List)> -> _SOURCES_
<spark.Routable: void get(java.lang.String,java.lang.String,spark.Route)> -> _SOURCES_
<spark.Spark: spark.Service getInstance()> -> _SOURCES_
<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)> -> _SINKS_
<spark.Spark: void get(java.lang.String,java.lang.String,spark.Route,spark.ResponseTransformer)> -> _SOURCES_
<spark.resource.ExternalResource: java.lang.String getDescription()> -> _SOURCES_
<spark.Routable: void get(java.lang.String,spark.Route)> -> _SOURCES_
<spark.route.HttpMethod: spark.route.HttpMethod get(java.lang.String)> -> _SOURCES_
<spark.QueryParamsMap: java.lang.String[] getValues()> -> _SOURCES_
<spark.QueryParamsMap: void loadKeys(java.lang.String,java.lang.String[])> -> _SOURCES_
<spark.Spark: void setIpAddress(java.lang.String)> -> _SINKS_
<spark.CustomErrorPages: java.lang.String getDefaultFor(int)> -> _SOURCES_
<spark.resource.ExternalResource: java.net.URL getURL()> -> _SOURCES_
<spark.utils.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> -> _SINKS_
<spark.Service: void connect(java.lang.String,java.lang.String,spark.TemplateViewRoute,spark.TemplateEngine)> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<spark.ExceptionMapper: spark.ExceptionHandlerImpl getHandler(java.lang.Exception)> -> _SOURCES_
<spark.Service: void get(java.lang.String,java.lang.String,spark.Route,spark.ResponseTransformer)> -> _SOURCES_
<spark.utils.ResourceUtils: java.io.File getFile(java.net.URL)> -> _SOURCES_
<spark.http.matching.Body: java.lang.Object get()> -> _SOURCES_
<spark.embeddedserver.jetty.websocket.WebSocketServletContextHandlerFactory: org.eclipse.jetty.servlet.ServletContextHandler create(java.util.Map,java.util.Optional)> -> _SOURCES_
