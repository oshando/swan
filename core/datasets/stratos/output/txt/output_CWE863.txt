<org.apache.commons.httpclient.HttpConnection: void setConnectionTimeout(int)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration configurationForConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.axis2.transport.xmpp.util.XMPPClientConnectionFactory: org.jivesoftware.smack.XMPPConnection getXmppConnection()> 
<org.apache.http.conn.socket.PlainConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)> 
<org.apache.http.client.protocol.HttpClientContext: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void closeIdleConnections(long)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInUse(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void setConnectionStaleCheckingEnabled(boolean)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool()> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: void releaseConnection()> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getMaxConnectionsPerHost()> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection getConnection()> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxTotalConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void shutdownConnection(org.apache.http.HttpClientConnection)> 
<org.apache.axis2.transport.xmpp.util.XMPPClientConnectionFactory: org.jivesoftware.smack.XMPPConnection connect(org.apache.axis2.transport.xmpp.util.XMPPServerCredentials)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void closeConnection()> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void closeExpiredConnections()> 
<org.apache.axis2.classloader.JarFileUrlConnection: void connect()> 
<org.apache.http.client.protocol.RequestAuthenticationBase: org.apache.http.Header authenticate(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxConnectionsPerHost(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void setMaxTotalConnections(int)> 
<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean isConnectionStaleCheckingEnabled()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void closeExpiredConnections()> 
<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()> 
<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void setConnectionTimeout(long)> 
<org.apache.commons.httpclient.HttpState: void setProxyCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaultMaxConnectionsPerHost(int)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.HttpConnection: void releaseConnection()> 
<org.apache.commons.httpclient.util.IdleConnectionHandler: void closeIdleConnections(long)> 
<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void removeConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getMaxTotalConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInUse()> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: void abortConnection()> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()> 
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: void setConnectionStaleCheckingEnabled(boolean)> 
<org.apache.http.impl.auth.GGSSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.axis2.transport.xmpp.util.XMPPConnectionFactory: org.jivesoftware.smack.XMPPConnection connect(org.apache.axis2.transport.xmpp.util.XMPPServerCredentials)> 
<org.apache.stratos.manager.stub.ApplicationManagementServiceRepositoryCredentialsRequiredExceptionException: void setFaultMessage(org.apache.stratos.manager.service.ApplicationManagementServiceRepositoryCredentialsRequiredException)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: void closeIdleConnections(long)> 
<org.apache.commons.httpclient.util.HttpURLConnection: void disconnect()> 
<org.apache.http.impl.DefaultBHttpServerConnectionFactory: org.apache.http.impl.DefaultBHttpServerConnection createConnection(java.net.Socket)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setMaxConnectionsPerHost(org.apache.commons.httpclient.HostConfiguration,int)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void closeExpiredConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: org.apache.http.config.ConnectionConfig getConnectionConfig()> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)> 
<javax.mail.Session: javax.mail.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void setConnectionConfig(org.apache.http.HttpHost,org.apache.http.config.ConnectionConfig)> 
<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String authenticate(org.apache.commons.httpclient.NTCredentials,java.lang.String,java.lang.String)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.xmlbeans.impl.store.Xobj: void disconnectNonRootUsers()> 
<org.apache.commons.httpclient.HttpState: void setCredentials(java.lang.String,java.lang.String,org.apache.commons.httpclient.Credentials)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ManagedClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)> 
<org.apache.stratos.manager.service.ApplicationManagementServiceRepositoryCredentialsRequiredException: void setRepositoryCredentialsRequiredException(org.apache.stratos.manager.exception.RepositoryCredentialsRequiredException)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: void closeExpiredConnections()> 
<org.apache.axis2.transport.xmpp.util.XMPPConnectionFactory: org.jivesoftware.smack.XMPPConnection getXmppConnection()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.auth.GGSSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.xmlbeans.impl.store.Xobj: void disconnectUser()> 
<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void deleteClosedConnections()> 
<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.xmlbeans.impl.store.Xobj: void disconnectChildrenUsers()> 
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> 
<org.apache.http.impl.execchain.ConnectionHolder: void abortConnection()> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getDefaultMaxConnectionsPerHost()> 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> 
<org.apache.commons.httpclient.params.HttpConnectionParams: void setConnectionTimeout(int)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.HttpHost)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdownCheckedOutConnections(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setDefaultCredentialsProvider(org.apache.http.client.CredentialsProvider)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void storeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.params.HttpConnectionParams: int getConnectionTimeout()> 
<org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setMaxTotalConnections(int)> 
<org.apache.commons.httpclient.HttpState: void setProxyCredentials(java.lang.String,java.lang.String,org.apache.commons.httpclient.Credentials)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.client.SystemDefaultCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.config.ConnectionConfig getDefaultConnectionConfig()> 
<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void addConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.commons.httpclient.HttpMethodDirector: void executeMethod(org.apache.commons.httpclient.HttpMethod)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void shutdownConnection()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void removeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)> 
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void setMaxConnectionsPerHost(int)> 
<org.apache.commons.httpclient.util.HttpURLConnection: void connect()> 
<org.apache.http.client.protocol.ClientContextConfigurer: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection doGetConnection(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.http.impl.DefaultBHttpClientConnectionFactory: org.apache.http.impl.DefaultBHttpClientConnection createConnection(java.net.Socket)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean isConnectionStaleCheckingEnabled()> 
<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.commons.httpclient.HttpState: void setCredentials(org.apache.commons.httpclient.auth.AuthScope,org.apache.commons.httpclient.Credentials)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: org.apache.http.HttpClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.axis2.saaj.SOAPConnectionFactoryImpl: javax.xml.soap.SOAPConnection createConnection()> 
<org.apache.http.impl.execchain.ConnectionHolder: void releaseConnection()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void setConnectionConfig(org.apache.http.config.ConnectionConfig)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
