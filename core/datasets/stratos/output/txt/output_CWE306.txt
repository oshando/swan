<org.apache.commons.httpclient.HttpConnection: void setConnectionTimeout(int)> 
<org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)> 
<org.apache.http.impl.auth.BasicScheme: boolean isConnectionBased()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HostConfiguration configurationForConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()> 
<org.apache.commons.httpclient.params.HttpClientParams: long getConnectionManagerTimeout()> 
<javax.mail.Session: javax.mail.PasswordAuthentication getPasswordAuthentication(javax.mail.URLName)> 
<org.apache.log4j.jdbc.JDBCAppender: java.sql.Connection getConnection()> 
<org.apache.axis2.transport.xmpp.util.XMPPClientConnectionFactory: org.jivesoftware.smack.XMPPConnection getXmppConnection()> 
<org.apache.axis2.transport.http.server.HttpFactory: org.apache.axis2.transport.http.server.HttpConnectionManager newRequestConnectionManager(java.util.concurrent.ExecutorService,org.apache.axis2.transport.http.server.WorkerFactory,org.apache.http.params.HttpParams)> 
<javax.mail.Authenticator: javax.mail.PasswordAuthentication authenticate(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeConnection(org.apache.http.conn.OperatedClientConnection)> 
<org.apache.commons.httpclient.HttpClient: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()> 
<org.apache.axis2.transport.xmpp.util.XMPPOutTransportInfo: org.apache.axis2.transport.xmpp.util.XMPPConnectionFactory getConnectionFactory()> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.params.HttpClientParams: void setAuthenticationPreemptive(boolean)> 
<org.apache.http.conn.socket.PlainConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()> 
<org.apache.axis2.transport.xmpp.util.XMPPOutTransportInfo: void setConnectionFactory(org.apache.axis2.transport.xmpp.util.XMPPConnectionFactory)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getMaxTotalConnections()> 
<javax.mail.Service: boolean isConnected()> 
<org.apache.http.client.config.RequestConfig: int getConnectionRequestTimeout()> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)> 
<javax.mail.Folder: void addConnectionListener(javax.mail.event.ConnectionListener)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)> 
<org.apache.woden.internal.wsdl20.extensions.soap.SOAPEndpointExtensionsImpl: java.lang.String getHttpAuthenticationRealm()> 
<org.apache.commons.httpclient.HttpMethodDirector: void applyConnectionParams(org.apache.commons.httpclient.HttpMethod)> 
<org.apache.http.conn.ssl.SSLConnectionSocketFactory: java.net.Socket connectSocket(int,java.net.Socket,org.apache.http.HttpHost,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void closeIdleConnections(long)> 
<org.apache.http.impl.conn.CPoolEntry: void closeConnection()> 
<org.apache.commons.ssl.SSLServer: void setConnectTimeout(int)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInUse(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.http.protocol.HttpCoreContext: org.apache.http.HttpConnection getConnection()> 
<org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter getFailedConnections()> 
<org.apache.commons.httpclient.auth.DigestScheme: boolean isConnectionBased()> 
<org.apache.commons.ssl.SSL: int getConnectTimeout()> 
<org.apache.commons.httpclient.HttpMethodBase: void setConnectionCloseForced(boolean)> 
<org.apache.http.conn.params.ConnManagerParams: int getMaxTotalConnections(org.apache.http.params.HttpParams)> 
<javax.mail.Authenticator: javax.mail.PasswordAuthentication getPasswordAuthentication()> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.HttpClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void setConnectionStaleCheckingEnabled(boolean)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool()> 
<org.apache.commons.httpclient.auth.HttpAuthenticator: boolean doAuthenticateDefault(org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState,boolean)> 
<org.apache.log4j.net.SocketAppender: int getReconnectionDelay()> 
<org.apache.http.impl.auth.NegotiateScheme: boolean isConnectionBased()> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: void releaseConnection()> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.auth.DigestScheme: boolean isConnectionBased()> 
<org.apache.commons.httpclient.HttpMethodBase: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)> 
<javax.mail.Service: void connect(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getMaxConnectionsPerHost()> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection getConnection()> 
<javax.mail.Service: void connect(java.lang.String,java.lang.String)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxTotalConnections()> 
<org.apache.commons.httpclient.auth.BasicScheme: boolean isConnectionBased()> 
<org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor2: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.commons.ssl.SSL: void doPreConnectSocketStuff(javax.net.ssl.SSLSocket)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void shutdownConnection(org.apache.http.HttpClientConnection)> 
<org.apache.commons.ssl.SSLSocketWrapper: void connect(java.net.SocketAddress,int)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: long getScheduledConnectionCount()> 
<org.apache.axis2.transport.xmpp.util.XMPPClientConnectionFactory: org.jivesoftware.smack.XMPPConnection connect(org.apache.axis2.transport.xmpp.util.XMPPServerCredentials)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig)> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.client.DecompressingHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void closeConnection()> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void closeExpiredConnections()> 
<org.apache.commons.httpclient.HttpMethodBase: void setDoAuthentication(boolean)> 
<org.apache.commons.httpclient.HttpClient: void setHttpConnectionFactoryTimeout(long)> 
<javax.mail.Service: void addConnectionListener(javax.mail.event.ConnectionListener)> 
<org.apache.axis2.classloader.JarFileUrlConnection: void connect()> 
<org.apache.http.impl.execchain.MainClientExec: boolean needAuthentication(org.apache.http.auth.AuthState,org.apache.http.auth.AuthState,org.apache.http.conn.routing.HttpRoute,org.apache.http.HttpResponse,org.apache.http.client.protocol.HttpClientContext)> 
<org.apache.http.client.protocol.RequestAuthenticationBase: org.apache.http.Header authenticate(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: long getFailedConnectionAverageDuration()> 
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> 
<org.apache.stratos.cli.CommandLineService: boolean login(java.lang.String,java.lang.String,java.lang.String,boolean)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getMaxConnectionsPerHost(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void setMaxTotalConnections(int)> 
<org.apache.commons.httpclient.params.HttpClientParams: void setConnectionManagerTimeout(long)> 
<org.apache.stratos.cli.StratosApplication: boolean login(java.lang.String,java.lang.String,boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.commons.httpclient.HttpConnection: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.http.impl.client.AbstractHttpClient: void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.ssl.SSLSocketWrapper: void connect(java.net.SocketAddress)> 
<org.apache.woden.internal.wsdl20.extensions.soap.SOAPEndpointExtensionsImpl: org.apache.woden.wsdl20.extensions.http.HTTPAuthenticationScheme getHttpAuthenticationScheme()> 
<org.apache.axis2.jaxws.util.WSDL4JWrapper: java.net.URLConnection getPrivilegedURLConnection(java.net.URL)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeConnection(org.apache.http.impl.conn.tsccm.BasicPoolEntry)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: long getSuccessfulConnectionAverageDuration()> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.protocol.HttpRequestExecutor: void closeConnection(org.apache.http.HttpClientConnection)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: boolean isConnectionStaleCheckingEnabled()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.conn.params.ConnManagerParams: org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setProxyAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy)> 
<org.apache.axis2.transport.tcp.TCPTransportSender: java.net.Socket openTCPConnection(java.lang.String,int)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void closeExpiredConnections()> 
<org.apache.commons.httpclient.HttpConnection: org.apache.commons.httpclient.HttpConnectionManager getHttpConnectionManager()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.ConnPoolByRoute createConnectionPool(long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void setConnectionTimeout(long)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setDefaultMaxConnectionsPerHost(int)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()> 
<org.apache.commons.httpclient.HttpConnection: void releaseConnection()> 
<org.apache.commons.httpclient.util.IdleConnectionHandler: void closeIdleConnections(long)> 
<org.apache.commons.httpclient.auth.NTLMScheme: boolean isConnectionBased()> 
<org.apache.stratos.manager.stub.ApplicationManagementServiceStub: void starttestRepositoryConnection(java.lang.String,java.lang.String,java.lang.String,boolean,org.apache.stratos.manager.stub.ApplicationManagementServiceCallbackHandler)> 
<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void removeConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.client.AbstractHttpClient: void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getMaxTotalConnections()> 
<org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<javax.mail.Folder: void removeConnectionListener(javax.mail.event.ConnectionListener)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInUse()> 
<org.apache.axis2.jaxws.util.WSDL4JWrapper: java.net.URLConnection openConnection(java.net.URL)> 
<org.apache.http.impl.auth.SPNegoScheme: boolean isConnectionBased()> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: void abortConnection()> 
<org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)> 
<org.apache.http.impl.conn.ManagedClientConnectionImpl: org.apache.http.conn.OperatedClientConnection ensureConnection()> 
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool()> 
<org.apache.http.impl.client.InternalHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> 
<org.apache.axis2.transport.http.AbstractHTTPSender: boolean isAuthenticationEnabled(org.apache.axis2.context.MessageContext)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: void setConnectionStaleCheckingEnabled(boolean)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: long getFailedConnectionCount()> 
<org.apache.commons.ssl.Java13: java.net.Socket connectSocket(java.net.Socket,javax.net.SocketFactory,java.lang.String,int,java.net.InetAddress,int,int)> 
<org.apache.commons.ssl.Java14: java.net.Socket connectSocket(java.net.Socket,javax.net.SocketFactory,java.lang.String,int,java.net.InetAddress,int,int)> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setTargetAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> 
<org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)> 
<org.apache.http.impl.client.SystemDefaultHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()> 
<org.apache.http.impl.auth.GGSSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.httpclient.params.HttpClientParams: boolean isAuthenticationPreemptive()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()> 
<org.apache.log4j.jdbc.JDBCAppender: void closeConnection(java.sql.Connection)> 
<org.apache.commons.ssl.SSLServer: int getConnectTimeout()> 
<org.apache.log4j.net.JMSAppender: javax.jms.TopicConnection getTopicConnection()> 
<org.apache.http.impl.auth.NTLMScheme: boolean isConnectionBased()> 
<org.apache.axis2.transport.xmpp.util.XMPPConnectionFactory: org.jivesoftware.smack.XMPPConnection connect(org.apache.axis2.transport.xmpp.util.XMPPServerCredentials)> 
<org.apache.http.client.methods.AbstractExecutionAwareRequest: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: void closeIdleConnections(long)> 
<org.apache.commons.httpclient.util.HttpURLConnection: void disconnect()> 
<org.apache.http.impl.DefaultBHttpServerConnectionFactory: org.apache.http.impl.DefaultBHttpServerConnection createConnection(java.net.Socket)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setMaxConnectionsPerHost(org.apache.commons.httpclient.HostConfiguration,int)> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeExpiredConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnection(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void closeExpiredConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.client.config.RequestConfig: int getConnectTimeout()> 
<org.apache.axis2.jaxws.util.WSDL4JWrapper: java.net.URLConnection getURLConnection(java.net.URL)> 
<org.apache.http.impl.client.ProxyAuthenticationStrategy: boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.stratos.manager.stub.ApplicationManagementServiceCallbackHandler: void receiveResulttestRepositoryConnection(org.apache.stratos.manager.dto.RepositoryInformation)> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setConnectionManager(org.apache.http.conn.HttpClientConnectionManager)> 
<org.apache.http.impl.client.SystemDefaultHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()> 
<org.apache.stratos.manager.stub.ApplicationManagementServiceCallbackHandler: void receiveErrortestRepositoryConnection(java.lang.Exception)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()> 
<org.apache.commons.ssl.JavaImpl: java.net.Socket connect(java.net.Socket,javax.net.SocketFactory,java.lang.String,int,java.net.InetAddress,int,int)> 
<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getAuthenticationRealm()> 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: org.apache.http.config.ConnectionConfig getConnectionConfig()> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: java.util.concurrent.atomic.AtomicLong getActiveConnections()> 
<org.apache.axis2.transport.xmpp.XMPPListener: void initializeConnectionFactories(org.apache.axis2.description.TransportInDescription)> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)> 
<javax.mail.Session: javax.mail.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> 
<javax.mail.Service: boolean protocolConnect(java.lang.String,int,java.lang.String,java.lang.String)> 
<org.apache.http.client.methods.HttpRequestBase: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)> 
<org.apache.axis2.transport.mail.PollTableEntry: long getReconnectTimeout()> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void setConnectionConfig(org.apache.http.HttpHost,org.apache.http.config.ConnectionConfig)> 
<org.apache.commons.httpclient.auth.NTLMScheme: java.lang.String authenticate(org.apache.commons.httpclient.NTCredentials,java.lang.String,java.lang.String)> 
<javax.mail.Service: void notifyConnectionListeners(int)> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setConnectionReuseStrategy(org.apache.http.ConnectionReuseStrategy)> 
<org.apache.commons.httpclient.HttpMethodBase: void addProxyConnectionHeader(org.apache.commons.httpclient.HttpState,org.apache.commons.httpclient.HttpConnection)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: int getConnectionsInPool(org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.xmlbeans.impl.store.Xobj: void disconnectNonRootUsers()> 
<org.apache.http.params.HttpParamConfig: org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.MinimalHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: org.apache.http.conn.ManagedClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.PoolingClientConnectionManager: void closeExpiredConnections()> 
<org.apache.axis2.transport.xmpp.util.XMPPConnectionFactory: org.jivesoftware.smack.XMPPConnection getXmppConnection()> 
<org.apache.commons.httpclient.auth.HttpAuthenticator: boolean authenticate(org.apache.commons.httpclient.auth.AuthScheme,org.apache.commons.httpclient.HttpMethod,org.apache.commons.httpclient.HttpConnection,org.apache.commons.httpclient.HttpState)> 
<org.apache.commons.httpclient.HttpMethodDirector: boolean processAuthenticationResponse(org.apache.commons.httpclient.HttpMethod)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.ssl.SSL: void setConnectTimeout(int)> 
<org.apache.http.impl.auth.GGSSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeExpiredConnections()> 
<javax.mail.Service: void setConnected(boolean)> 
<org.apache.commons.httpclient.HttpMethodBase: boolean getDoAuthentication()> 
<org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: void releaseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.axis2.transport.xmpp.XMPPSender: void getConnectionDetailsFromClientOptions(org.apache.axis2.context.MessageContext)> 
<org.apache.xmlbeans.impl.store.Xobj: void disconnectUser()> 
<org.apache.commons.httpclient.params.HttpClientParams: void setConnectionManagerClass(java.lang.Class)> 
<org.apache.stratos.manager.stub.ApplicationManagementServiceStub: org.apache.stratos.manager.dto.RepositoryInformation testRepositoryConnection(java.lang.String,java.lang.String,java.lang.String,boolean)> 
<org.apache.commons.httpclient.HttpClient: void setHttpConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void deleteClosedConnections()> 
<javax.mail.Service: void connect()> 
<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.xmlbeans.impl.store.Xobj: void disconnectChildrenUsers()> 
<org.apache.http.conn.params.ConnManagerParamBean: void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean)> 
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> 
<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)> 
<org.apache.http.impl.execchain.ConnectionHolder: void abortConnection()> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: int getDefaultMaxConnectionsPerHost()> 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.HttpMethodBase: boolean isConnectionCloseForced()> 
<org.apache.http.client.params.HttpClientParams: boolean isAuthenticating(org.apache.http.params.HttpParams)> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory)> 
<org.apache.woden.internal.wsdl20.extensions.http.HTTPEndpointExtensionsImpl: java.lang.String getHttpAuthenticationRealm()> 
<com.ctc.wstx.sr.InputElementStack: void connectReporter(com.ctc.wstx.sr.InputProblemReporter)> 
<org.apache.commons.httpclient.params.HttpConnectionParams: void setConnectionTimeout(int)> 
<org.apache.http.impl.client.AuthenticationStrategyAdaptor: boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.config.ConnectionConfig getConnectionConfig(org.apache.http.HttpHost)> 
<org.apache.commons.ssl.SSL: void doPreConnectServerSocketStuff(javax.net.ssl.SSLServerSocket)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void shutdownCheckedOutConnections(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)> 
<org.apache.http.impl.client.AutoRetryHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> 
<javax.mail.Service: void removeConnectionListener(javax.mail.event.ConnectionListener)> 
<org.apache.axis2.transport.http.AbstractHTTPSender: void setAuthenticationInfo(org.apache.commons.httpclient.HttpClient,org.apache.axis2.context.MessageContext,org.apache.commons.httpclient.HostConfiguration)> 
<org.apache.http.conn.scheme.SocketFactoryAdaptor: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void storeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference,org.apache.commons.httpclient.HostConfiguration,org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$ConnectionPool)> 
<org.apache.commons.ssl.SSLClient: void setConnectTimeout(int)> 
<org.apache.commons.httpclient.HttpClient: void setConnectionTimeout(int)> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setDefaultConnectionConfig(org.apache.http.config.ConnectionConfig)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.conn.routing.RouteTracker: boolean isConnected()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: long getActiveConnectionCount()> 
<org.apache.commons.httpclient.params.HttpConnectionParams: int getConnectionTimeout()> 
<org.apache.commons.httpclient.HttpState: void setAuthenticationPreemptive(boolean)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: long getSuccessfulConnectionCount()> 
<org.apache.http.impl.client.AuthenticationStrategyImpl: boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.auth.HttpAuthenticator: boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.HttpClientConnectionOperator: void connect(org.apache.http.conn.ManagedHttpClientConnection,org.apache.http.HttpHost,java.net.InetSocketAddress,int,org.apache.http.config.SocketConfig,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.httpclient.params.HttpConnectionManagerParams: void setMaxTotalConnections(int)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.conn.ConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.log4j.net.JMSAppender: void setTopicConnectionFactoryBindingName(java.lang.String)> 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()> 
<org.apache.http.impl.client.TargetAuthenticationStrategy: boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: void connect(org.apache.http.HttpClientConnection,org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)> 
<org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void setMaxTotalConnections(int)> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void releaseConnection(org.apache.http.HttpClientConnection,java.lang.Object,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.pool.PoolEntry: java.lang.Object getConnection()> 
<javax.mail.Folder: void notifyConnectionListeners(int)> 
<org.apache.commons.httpclient.params.HttpClientParams: java.lang.Class getConnectionManagerClass()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.commons.httpclient.HttpMethodDirector: boolean isAuthenticationNeeded(org.apache.commons.httpclient.HttpMethod)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.PoolingHttpClientConnectionManager: org.apache.http.config.ConnectionConfig getDefaultConnectionConfig()> 
<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<org.apache.commons.httpclient.util.IdleConnectionTimeoutThread: void addConnectionManager(org.apache.commons.httpclient.HttpConnectionManager)> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: org.apache.commons.httpclient.HttpConnection getConnectionWithTimeout(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.log4j.net.JMSAppender: java.lang.String getTopicConnectionFactoryBindingName()> 
<org.apache.axis2.clustering.tribes.WkaBasedMembershipScheme: boolean canConnect(org.apache.axis2.clustering.Member)> 
<org.apache.http.impl.auth.KerberosScheme: boolean isConnectionBased()> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: org.apache.http.impl.client.FutureRequestExecutionMetrics$DurationCounter getSuccessfulConnections()> 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void shutdownConnection()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void removeReferenceToConnection(org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionWithReference)> 
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: void setMaxConnectionsPerHost(int)> 
<org.apache.commons.httpclient.HttpState: boolean isAuthenticationPreemptive()> 
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.AIMDBackoffManager: void setPerHostConnectionCap(int)> 
<org.apache.http.impl.conn.SingleClientConnManager: void closeExpiredConnections()> 
<org.apache.commons.ssl.SSLClient: int getConnectTimeout()> 
<javax.mail.Session: void setPasswordAuthentication(javax.mail.URLName,javax.mail.PasswordAuthentication)> 
<org.apache.commons.httpclient.util.HttpURLConnection: void connect()> 
<org.apache.http.impl.client.FutureRequestExecutionMetrics: java.util.concurrent.atomic.AtomicLong getScheduledConnections()> 
<org.apache.http.conn.params.ConnManagerParamBean: void setMaxTotalConnections(int)> 
<org.apache.stratos.manager.stub.ApplicationManagementServiceStub: org.apache.stratos.manager.dto.RepositoryInformation getTestRepositoryConnectionResponse_return(org.apache.stratos.manager.service.TestRepositoryConnectionResponse)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()> 
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()> 
<org.apache.commons.httpclient.MultiThreadedHttpConnectionManager: org.apache.commons.httpclient.HttpConnection doGetConnection(org.apache.commons.httpclient.HostConfiguration,long)> 
<org.apache.http.impl.DefaultBHttpClientConnectionFactory: org.apache.http.impl.DefaultBHttpClientConnection createConnection(java.net.Socket)> 
<org.apache.axis2.transport.tcp.TCPTransportSender: void closeConnection(java.net.Socket)> 
<org.apache.woden.internal.wsdl20.extensions.http.HTTPEndpointExtensionsImpl: org.apache.woden.wsdl20.extensions.http.HTTPAuthenticationScheme getHttpAuthenticationScheme()> 
<org.apache.commons.httpclient.SimpleHttpConnectionManager: boolean isConnectionStaleCheckingEnabled()> 
<org.apache.stratos.cli.RestCommandLineService: boolean login(java.lang.String,java.lang.String,java.lang.String,boolean)> 
<org.apache.commons.ssl.SSLSocketWrapper: boolean isConnected()> 
<org.apache.commons.httpclient.ConnectMethod: boolean shouldCloseConnection(org.apache.commons.httpclient.HttpConnection)> 
<org.apache.http.impl.conn.SingleClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.axis2.transport.xmpp.XMPPSender: void getConnectionDetailsFromAxisConfiguration(org.apache.axis2.description.TransportOutDescription)> 
<org.apache.commons.httpclient.HttpMethodDirector: org.apache.commons.httpclient.HttpConnectionManager getConnectionManager()> 
<org.apache.commons.httpclient.HttpMethodBase: java.lang.String getProxyAuthenticationRealm()> 
<org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)> 
<org.apache.http.client.config.RequestConfig: boolean isAuthenticationEnabled()> 
<org.apache.http.client.config.RequestConfig: boolean isStaleConnectionCheckEnabled()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: org.apache.http.HttpClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeExpiredConnections()> 
<org.apache.http.protocol.HttpCoreContext: org.apache.http.HttpConnection getConnection(java.lang.Class)> 
<org.apache.http.impl.conn.SingleClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.axis2.saaj.SOAPConnectionFactoryImpl: javax.xml.soap.SOAPConnection createConnection()> 
<org.apache.log4j.net.SocketAppender: void setReconnectionDelay(int)> 
<org.apache.http.impl.execchain.ConnectionHolder: void releaseConnection()> 
<org.apache.http.impl.conn.BasicHttpClientConnectionManager: void setConnectionConfig(org.apache.http.config.ConnectionConfig)> 
<org.apache.axis2.transport.http.server.HttpFactory: org.apache.axis2.transport.http.server.IOProcessor newRequestConnectionListener(int,org.apache.axis2.transport.http.server.HttpConnectionManager,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.CPoolProxy: org.apache.http.HttpClientConnection getConnection()> 
<org.apache.http.impl.client.HttpClientBuilder: org.apache.http.impl.client.HttpClientBuilder setConnectionBackoffStrategy(org.apache.http.client.ConnectionBackoffStrategy)> 
<org.apache.http.impl.conn.BasicClientConnectionManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<javax.mail.Service: void connect(java.lang.String,int,java.lang.String,java.lang.String)> 
