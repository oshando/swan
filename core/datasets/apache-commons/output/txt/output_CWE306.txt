<org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)> 
<org.apache.http.impl.auth.BasicScheme: boolean isConnectionBased()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()> 
<org.apache.xalan.lib.sql.XConnection: void disableDefaultConnectionPool()> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Connection createConnection()> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String)> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeConnection(org.apache.http.conn.OperatedClientConnection)> 
<org.apache.xalan.lib.sql.JNDIConnectionPool: boolean testConnection()> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeExpiredConnections()> 
<org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getMaxTotalConnections()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean testConnection()> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: java.sql.Connection getConnection()> 
<org.apache.xalan.lib.sql.JNDIConnectionPool: void setMinConnections(int)> 
<org.apache.http.conn.params.ConnManagerParamBean: void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean)> 
<org.apache.http.conn.params.ConnManagerParams: int getMaxTotalConnections(org.apache.http.params.HttpParams)> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String)> 
<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)> 
<org.apache.xalan.lib.sql.JNDIConnectionPool: void releaseConnection(java.sql.Connection)> 
<org.apache.xalan.lib.sql.XConnection: void enableDefaultConnectionPool()> 
<org.apache.http.impl.auth.NegotiateScheme: boolean isConnectionBased()> 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.apache.xmlrpc.webserver.WebServer: boolean allowConnection(java.net.Socket)> 
<org.apache.http.client.params.HttpClientParams: boolean isAuthenticating(org.apache.http.params.HttpParams)> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory)> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: void addConnection(org.apache.xalan.lib.sql.PooledConnection)> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)> 
<org.apache.http.impl.auth.DigestScheme: boolean isConnectionBased()> 
<org.apache.xalan.lib.sql.PooledConnection: java.sql.Connection getConnection()> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,org.w3c.dom.Element)> 
<org.apache.http.conn.scheme.SocketFactoryAdaptor: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,org.w3c.dom.NodeList)> 
<org.apache.http.conn.routing.RouteTracker: boolean isConnected()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler()> 
<org.apache.xmlrpc.util.HttpUtil: java.lang.String encodeBasicAuthentication(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.AbstractHttpClient: void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeConnection(org.apache.http.impl.conn.tsccm.BasicPoolEntry)> 
<org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl: int getConnectionTimeout()> 
<org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: boolean hasActiveConnections()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void setMaxTotalConnections(int)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.conn.params.ConnManagerParams: org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.ConnPoolByRoute createConnectionPool(long,java.util.concurrent.TimeUnit)> 
<org.apache.oltu.oauth2.client.URLConnectionClient: org.apache.oltu.oauth2.client.response.OAuthClientResponse execute(org.apache.oltu.oauth2.client.request.OAuthClientRequest,java.util.Map,java.lang.String,java.lang.Class)> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String,org.w3c.dom.Element)> 
<org.apache.xalan.lib.sql.JNDIConnectionPool: boolean hasActiveConnections()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy()> 
<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping: org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping$AuthenticationHandler getAuthenticationHandler()> 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)> 
<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: org.apache.http.conn.OperatedClientConnection getWrappedConnection()> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.client.AbstractHttpClient: void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.apache.oltu.oauth2.client.URLConnectionClient: void shutdown()> 
<org.apache.xmlrpc.webserver.XmlRpcServletServer: org.apache.xmlrpc.webserver.XmlRpcServletServer$ServletStreamConnection newStreamConnection(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)> 
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()> 
<org.apache.xalan.lib.sql.JNDIConnectionPool: void releaseConnectionOnError(java.sql.Connection)> 
<org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping: void setAuthenticationHandler(org.apache.xmlrpc.server.AbstractReflectiveHandlerMapping$AuthenticationHandler)> 
<org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)> 
<org.apache.xmlrpc.common.LocalStreamConnection: org.apache.xmlrpc.common.ServerStreamConnection getServerStreamConnection()> 
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.SingleClientConnManager: void closeExpiredConnections()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: int getConnectionsInPool()> 
<org.apache.http.conn.params.ConnManagerParamBean: void setMaxTotalConnections(int)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy()> 
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: void releaseConnectionOnError(java.sql.Connection)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool()> 
<org.apache.xalan.lib.sql.JNDIConnectionPool: java.sql.Connection getConnection()> 
<org.apache.http.impl.auth.NTLMScheme: boolean isConnectionBased()> 
<org.apache.http.impl.conn.SingleClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xalan.lib.sql.ConnectionPool getConnectionPool()> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeExpiredConnections()> 
<org.apache.xmlrpc.webserver.RequestData: org.apache.xmlrpc.webserver.Connection getConnection()> 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeExpiredConnections()> 
<org.apache.xalan.lib.sql.XConnection: org.apache.xpath.objects.XBooleanStatic connect(org.apache.xalan.extensions.ExpressionContext,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl: void setConnectionTimeout(int)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()> 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.conn.SingleClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: void releaseConnection(java.sql.Connection)> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)> 
<org.apache.http.client.methods.HttpRequestBase: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)> 
<org.apache.xalan.lib.sql.DefaultConnectionPool: void setMinConnections(int)> 
