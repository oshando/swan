***__sources__*** 

<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> 
<org.apache.lucene.search.BooleanQuery: int getMinimumNumberShouldMatch()> 
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.function.ReverseOrdFieldSource: org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.ComplexExplanation: java.lang.Boolean getMatch()> 
<org.apache.lucene.search.function.DocValues: float getAverageValue()> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)> 
<org.apache.lucene.index.SegmentInfos: long getCurrentSegmentGeneration(org.apache.lucene.store.Directory)> 
<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()> 
<org.apache.lucene.search.RangeQuery: org.apache.lucene.index.Term getLowerTerm()> 
<org.apache.lucene.search.RemoteCachingWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.SpanFilterResult: org.apache.lucene.search.DocIdSet getDocIdSet()> 
<org.apache.lucene.index.SegmentInfos: int getDefaultGenFileRetryCount()> 
<org.apache.lucene.index.SegmentInfo: int getDelCount()> 
<org.apache.lucene.util.ArrayUtil: int getNextSize(int)> 
<org.apache.lucene.search.MultiPhraseQuery: int[] getPositions()> 
<org.apache.lucene.store.ChecksumIndexInput: long getChecksum()> 
<org.apache.lucene.store.RAMFile: long getLength()> 
<org.apache.lucene.index.DefaultSkipListReader: int readSkipData(int,org.apache.lucene.store.IndexInput)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int)> 
<org.apache.lucene.index.FieldsReader: org.apache.lucene.document.Field$TermVector getTermVectorType(org.apache.lucene.index.FieldInfo)> 
<org.apache.lucene.document.AbstractField: boolean getOmitNorms()> 
<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory getDirectory()> 
<org.apache.lucene.queryParser.FastCharStream: int getBeginColumn()> 
<org.apache.lucene.index.ConcurrentMergeScheduler: int getMaxThreadCount()> 
<org.apache.lucene.index.LogMergePolicy: int getMaxMergeDocs()> 
<org.apache.lucene.search.MultiPhraseQuery: java.util.List getTermArrays()> 
<org.apache.lucene.index.TermsHash: void getPostings(org.apache.lucene.index.RawPostingList[])> 
<org.apache.lucene.search.TopDocCollector: int getTotalHits()> 
<org.apache.lucene.document.Document: org.apache.lucene.document.Fieldable getFieldable(java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator getDefaultOperator()> 
<org.apache.lucene.index.IndexModifier: int getMergeFactor()> 
<org.apache.lucene.index.IndexReader: long getVersion()> 
<org.apache.lucene.index.MultiSegmentReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.queryParser.QueryParser: boolean getUseOldRangeQuery()> 
<org.apache.lucene.search.CachingSpanFilter: org.apache.lucene.search.SpanFilterResult getCachedResult(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.FilterManager: org.apache.lucene.search.FilterManager getInstance()> 
<org.apache.lucene.index.FieldsReader: org.apache.lucene.document.Field$Index getIndexType(org.apache.lucene.index.FieldInfo,boolean)> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LogMergePolicy getLogMergePolicy()> 
<org.apache.lucene.index.DocumentsWriter: int getFlushedDocCount()> 
<org.apache.lucene.index.DocumentsWriter: double getRAMBufferSizeMB()> 
<org.apache.lucene.index.DocumentsWriter: long getRAMUsed()> 
<org.apache.lucene.index.TermVectorsTermsWriterPerField: int getStreamCount()> 
<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()> 
<org.apache.lucene.search.RangeFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.IndexWriter: int getBufferedDeleteTermsSize()> 
<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] getSubReaders()> 
<org.apache.lucene.analysis.WordlistLoader: java.util.HashSet getWordSet(java.io.File)> 
<org.apache.lucene.index.DocumentsWriter: int getNumBufferedDeleteTerms()> 
<org.apache.lucene.store.LockFactory: java.lang.String getLockPrefix()> 
<org.apache.lucene.index.DirectoryIndexReader: org.apache.lucene.index.IndexCommit getIndexCommit()> 
<org.apache.lucene.search.FieldSortedHitQueue: float getMaxScore()> 
<org.apache.lucene.index.IndexWriter: double getRAMBufferSizeMB()> 
<org.apache.lucene.search.payloads.PayloadSpanUtil: java.util.Collection getPayloadsForQuery(org.apache.lucene.search.Query)> 
<org.apache.lucene.search.Hits: void getMoreDocs(int)> 
<org.apache.lucene.index.DefaultSkipListReader: long getFreqPointer()> 
<org.apache.lucene.index.IndexWriter: int getFlushCount()> 
<org.apache.lucene.store.IndexInput: java.lang.String readModifiedUTF8String()> 
<org.apache.lucene.index.LogMergePolicy: boolean getUseCompoundFile()> 
<org.apache.lucene.queryParser.QueryParser: java.lang.String getField()> 
<org.apache.lucene.index.DocumentsWriter: int getDocStoreOffset()> 
<org.apache.lucene.index.IndexReader: long getCurrentVersion(org.apache.lucene.store.Directory)> 
<org.apache.lucene.search.QueryTermVector: java.lang.String getField()> 
<org.apache.lucene.store.Directory: org.apache.lucene.store.LockFactory getLockFactory()> 
<org.apache.lucene.search.Hit: int getId()> 
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.TermInfo get(org.apache.lucene.index.Term)> 
<org.apache.lucene.search.spans.SpanTermQuery: java.lang.String getField()> 
<org.apache.lucene.index.SegmentTermPositions: byte[] getPayload(byte[],int)> 
<org.apache.lucene.index.DocFieldConsumers: org.apache.lucene.index.DocFieldConsumers$PerDoc getPerDoc()> 
<org.apache.lucene.index.CompoundFileWriter: java.lang.String getName()> 
<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()> 
<org.apache.lucene.index.IndexCommit: long getVersion()> 
<org.apache.lucene.index.IndexWriter: int getTermIndexInterval()> 
<org.apache.lucene.index.DirectoryIndexReader: long getVersion()> 
<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()> 
<org.apache.lucene.index.ByteSliceWriter: int getAddress()> 
<org.apache.lucene.analysis.CharArraySet: int getHashCode(java.lang.CharSequence)> 
<org.apache.lucene.search.function.IntFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.queryParser.QueryParser: int getPhraseSlop()> 
<org.apache.lucene.index.IndexWriter: long getDefaultWriteLockTimeout()> 
<org.apache.lucene.search.FieldSortedHitQueue: org.apache.lucene.search.SortField[] getFields()> 
<org.apache.lucene.search.FieldCacheImpl: int[] getInts(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$IntParser)> 
<org.apache.lucene.index.MultiReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.document.Document: java.lang.String[] getValues(java.lang.String)> 
<org.apache.lucene.search.Scorer: org.apache.lucene.search.Similarity getSimilarity()> 
<org.apache.lucene.store.FSDirectory: boolean getDisableLocks()> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: int getMaxTokenLength()> 
<org.apache.lucene.search.ConstantScoreRangeQuery: java.lang.String getUpperVal()> 
<org.apache.lucene.index.StoredFieldsWriter: org.apache.lucene.index.StoredFieldsWriter$PerDoc getPerDoc()> 
<org.apache.lucene.index.TermInfosReader: int getIndexOffset(org.apache.lucene.index.Term)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.Vector)> 
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.SegmentReader: java.lang.String getSegmentName()> 
<org.apache.lucene.index.MultiReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.index.TermVectorOffsetInfo: int getStartOffset()> 
<org.apache.lucene.queryParser.QueryParser: int getFuzzyPrefixLength()> 
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.lang.String)> 
<org.apache.lucene.util.BitVector: boolean getAndSet(int)> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler getMergeScheduler()> 
<org.apache.lucene.search.PhraseQuery: int getSlop()> 
<org.apache.lucene.util.cache.Cache: org.apache.lucene.util.cache.Cache getSynchronizedCache()> 
<org.apache.lucene.index.LogDocMergePolicy: int getMinMergeDocs()> 
<org.apache.lucene.index.IndexModifier: java.io.PrintStream getInfoStream()> 
<org.apache.lucene.document.AbstractField: float getBoost()> 
<org.apache.lucene.store.Directory: java.lang.String getLockID()> 
<org.apache.lucene.search.SortField: int getType()> 
<org.apache.lucene.search.SpanFilterResult: java.util.List getPositions()> 
<org.apache.lucene.document.Document: org.apache.lucene.document.Field getField(java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.analysis.Analyzer getAnalyzer()> 
<org.apache.lucene.index.SegmentInfos: long getCurrentSegmentGeneration(java.lang.String[])> 
<org.apache.lucene.index.Payload: byte[] getData()> 
<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.BooleanClause$Occur getOccur()> 
<org.apache.lucene.index.SegmentReader: void loadDeletedDocs()> 
<org.apache.lucene.index.TermVectorEntry: java.lang.String getField()> 
<org.apache.lucene.search.ComplexExplanation: java.lang.String getSummary()> 
<org.apache.lucene.search.spans.SpanNotQuery: java.lang.String getField()> 
<org.apache.lucene.index.DocumentsWriter: int[] getIntBlock(boolean)> 
<org.apache.lucene.analysis.Token: org.apache.lucene.index.Payload getPayload()> 
<org.apache.lucene.analysis.SinkTokenizer: java.util.List getTokens()> 
<org.apache.lucene.search.spans.SpanWeight: float getValue()> 
<org.apache.lucene.queryParser.FastCharStream: int getBeginLine()> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.search.Similarity getSimilarity()> 
<org.apache.lucene.search.FieldCacheImpl: java.lang.Comparable[] getCustom(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.SortComparator)> 
<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.document.AbstractField: byte[] getBinaryValue()> 
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.Term get(int)> 
<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map getFieldToTerms()> 
<org.apache.lucene.util.OpenBitSet: boolean get(long)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo)> 
<org.apache.lucene.search.RangeQuery: java.lang.String getField()> 
<org.apache.lucene.analysis.StopFilter: boolean getEnablePositionIncrementsDefault()> 
<org.apache.lucene.index.IndexFileDeleter: org.apache.lucene.index.IndexFileDeleter$RefCount getRefCount(java.lang.String)> 
<org.apache.lucene.index.TermInfosReader: int getMaxSkipLevels()> 
<org.apache.lucene.index.SegmentMergeInfo: int[] getDocMap()> 
<org.apache.lucene.search.PrefixFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.store.NoLockFactory: org.apache.lucene.store.NoLockFactory getNoLockFactory()> 
<org.apache.lucene.search.spans.SpanNotQuery: java.util.Collection getTerms()> 
<org.apache.lucene.index.MultiReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> 
<org.apache.lucene.store.ChecksumIndexOutput: long getChecksum()> 
<org.apache.lucene.search.ExtendedFieldCacheImpl: double[] getDoubles(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File)> 
<org.apache.lucene.search.FieldCacheImpl: java.lang.Object getAuto(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,boolean)> 
<org.apache.lucene.search.FieldCacheImpl: short[] getShorts(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.document.Document: org.apache.lucene.document.Field[] getFields(java.lang.String)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo)> 
<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.BooleanQuery: boolean getAllowDocsOutOfOrder()> 
<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.IndexReader[] getSubReaders()> 
<org.apache.lucene.index.IndexWriter: int getMergeFactor()> 
<org.apache.lucene.index.FreqProxTermsWriterPerField: int getStreamCount()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,int,boolean)> 
<org.apache.lucene.analysis.PorterStemmer: char[] getResultBuffer()> 
<org.apache.lucene.store.RAMFile: long getSizeInBytes()> 
<org.apache.lucene.index.SegmentInfos: long getGeneration()> 
<org.apache.lucene.index.IndexWriter: int getMaxBufferedDeleteTerms()> 
<org.apache.lucene.index.FilterIndexReader: long getVersion()> 
<org.apache.lucene.search.spans.SpanOrQuery: java.util.Collection getTerms()> 
<org.apache.lucene.search.FuzzyTermEnum: int getMaxDistance(int)> 
<org.apache.lucene.analysis.WordlistLoader: java.util.HashMap getStemDict(java.io.File)> 
<org.apache.lucene.index.SegmentInfo: java.lang.String getDocStoreSegment()> 
<org.apache.lucene.analysis.PorterStemmer: int getResultLength()> 
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Query getQuery()> 
<org.apache.lucene.index.SegmentInfos: java.lang.String getCurrentSegmentFileName()> 
<org.apache.lucene.index.IndexCommit: long getTimestamp()> 
<org.apache.lucene.index.MultiSegmentReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.search.function.FloatFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: int getMaxTokenLength()> 
<org.apache.lucene.index.IndexModifier: boolean getUseCompoundFile()> 
<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)> 
<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexCommit getIndexCommit()> 
<org.apache.lucene.util.OpenBitSet: boolean getAndSet(int)> 
<org.apache.lucene.index.SegmentReader: int getTermInfosIndexDivisor()> 
<org.apache.lucene.index.IndexWriter: int getDocCount(int)> 
<org.apache.lucene.index.DocumentsWriter: int getMaxBufferedDeleteTerms()> 
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.TermFreqVector get(int,java.lang.String)> 
<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$StringIndex getStringIndex(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.store.Directory getDirectory()> 
<org.apache.lucene.search.Hit: java.lang.String get(java.lang.String)> 
<org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int)> 
<org.apache.lucene.search.function.DocValues: float getMinValue()> 
<org.apache.lucene.search.function.FieldCacheSource: org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.Explanation: float getValue()> 
<org.apache.lucene.search.function.ByteFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.Payload: int getOffset()> 
<org.apache.lucene.index.SegmentTermVector: int[] getTermFrequencies()> 
<org.apache.lucene.index.SegmentInfos: java.lang.String getCurrentSegmentFileName(org.apache.lucene.store.Directory)> 
<org.apache.lucene.document.AbstractField: boolean getOmitTf()> 
<org.apache.lucene.search.spans.SpanFirstQuery: java.lang.String getField()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfo,boolean)> 
<org.apache.lucene.index.IndexWriter: int getMaxMergeDocs()> 
<org.apache.lucene.index.SegmentInfo: int getDocStoreOffset()> 
<org.apache.lucene.search.FieldDocSortedHitQueue: org.apache.lucene.search.SortField[] getFields()> 
<org.apache.lucene.index.DocumentsWriter: java.lang.String getDocStoreSegment()> 
<org.apache.lucene.search.function.ShortFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.Query: org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)> 
<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterThreadState getThreadState(org.apache.lucene.document.Document,org.apache.lucene.index.Term)> 
<org.apache.lucene.search.QueryWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.Sort: org.apache.lucene.search.SortField[] getSort()> 
<org.apache.lucene.search.PrefixFilter: org.apache.lucene.index.Term getPrefix()> 
<org.apache.lucene.search.function.OrdFieldSource: org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.TermVectorEntry: java.lang.String getTerm()> 
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput getTvfStream()> 
<org.apache.lucene.queryParser.QueryParser: java.util.Locale getLocale()> 
<org.apache.lucene.search.Similarity: float[] getNormDecoder()> 
<org.apache.lucene.index.TermVectorsReader: java.lang.String[] readFields(int)> 
<org.apache.lucene.search.CachingSpanFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.store.ChecksumIndexInput: long getFilePointer()> 
<org.apache.lucene.util.Parameter: java.lang.Object readResolve()> 
<org.apache.lucene.index.CompoundFileReader: java.lang.String getName()> 
<org.apache.lucene.index.MultiSegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption,org.apache.lucene.index.IndexReader[])> 
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput getTvdStream()> 
<org.apache.lucene.store.RAMFile: byte[] getBuffer(int)> 
<org.apache.lucene.search.QueryTermVector: java.lang.String[] getTerms()> 
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.TermFreqVector[] get(int)> 
<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()> 
<org.apache.lucene.index.IndexWriter: int getNumBufferedDocuments()> 
<org.apache.lucene.search.spans.SpanNearQuery: int getSlop()> 
<org.apache.lucene.util.OpenBitSet: boolean get(int)> 
<org.apache.lucene.index.TermVectorsReader: void get(int,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.search.PhraseQuery: org.apache.lucene.index.Term[] getTerms()> 
<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()> 
<org.apache.lucene.util.OpenBitSet: int getBit(int)> 
<org.apache.lucene.index.MultiReader: org.apache.lucene.index.IndexReader[] getSubReaders()> 
<org.apache.lucene.search.MultiSearcherThread: float getMaxScore()> 
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery getExclude()> 
<org.apache.lucene.index.IndexModifier: int getMaxFieldLength()> 
<org.apache.lucene.index.IndexWriter: long getWriteLockTimeout()> 
<org.apache.lucene.search.WildcardQuery: org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,int)> 
<org.apache.lucene.search.FieldCacheImpl: short[] getShorts(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$ShortParser)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String)> 
<org.apache.lucene.index.ParallelReader: long getVersion()> 
<org.apache.lucene.search.SpanQueryFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.spans.SpanTermQuery: java.util.Collection getTerms()> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer getAnalyzer()> 
<org.apache.lucene.index.TermVectorsReader: void get(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.search.spans.TermSpans: java.util.Collection getPayload()> 
<org.apache.lucene.queryParser.ParseException: java.lang.String getMessage()> 
<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> 
<org.apache.lucene.analysis.StopFilter: boolean getEnablePositionIncrements()> 
<org.apache.lucene.analysis.Analyzer: int getPositionIncrementGap(java.lang.String)> 
<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.store.BufferedIndexInput: long getFilePointer()> 
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Filter getFilter()> 
<org.apache.lucene.search.Similarity: org.apache.lucene.search.Similarity getDefault()> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)> 
<org.apache.lucene.index.SegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)> 
<org.apache.lucene.queryParser.Token: java.lang.Object getValue()> 
<org.apache.lucene.index.ByteSliceReader: long getFilePointer()> 
<org.apache.lucene.search.spans.SpanNearQuery: java.util.Collection getTerms()> 
<org.apache.lucene.queryParser.FastCharStream: int getEndLine()> 
<org.apache.lucene.search.FieldSortedHitQueue: org.apache.lucene.search.ScoreDocComparator getCachedComparator(org.apache.lucene.index.IndexReader,java.lang.String,int,java.util.Locale,org.apache.lucene.search.SortComparatorSource)> 
<org.apache.lucene.index.MultipleTermPositions: int getPayloadLength()> 
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.spans.SpanQuery getMatch()> 
<org.apache.lucene.util.BitVector: boolean get(int)> 
<org.apache.lucene.index.IndexFileNameFilter: org.apache.lucene.index.IndexFileNameFilter getFilter()> 
<org.apache.lucene.index.DocumentsWriter: int getNumDocsInRAM()> 
<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.SegmentTermPositionVector: org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int)> 
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File,org.apache.lucene.store.LockFactory)> 
<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term getTerm()> 
<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.index.Term getTerm()> 
<org.apache.lucene.index.SortedTermVectorMapper: java.util.SortedSet getTermVectorEntrySet()> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()> 
<org.apache.lucene.index.IndexWriter: boolean getUseCompoundFile()> 
<org.apache.lucene.search.MultiSearcher: int[] getStarts()> 
<org.apache.lucene.index.FilterIndexReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> 
<org.apache.lucene.analysis.standard.StandardTokenizerImpl: void getText(org.apache.lucene.analysis.Token)> 
<org.apache.lucene.index.IndexWriter: double getMaxSyncPauseSeconds()> 
<org.apache.lucene.document.AbstractField: byte[] getBinaryValue(byte[])> 
<org.apache.lucene.search.BooleanQuery: boolean getUseScorer14()> 
<org.apache.lucene.util.SortedVIntList: int getByteSize()> 
<org.apache.lucene.search.ConstantScoreRangeQuery: java.lang.String getLowerVal()> 
<org.apache.lucene.index.SegmentInfo: java.lang.String getNormFileName(int)> 
<org.apache.lucene.document.AbstractField: int getBinaryOffset()> 
<org.apache.lucene.search.SortField: boolean getReverse()> 
<org.apache.lucene.document.Document: java.util.List getFields()> 
<org.apache.lucene.document.Document: byte[] getBinaryValue(java.lang.String)> 
<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String getField()> 
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.TermInfosReader$ThreadResources getThreadResources()> 
<org.apache.lucene.search.ConstantScoreQuery: org.apache.lucene.search.Filter getFilter()> 
<org.apache.lucene.store.FSDirectory: java.io.File getFile()> 
<org.apache.lucene.index.ParallelReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.lang.String,boolean)> 
<org.apache.lucene.LucenePackage: java.lang.Package get()> 
<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> 
<org.apache.lucene.search.Explanation: java.lang.String getDescription()> 
<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()> 
<org.apache.lucene.index.SegmentTermVector: java.lang.String getField()> 
<org.apache.lucene.search.ConstantScoreRangeQuery: java.lang.String getField()> 
<org.apache.lucene.index.TermInfosReader: int getSkipInterval()> 
<org.apache.lucene.index.SegmentReader: byte[] getNorms(java.lang.String)> 
<org.apache.lucene.index.ParallelReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.index.MultiLevelSkipListReader: boolean loadNextSkip(int)> 
<org.apache.lucene.search.RangeQuery: java.text.Collator getCollator()> 
<org.apache.lucene.queryParser.QueryParser: float getFuzzyMinSim()> 
<org.apache.lucene.index.DocumentsWriter: java.lang.String getSegment()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> 
<org.apache.lucene.search.SortField: java.lang.String getField()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.FieldsReader getFieldsReader()> 
<org.apache.lucene.search.FuzzyQuery: int getPrefixLength()> 
<org.apache.lucene.queryParser.FastCharStream: int getEndColumn()> 
<org.apache.lucene.analysis.WordlistLoader: java.util.HashSet getWordSet(java.io.Reader)> 
<org.apache.lucene.search.FilterManager: org.apache.lucene.search.Filter getFilter(org.apache.lucene.search.Filter)> 
<org.apache.lucene.index.MultiReader: long getVersion()> 
<org.apache.lucene.index.DefaultSkipListReader: int getPayloadLength()> 
<org.apache.lucene.analysis.Analyzer: java.lang.Object getPreviousTokenStream()> 
<org.apache.lucene.search.TimeLimitedCollector: long getResolution()> 
<org.apache.lucene.document.Document: byte[][] getBinaryValues(java.lang.String)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfo getSegmentInfo()> 
<org.apache.lucene.search.SpanQueryFilter: org.apache.lucene.search.spans.SpanQuery getQuery()> 
<org.apache.lucene.search.MultiPhraseQuery: int getSlop()> 
<org.apache.lucene.index.TermVectorEntry: int getFrequency()> 
<org.apache.lucene.analysis.CharArraySet: int getSlot(java.lang.CharSequence)> 
<org.apache.lucene.search.Explanation: java.lang.String getSummary()> 
<org.apache.lucene.index.TermVectorsTermsWriter: org.apache.lucene.index.TermVectorsTermsWriter$PerDoc getPerDoc()> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)> 
<org.apache.lucene.search.spans.TermSpans: org.apache.lucene.index.TermPositions getPositions()> 
<org.apache.lucene.search.FieldCacheImpl: int[] getInts(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.util.OpenBitSet: int getNumWords()> 
<org.apache.lucene.index.SegmentInfo: java.lang.String getDelFileName()> 
<org.apache.lucene.search.ExtendedFieldCacheImpl: java.lang.Object getAuto(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token getNextToken()> 
<org.apache.lucene.index.TermInfosReader: long getPosition(org.apache.lucene.index.Term)> 
<org.apache.lucene.util.DocIdBitSet: java.util.BitSet getBitSet()> 
<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.Query getQuery()> 
<org.apache.lucene.index.CompoundFileReader: org.apache.lucene.store.Directory getDirectory()> 
<org.apache.lucene.store.BufferedIndexInput: int getBufferSize()> 
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.DocumentsWriter: java.util.HashMap getBufferedDeleteTerms()> 
<org.apache.lucene.index.IndexModifier: int getMaxBufferedDocs()> 
<org.apache.lucene.store.RAMOutputStream: long getFilePointer()> 
<org.apache.lucene.queryParser.QueryParser: java.text.Collator getRangeCollator()> 
<org.apache.lucene.queryParser.FastCharStream: int getLine()> 
<org.apache.lucene.index.TermInfosReader: int getIndexDivisor()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.FieldInfos getFieldInfos()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfos,boolean,boolean,int,boolean)> 
<org.apache.lucene.search.Explanation: org.apache.lucene.search.Explanation[] getDetails()> 
<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread getMergeThread(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.MergePolicy$OneMerge)> 
<org.apache.lucene.index.SegmentInfos: java.lang.String getCurrentSegmentFileName(java.lang.String[])> 
<org.apache.lucene.index.ParallelReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> 
<org.apache.lucene.search.FuzzyQuery: org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.SegmentMerger: int[] getDelCounts()> 
<org.apache.lucene.index.IndexWriter: int getFlushDeletesCount()> 
<org.apache.lucene.search.FieldCacheImpl: java.lang.String[] getStrings(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.lang.String,org.apache.lucene.store.LockFactory)> 
<org.apache.lucene.queryParser.TokenMgrError: java.lang.String getMessage()> 
<org.apache.lucene.search.ExtendedFieldCacheImpl: long[] getLongs(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.ExtendedFieldCache$LongParser)> 
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)> 
<org.apache.lucene.index.MultiSegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> 
<org.apache.lucene.index.SegmentInfos: int getDefaultGenFileRetryPauseMsec()> 
<org.apache.lucene.index.IndexReader: int getRefCount()> 
<org.apache.lucene.util.cache.SimpleMapCache: java.lang.Object get(java.lang.Object)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermVectorsReader getTermVectorsReader()> 
<org.apache.lucene.index.LogByteSizeMergePolicy: double getMaxMergeMB()> 
<org.apache.lucene.search.spans.SpanFirstQuery: int getEnd()> 
<org.apache.lucene.index.MultiLevelSkipListReader: void loadSkipLevels()> 
<org.apache.lucene.search.FieldCacheImpl: float[] getFloats(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.index.SegmentTermVector: java.lang.String[] getTerms()> 
<org.apache.lucene.search.spans.SpanFirstQuery: java.util.Collection getTerms()> 
<org.apache.lucene.index.MultiLevelSkipListReader: int getDoc()> 
<org.apache.lucene.store.RAMFile: long getLastModified()> 
<org.apache.lucene.index.FieldSortedTermVectorMapper: java.util.Comparator getComparator()> 
<org.apache.lucene.search.BooleanQuery: int getMaxClauseCount()> 
<org.apache.lucene.index.TermVectorEntry: org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets()> 
<org.apache.lucene.store.BufferedIndexOutput: long getFilePointer()> 
<org.apache.lucene.index.SegmentMerger: int[][] getDocMaps()> 
<org.apache.lucene.queryParser.QueryParser: boolean getEnablePositionIncrements()> 
<org.apache.lucene.document.Document: org.apache.lucene.document.Fieldable[] getFieldables(java.lang.String)> 
<org.apache.lucene.index.IndexCommit: long getGeneration()> 
<org.apache.lucene.store.FSDirectory: java.lang.String getLockID()> 
<org.apache.lucene.index.MultiReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> 
<org.apache.lucene.search.Hit: float getScore()> 
<org.apache.lucene.util.OpenBitSet: boolean getAndSet(long)> 
<org.apache.lucene.document.Document: float getBoost()> 
<org.apache.lucene.util.OpenBitSet: long[] getBits()> 
<org.apache.lucene.search.Hit: float getBoost()> 
<org.apache.lucene.analysis.Token: int getFlags()> 
<org.apache.lucene.search.ExtendedFieldCacheImpl: long[] getLongs(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token getToken(int)> 
<org.apache.lucene.index.IndexReader: long getCurrentVersion(java.io.File)> 
<org.apache.lucene.index.SegmentTermPositionVector: int[] getTermPositions(int)> 
<org.apache.lucene.index.FieldSortedTermVectorMapper: java.util.Map getFieldToTerms()> 
<org.apache.lucene.index.SegmentInfos: java.lang.String getNextSegmentFileName()> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy getMergePolicy()> 
<org.apache.lucene.index.SegmentInfo: boolean getDocStoreIsCompoundFile()> 
<org.apache.lucene.store.RAMInputStream: long getFilePointer()> 
<org.apache.lucene.search.MultiSearcher: org.apache.lucene.search.Searchable[] getSearchables()> 
<org.apache.lucene.search.RangeQuery: org.apache.lucene.index.Term getUpperTerm()> 
<org.apache.lucene.search.PrefixQuery: org.apache.lucene.index.Term getPrefix()> 
<org.apache.lucene.queryParser.QueryParser: boolean getAllowLeadingWildcard()> 
<org.apache.lucene.search.SortField: org.apache.lucene.search.SortComparatorSource getFactory()> 
<org.apache.lucene.index.SegmentInfos: java.io.PrintStream getInfoStream()> 
<org.apache.lucene.index.SegmentInfos: int getDefaultGenLookahedCount()> 
<org.apache.lucene.index.LogMergePolicy: boolean getUseCompoundDocStore()> 
<org.apache.lucene.search.FieldCacheImpl: byte[] getBytes(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$ByteParser)> 
<org.apache.lucene.index.SegmentInfos: long getLastGeneration()> 
<org.apache.lucene.search.payloads.PayloadSpanUtil: void getPayloads(java.util.Collection,org.apache.lucene.search.spans.SpanQuery)> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfos,boolean,boolean,int)> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)> 
<org.apache.lucene.search.FieldCacheImpl: float[] getFloats(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$FloatParser)> 
<org.apache.lucene.index.MultipleTermPositions: byte[] getPayload(byte[],int)> 
<org.apache.lucene.index.MultiReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> 
<org.apache.lucene.index.IndexWriter: int getSegmentCount()> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)> 
<org.apache.lucene.index.IndexWriter: java.io.PrintStream getInfoStream()> 
<org.apache.lucene.search.PhraseQuery: org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)> 
<org.apache.lucene.search.Query: float getBoost()> 
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.TermInfo get(org.apache.lucene.index.Term,boolean)> 
<org.apache.lucene.index.SegmentInfo: boolean getHasProx()> 
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File,boolean)> 
<org.apache.lucene.util.cache.SimpleMapCache: org.apache.lucene.util.cache.Cache getSynchronizedCache()> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: boolean getDefaultReplaceInvalidAcronym()> 
<org.apache.lucene.queryParser.QueryParser: boolean getLowercaseExpandedTerms()> 
<org.apache.lucene.index.DocumentsWriter: int getMaxBufferedDocs()> 
<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> 
<org.apache.lucene.search.TopDocs: float getMaxScore()> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)> 
<org.apache.lucene.index.IndexReader: long getCurrentVersion(java.lang.String)> 
<org.apache.lucene.index.FilterIndexReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> 
<org.apache.lucene.index.IndexWriter: int getMaxBufferedDocs()> 
<org.apache.lucene.index.SegmentReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.index.IndexWriter: int getMaxFieldLength()> 
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery getInclude()> 
<org.apache.lucene.index.IndexWriter: int getNumBufferedDeleteTerms()> 
<org.apache.lucene.store.LockVerifyServer: java.lang.String getTime(long)> 
<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: int getPositionIncrementGap(java.lang.String)> 
<org.apache.lucene.document.AbstractField: int getBinaryLength()> 
<org.apache.lucene.search.CachingWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.FilterIndexReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.search.function.DocValues: java.lang.Object getInnerArray()> 
<org.apache.lucene.search.SpanFilterResult: java.util.BitSet getBits()> 
<org.apache.lucene.index.IndexWriter: java.io.PrintStream getDefaultInfoStream()> 
<org.apache.lucene.search.spans.NearSpansUnordered: java.util.Collection getPayload()> 
<org.apache.lucene.index.FilterIndexReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> 
<org.apache.lucene.search.spans.SpanWeight: org.apache.lucene.search.Query getQuery()> 
<org.apache.lucene.search.MultiSearcherThread: java.io.IOException getIOException()> 
<org.apache.lucene.index.SegmentReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.index.TermVectorsReader: long[] readTvfPointers(int)> 
<org.apache.lucene.index.SegmentMergeInfo: org.apache.lucene.index.TermPositions getPositions()> 
<org.apache.lucene.index.IndexReader: int getTermInfosIndexDivisor()> 
<org.apache.lucene.index.TermVectorEntry: int[] getPositions()> 
<org.apache.lucene.search.ExtendedFieldCacheImpl: double[] getDoubles(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.ExtendedFieldCache$DoubleParser)> 
<org.apache.lucene.search.QueryTermVector: int[] getTermFrequencies()> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String)> 
<org.apache.lucene.index.SegmentInfos: long getVersion()> 
<org.apache.lucene.search.spans.SpanOrQuery: java.lang.String getField()> 
<org.apache.lucene.index.SegmentTermPositions: int getPayloadLength()> 
<org.apache.lucene.search.SortField: java.util.Locale getLocale()> 
<org.apache.lucene.analysis.CharArraySet: int getSlot(char[],int,int)> 
<org.apache.lucene.analysis.Token: int getPositionIncrement()> 
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextExternalMerge()> 
<org.apache.lucene.index.ConcurrentMergeScheduler: int getMergeThreadPriority()> 
<org.apache.lucene.search.Searcher: org.apache.lucene.search.Similarity getSimilarity()> 
<org.apache.lucene.index.DocumentsWriter: char[] getCharBlock()> 
<org.apache.lucene.index.LogByteSizeMergePolicy: double getMinMergeMB()> 
<org.apache.lucene.search.function.DocValues: float getMaxValue()> 
<org.apache.lucene.index.LogMergePolicy: int getMergeFactor()> 
<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> 
<org.apache.lucene.queryParser.FastCharStream: int getColumn()> 
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo,int,boolean)> 
<org.apache.lucene.search.spans.NearSpansOrdered: java.util.Collection getPayload()> 
<org.apache.lucene.index.SegmentTermDocs: int readNoTf(int[],int[],int)> 
<org.apache.lucene.store.ChecksumIndexOutput: long getFilePointer()> 
<org.apache.lucene.search.function.FieldScoreQuery: org.apache.lucene.search.function.ValueSource getValueSource(java.lang.String,org.apache.lucene.search.function.FieldScoreQuery$Type)> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int)> 
<org.apache.lucene.search.FuzzyQuery: float getMinSimilarity()> 
<org.apache.lucene.search.Filter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.Hit: org.apache.lucene.document.Document getDocument()> 
<org.apache.lucene.analysis.CharArraySet: int getHashCode(char[],int,int)> 
<org.apache.lucene.index.FilterIndexReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.Vector,boolean)> 
<org.apache.lucene.index.DefaultSkipListReader: long getProxPointer()> 
<org.apache.lucene.index.IndexModifier: void createIndexReader()> 
<org.apache.lucene.search.FieldCacheImpl: byte[] getBytes(org.apache.lucene.index.IndexReader,java.lang.String)> 
<org.apache.lucene.search.PhraseQuery: int[] getPositions()> 
<org.apache.lucene.index.MultiSegmentReader: int getTermInfosIndexDivisor()> 
<org.apache.lucene.analysis.standard.StandardTokenizerImpl: int getNextToken()> 
<org.apache.lucene.index.TermVectorOffsetInfo: int getEndOffset()> 
<org.apache.lucene.util.CloseableThreadLocal: java.lang.Object get()> 


***__sinks__*** 

<org.apache.lucene.index.IndexWriter: void setMaxBufferedDocs(int)> 
<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.TermBuffer)> 
<org.apache.lucene.index.SegmentInfo: void setHasProx(boolean)> 
<org.apache.lucene.index.DocumentsWriter: void updateFlushedDocCount(int)> 
<org.apache.lucene.search.Searcher: void setSimilarity(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMergeThreadPriority(int)> 
<org.apache.lucene.index.IndexWriter: void setMaxSyncPauseSeconds(double)> 
<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int)> 
<org.apache.lucene.index.DocumentsWriter: void setMaxBufferedDocs(int)> 
<org.apache.lucene.index.SegmentInfos: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.index.TermsHashPerField: void writeBytes(int,byte[],int,int)> 
<org.apache.lucene.index.DocFieldConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.index.Payload: void setData(byte[])> 
<org.apache.lucene.index.DocumentsWriter: void setSimilarity(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.util.BitVector: void write(org.apache.lucene.store.Directory,java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: void setUseOldRangeQuery(boolean)> 
<org.apache.lucene.index.SortedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.search.Sort: void setSort(java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: void setFuzzyPrefixLength(int)> 
<org.apache.lucene.search.WildcardQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.TermsHash: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.index.CompoundFileWriter: void copyFile(org.apache.lucene.index.CompoundFileWriter$FileEntry,org.apache.lucene.store.IndexOutput,byte[])> 
<org.apache.lucene.document.Field: void setValue(byte[],int,int)> 
<org.apache.lucene.document.AbstractField: void setStoreTermVector(org.apache.lucene.document.Field$TermVector)> 
<org.apache.lucene.analysis.Token: void setTermText(java.lang.String)> 
<org.apache.lucene.store.FSDirectory: void renameFile(java.lang.String,java.lang.String)> 
<org.apache.lucene.analysis.Token: void setPositionIncrement(int)> 
<org.apache.lucene.store.FSDirectory: void setDisableLocks(boolean)> 
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.store.SimpleFSLockFactory: void setLockDir(java.io.File)> 
<org.apache.lucene.search.PhraseQuery: void setSlop(int)> 
<org.apache.lucene.queryParser.QueryParserTokenManager: void setDebugStream(java.io.PrintStream)> 
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMaxThreadCount(int)> 
<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)> 
<org.apache.lucene.index.TermVectorOffsetInfo: void setStartOffset(int)> 
<org.apache.lucene.store.IndexOutput: void setLength(long)> 
<org.apache.lucene.index.NormsWriter: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.index.TermVectorOffsetInfo: void setEndOffset(int)> 
<org.apache.lucene.queryParser.QueryParser: void setLocale(java.util.Locale)> 
<org.apache.lucene.document.AbstractField: void setOmitNorms(boolean)> 
<org.apache.lucene.search.BooleanClause: void setQuery(org.apache.lucene.search.Query)> 
<org.apache.lucene.queryParser.QueryParser: void setDateResolution(org.apache.lucene.document.DateTools$Resolution)> 
<org.apache.lucene.search.TimeLimitedCollector: void setResolution(long)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: void setInput(java.io.Reader)> 
<org.apache.lucene.index.SegmentInfo: void setNumFields(int)> 
<org.apache.lucene.index.IndexFileDeleter: void message(java.lang.String)> 
<org.apache.lucene.index.ByteSliceReader: long writeTo(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)> 
<org.apache.lucene.store.ChecksumIndexOutput: void writeBytes(byte[],int,int)> 
<org.apache.lucene.document.Field: void setValue(org.apache.lucene.analysis.TokenStream)> 
<org.apache.lucene.index.LogDocMergePolicy: void setMinMergeDocs(int)> 
<org.apache.lucene.index.InvertedDocConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.index.IndexModifier: void setUseCompoundFile(boolean)> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setReplaceInvalidAcronym(boolean)> 
<org.apache.lucene.search.Sort: void setSort(java.lang.String,boolean)> 
<org.apache.lucene.search.TimeLimitedCollector: void setGreedy(boolean)> 
<org.apache.lucene.index.SegmentInfos: void prepareCommit(org.apache.lucene.store.Directory)> 
<org.apache.lucene.index.TermVectorMapper: void setDocumentNumber(int)> 
<org.apache.lucene.index.IndexReader: void setTermInfosIndexDivisor(int)> 
<org.apache.lucene.queryParser.QueryParser: void setFuzzyMinSim(float)> 
<org.apache.lucene.store.IndexOutput: void writeString(java.lang.String)> 
<org.apache.lucene.index.DocInverter: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.index.FieldInfo: void update(boolean,boolean,boolean,boolean,boolean,boolean,boolean)> 
<org.apache.lucene.index.IndexReader: void main(java.lang.String[])> 
<org.apache.lucene.index.LogMergePolicy: void setMaxMergeDocs(int)> 
<org.apache.lucene.index.IndexModifier: void setMaxFieldLength(int)> 
<org.apache.lucene.util.OpenBitSet: void setNumWords(int)> 
<org.apache.lucene.document.AbstractField: void setOmitTf(boolean)> 
<org.apache.lucene.index.SegmentInfo: void setDocStoreOffset(int)> 
<org.apache.lucene.index.CheckIndex: void msg(java.lang.String)> 
<org.apache.lucene.analysis.Token: void setStartOffset(int)> 
<org.apache.lucene.index.IndexModifier: void setMergeFactor(int)> 
<org.apache.lucene.index.IndexWriter: void setWriteLockTimeout(long)> 
<org.apache.lucene.index.Term: void set(java.lang.String,java.lang.String)> 
<org.apache.lucene.index.IndexWriter: void message(java.lang.String)> 
<org.apache.lucene.store.IndexOutput: void writeVInt(int)> 
<org.apache.lucene.search.BooleanQuery: void setMinimumNumberShouldMatch(int)> 
<org.apache.lucene.index.FieldInfo: void update(org.apache.lucene.index.FieldInfo)> 
<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.index.TermInfo: void set(int,long,long,int)> 
<org.apache.lucene.document.Field: void setValue(byte[])> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setMaxTokenLength(int)> 
<org.apache.lucene.index.LogMergePolicy: void setMergeFactor(int)> 
<org.apache.lucene.index.LogByteSizeMergePolicy: void setMinMergeMB(double)> 
<org.apache.lucene.index.SegmentReader: void setSegmentInfo(org.apache.lucene.index.SegmentInfo)> 
<org.apache.lucene.search.FieldDocSortedHitQueue: void setFields(org.apache.lucene.search.SortField[])> 
<org.apache.lucene.util.OpenBitSet: void set(long,long)> 
<org.apache.lucene.store.LockFactory: void setLockPrefix(java.lang.String)> 
<org.apache.lucene.index.LogMergePolicy: void setUseCompoundDocStore(boolean)> 
<org.apache.lucene.store.IndexOutput: void writeVLong(long)> 
<org.apache.lucene.store.IndexOutput: void writeChars(java.lang.String,int,int)> 
<org.apache.lucene.queryParser.QueryParser: void setAllowLeadingWildcard(boolean)> 
<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)> 
<org.apache.lucene.index.CheckIndex: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.search.BooleanQuery: void setUseScorer14(boolean)> 
<org.apache.lucene.analysis.Token: void setTermBuffer(char[],int,int)> 
<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.index.Payload: void setData(byte[],int,int)> 
<org.apache.lucene.index.LogMergePolicy: void setUseCompoundFile(boolean)> 
<org.apache.lucene.search.TopDocs: void setMaxScore(float)> 
<org.apache.lucene.queryParser.QueryParser: void setDateResolution(java.lang.String,org.apache.lucene.document.DateTools$Resolution)> 
<org.apache.lucene.analysis.Token: void setEndOffset(int)> 
<org.apache.lucene.queryParser.QueryParser: void setDefaultOperator(org.apache.lucene.queryParser.QueryParser$Operator)> 
<org.apache.lucene.analysis.Token: void setType(java.lang.String)> 
<org.apache.lucene.util.OpenBitSet: void setBits(long[])> 
<org.apache.lucene.index.FieldSortedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.search.FilteredTermEnum: void setEnum(org.apache.lucene.index.TermEnum)> 
<org.apache.lucene.index.IndexFileDeleter: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.index.DirectoryIndexReader: void setDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)> 
<org.apache.lucene.analysis.StopFilter: void setEnablePositionIncrements(boolean)> 
<org.apache.lucene.index.IndexWriter: void setTermIndexInterval(int)> 
<org.apache.lucene.index.FieldsWriter: void flushDocument(int,org.apache.lucene.store.RAMOutputStream)> 
<org.apache.lucene.util.OpenBitSet: void set(long)> 
<org.apache.lucene.index.DocFieldConsumers: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.analysis.StopFilter: void setEnablePositionIncrementsDefault(boolean)> 
<org.apache.lucene.index.FieldInfos: void write(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.search.function.CustomScoreQuery: void setStrict(boolean)> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setDefaultReplaceInvalidAcronym(boolean)> 
<org.apache.lucene.search.function.CustomScoreQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.TermVectorEntry: void setFrequency(int)> 
<org.apache.lucene.search.Explanation: void setDescription(java.lang.String)> 
<org.apache.lucene.index.SegmentInfos: void updateGeneration(org.apache.lucene.index.SegmentInfos)> 
<org.apache.lucene.document.Field: void setValue(java.lang.String)> 
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term)> 
<org.apache.lucene.index.MultiSegmentReader: void setTermInfosIndexDivisor(int)> 
<org.apache.lucene.analysis.PorterStemmer: void setto(java.lang.String)> 
<org.apache.lucene.search.BooleanQuery: void setMaxClauseCount(int)> 
<org.apache.lucene.index.DocumentsWriter: void setMaxBufferedDeleteTerms(int)> 
<org.apache.lucene.index.ByteSliceWriter: void writeVInt(int)> 
<org.apache.lucene.store.RAMFile: void setLength(long)> 
<org.apache.lucene.index.TermInfo: void set(org.apache.lucene.index.TermInfo)> 
<org.apache.lucene.queryParser.QueryParser: void setEnablePositionIncrements(boolean)> 
<org.apache.lucene.index.TermVectorEntry: void setPositions(int[])> 
<org.apache.lucene.analysis.Token: void setTermBuffer(java.lang.String,int,int)> 
<org.apache.lucene.index.IndexWriter: void setMaxBufferedDeleteTerms(int)> 
<org.apache.lucene.index.SegmentInfo: void setUseCompoundFile(boolean)> 
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: void setMaxTokenLength(int)> 
<org.apache.lucene.index.PositionBasedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.index.IndexModifier: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.search.Sort: void setSort(org.apache.lucene.search.SortField[])> 
<org.apache.lucene.analysis.Analyzer: void setPreviousTokenStream(java.lang.Object)> 
<org.apache.lucene.index.DocumentsWriter: void setFlushedDocCount(int)> 
<org.apache.lucene.index.SegmentReader: void setTermInfosIndexDivisor(int)> 
<org.apache.lucene.index.DocFieldProcessorPerThread: void trimFields(org.apache.lucene.index.DocumentsWriter$FlushState)> 
<org.apache.lucene.index.TermsHashConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.store.RAMFile: void setLastModified(long)> 
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,float)> 
<org.apache.lucene.index.IndexWriter: void setMergeScheduler(org.apache.lucene.index.MergeScheduler)> 
<org.apache.lucene.index.IndexWriter: void setRAMBufferSizeMB(double)> 
<org.apache.lucene.search.FilterManager: void setCacheSize(int)> 
<org.apache.lucene.index.DocumentsWriter: void setRAMBufferSizeMB(double)> 
<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)> 
<org.apache.lucene.index.TermInfosWriter: void writeTerm(int,byte[],int)> 
<org.apache.lucene.analysis.Token: void setTermBuffer(java.lang.String)> 
<org.apache.lucene.analysis.Token: void setTermLength(int)> 
<org.apache.lucene.store.IndexOutput: void writeLong(long)> 
<org.apache.lucene.search.RemoteSearchable: void main(java.lang.String[])> 
<org.apache.lucene.store.BufferedIndexInput: void setBufferSize(int)> 
<org.apache.lucene.search.Query: void setBoost(float)> 
<org.apache.lucene.store.IndexOutput: void writeInt(int)> 
<org.apache.lucene.index.DefaultSkipListReader: void setLastSkipData(int)> 
<org.apache.lucene.index.SegmentInfo: void write(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.search.ParallelMultiSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.index.ParallelArrayTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.index.DefaultSkipListWriter: void setSkipData(int,boolean,int)> 
<org.apache.lucene.index.SegmentInfos: void setDefaultGenLookaheadCount(int)> 
<org.apache.lucene.index.SegmentInfos: void setDefaultGenFileRetryPauseMsec(int)> 
<org.apache.lucene.index.IndexWriter: void setDefaultWriteLockTimeout(long)> 
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,byte)> 
<org.apache.lucene.search.ComplexExplanation: void setMatch(java.lang.Boolean)> 
<org.apache.lucene.search.Explanation: void setValue(float)> 
<org.apache.lucene.search.RemoteSearchable: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.analysis.Token: void setFlags(int)> 
<org.apache.lucene.util.BitVector: void set(int)> 
<org.apache.lucene.index.TermInfosReader: void setIndexDivisor(int)> 
<org.apache.lucene.index.MultiLevelSkipListReader: void setLastSkipData(int)> 
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)> 
<org.apache.lucene.index.SegmentInfos: void setDefaultGenFileRetryCount(int)> 
<org.apache.lucene.search.FilterManager: void setCleanThreadSleepTime(long)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: void setReplaceInvalidAcronym(boolean)> 
<org.apache.lucene.index.SegmentInfo: void setDocStoreIsCompoundFile(boolean)> 
<org.apache.lucene.queryParser.QueryParser: void setPhraseSlop(int)> 
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)> 
<org.apache.lucene.index.IndexWriter: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.index.SegmentInfo: void setDelCount(int)> 
<org.apache.lucene.index.LogByteSizeMergePolicy: void setMaxMergeMB(double)> 
<org.apache.lucene.index.MultiLevelSkipListWriter: long writeSkip(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.search.Sort: void setSort(java.lang.String[])> 
<org.apache.lucene.index.IndexWriter: void setMaxMergeDocs(int)> 
<org.apache.lucene.document.Document: void setBoost(float)> 
<org.apache.lucene.index.TermVectorEntry: void setOffsets(org.apache.lucene.index.TermVectorOffsetInfo[])> 
<org.apache.lucene.index.IndexWriter: void setDefaultInfoStream(java.io.PrintStream)> 
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document)> 
<org.apache.lucene.index.DocumentsWriter: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.queryParser.QueryParser: void setLowercaseExpandedTerms(boolean)> 
<org.apache.lucene.queryParser.QueryParser: void setRangeCollator(java.text.Collator)> 
<org.apache.lucene.index.DocumentsWriter: void setMaxFieldLength(int)> 
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.IndexWriter: void setMergeFactor(int)> 
<org.apache.lucene.analysis.Token: void setPayload(org.apache.lucene.index.Payload)> 
<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.Term)> 
<org.apache.lucene.index.IndexModifier: void setMaxBufferedDocs(int)> 
<org.apache.lucene.search.Similarity: void setDefault(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.store.IndexOutput: void writeChars(char[],int,int)> 
<org.apache.lucene.document.AbstractField: void setBoost(float)> 
<org.apache.lucene.store.NativeFSLockFactory: void setLockDir(java.io.File)> 
<org.apache.lucene.index.IndexWriter: void setSimilarity(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.search.Sort: void setSort(org.apache.lucene.search.SortField)> 
<org.apache.lucene.document.Field: void setValue(java.io.Reader)> 
<org.apache.lucene.search.MultiSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query parse(java.lang.String,java.lang.String[],org.apache.lucene.search.BooleanClause$Occur[],org.apache.lucene.analysis.Analyzer)> 
<org.apache.lucene.index.IndexWriter: void setMaxFieldLength(int)> 
<org.apache.lucene.index.IndexWriter: void setMessageID(java.io.PrintStream)> 
<org.apache.lucene.index.FieldsWriter: void setFieldsStream(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.store.ChecksumIndexOutput: void writeByte(byte)> 
<org.apache.lucene.index.FieldInfos: void write(org.apache.lucene.store.Directory,java.lang.String)> 
<org.apache.lucene.index.IndexWriter: void setMergePolicy(org.apache.lucene.index.MergePolicy)> 
<org.apache.lucene.index.IndexWriter: void setUseCompoundFile(boolean)> 
<org.apache.lucene.search.BooleanQuery: void setAllowDocsOutOfOrder(boolean)> 
<org.apache.lucene.index.TermInfosWriter: void add(int,byte[],int,org.apache.lucene.index.TermInfo)> 


***__authentications_to_high__*** 



***__authentications_to_low__*** 



***__authentications_neutral__*** 



***__sanitizers__*** 

<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)> 
<org.apache.lucene.queryParser.TokenMgrError: java.lang.String addEscapes(java.lang.String)> 
<org.apache.lucene.queryParser.ParseException: java.lang.String add_escapes(java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: java.lang.String escape(java.lang.String)> 
<org.apache.lucene.index.IndexFileNames: java.lang.String fileNameFromGeneration(java.lang.String,java.lang.String,long)> 


***__none__*** 



