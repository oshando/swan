<org.apache.lucene.search.spans.SpanQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setMaxBufferedDocs(int)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: int getMinimumNumberShouldMatch()> -> _SOURCES_
<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.TermBuffer)> -> _SINKS_
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.function.ReverseOrdFieldSource: org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.ComplexExplanation: java.lang.Boolean getMatch()> -> _SOURCES_
<org.apache.lucene.search.function.DocValues: float getAverageValue()> -> _SOURCES_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: long getCurrentSegmentGeneration(org.apache.lucene.store.Directory)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: void setHasProx(boolean)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: void updateFlushedDocCount(int)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParserTokenManager: org.apache.lucene.queryParser.Token getNextToken()> -> _SOURCES_
<org.apache.lucene.search.RangeQuery: org.apache.lucene.index.Term getLowerTerm()> -> _SOURCES_
<org.apache.lucene.search.RemoteCachingWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.SpanFilterResult: org.apache.lucene.search.DocIdSet getDocIdSet()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: int getDefaultGenFileRetryCount()> -> _SOURCES_
<org.apache.lucene.search.Searcher: void setSimilarity(org.apache.lucene.search.Similarity)> -> _SINKS_
<org.apache.lucene.index.SegmentInfo: int getDelCount()> -> _SOURCES_
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMergeThreadPriority(int)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void setMaxSyncPauseSeconds(double)> -> _SINKS_
<org.apache.lucene.util.ArrayUtil: int getNextSize(int)> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int)> -> _SINKS_
<org.apache.lucene.search.MultiPhraseQuery: int[] getPositions()> -> _SOURCES_
<org.apache.lucene.store.ChecksumIndexInput: long getChecksum()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: void setMaxBufferedDocs(int)> -> _SINKS_
<org.apache.lucene.store.RAMFile: long getLength()> -> _SOURCES_
<org.apache.lucene.index.DefaultSkipListReader: int readSkipData(int,org.apache.lucene.store.IndexInput)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: void setInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.index.FieldsReader: org.apache.lucene.document.Field$TermVector getTermVectorType(org.apache.lucene.index.FieldInfo)> -> _SOURCES_
<org.apache.lucene.document.AbstractField: boolean getOmitNorms()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory getDirectory()> -> _SOURCES_
<org.apache.lucene.queryParser.FastCharStream: int getBeginColumn()> -> _SOURCES_
<org.apache.lucene.index.TermsHashPerField: void writeBytes(int,byte[],int,int)> -> _SINKS_
<org.apache.lucene.index.ConcurrentMergeScheduler: int getMaxThreadCount()> -> _SOURCES_
<org.apache.lucene.index.LogMergePolicy: int getMaxMergeDocs()> -> _SOURCES_
<org.apache.lucene.search.MultiPhraseQuery: java.util.List getTermArrays()> -> _SOURCES_
<org.apache.lucene.index.TermsHash: void getPostings(org.apache.lucene.index.RawPostingList[])> -> _SOURCES_
<org.apache.lucene.index.DocFieldConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.search.TopDocCollector: int getTotalHits()> -> _SOURCES_
<org.apache.lucene.index.Payload: void setData(byte[])> -> _SINKS_
<org.apache.lucene.document.Document: org.apache.lucene.document.Fieldable getFieldable(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: void setSimilarity(org.apache.lucene.search.Similarity)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.QueryParser$Operator getDefaultOperator()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: int getMergeFactor()> -> _SOURCES_
<org.apache.lucene.index.IndexReader: long getVersion()> -> _SOURCES_
<org.apache.lucene.util.BitVector: void write(org.apache.lucene.store.Directory,java.lang.String)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: void setUseOldRangeQuery(boolean)> -> _SINKS_
<org.apache.lucene.index.MultiSegmentReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.index.SortedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> -> _SINKS_
<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: boolean getUseOldRangeQuery()> -> _SOURCES_
<org.apache.lucene.search.Sort: void setSort(java.lang.String)> -> _SINKS_
<org.apache.lucene.search.CachingSpanFilter: org.apache.lucene.search.SpanFilterResult getCachedResult(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.FilterManager: org.apache.lucene.search.FilterManager getInstance()> -> _SOURCES_
<org.apache.lucene.index.FieldsReader: org.apache.lucene.document.Field$Index getIndexType(org.apache.lucene.index.FieldInfo,boolean)> -> _SOURCES_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LogMergePolicy getLogMergePolicy()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setFuzzyPrefixLength(int)> -> _SINKS_
<org.apache.lucene.search.WildcardQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: int getFlushedDocCount()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: double getRAMBufferSizeMB()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: long getRAMUsed()> -> _SOURCES_
<org.apache.lucene.index.TermVectorsTermsWriterPerField: int getStreamCount()> -> _SOURCES_
<org.apache.lucene.search.IndexSearcher: org.apache.lucene.index.IndexReader getIndexReader()> -> _SOURCES_
<org.apache.lucene.index.TermsHash: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.search.RangeFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.CompoundFileWriter: void copyFile(org.apache.lucene.index.CompoundFileWriter$FileEntry,org.apache.lucene.store.IndexOutput,byte[])> -> _SINKS_
<org.apache.lucene.index.IndexWriter: int getBufferedDeleteTermsSize()> -> _SOURCES_
<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] getSubReaders()> -> _SOURCES_
<org.apache.lucene.document.Field: void setValue(byte[],int,int)> -> _SINKS_
<org.apache.lucene.analysis.WordlistLoader: java.util.HashSet getWordSet(java.io.File)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: int getNumBufferedDeleteTerms()> -> _SOURCES_
<org.apache.lucene.store.LockFactory: java.lang.String getLockPrefix()> -> _SOURCES_
<org.apache.lucene.index.DirectoryIndexReader: org.apache.lucene.index.IndexCommit getIndexCommit()> -> _SOURCES_
<org.apache.lucene.document.AbstractField: void setStoreTermVector(org.apache.lucene.document.Field$TermVector)> -> _SINKS_
<org.apache.lucene.search.FieldSortedHitQueue: float getMaxScore()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: double getRAMBufferSizeMB()> -> _SOURCES_
<org.apache.lucene.search.payloads.PayloadSpanUtil: java.util.Collection getPayloadsForQuery(org.apache.lucene.search.Query)> -> _SOURCES_
<org.apache.lucene.search.Hits: void getMoreDocs(int)> -> _SOURCES_
<org.apache.lucene.index.DefaultSkipListReader: long getFreqPointer()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getFlushCount()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setTermText(java.lang.String)> -> _SINKS_
<org.apache.lucene.store.FSDirectory: void renameFile(java.lang.String,java.lang.String)> -> _SINKS_
<org.apache.lucene.store.IndexInput: java.lang.String readModifiedUTF8String()> -> _SOURCES_
<org.apache.lucene.index.LogMergePolicy: boolean getUseCompoundFile()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setPositionIncrement(int)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: int getDocStoreOffset()> -> _SOURCES_
<org.apache.lucene.index.IndexReader: long getCurrentVersion(org.apache.lucene.store.Directory)> -> _SOURCES_
<org.apache.lucene.store.FSDirectory: void setDisableLocks(boolean)> -> _SINKS_
<org.apache.lucene.search.QueryTermVector: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.store.Directory: org.apache.lucene.store.LockFactory getLockFactory()> -> _SOURCES_
<org.apache.lucene.search.Hit: int getId()> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.TermInfo get(org.apache.lucene.index.Term)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanTermQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.SegmentTermPositions: byte[] getPayload(byte[],int)> -> _SOURCES_
<org.apache.lucene.index.DocFieldConsumers: org.apache.lucene.index.DocFieldConsumers$PerDoc getPerDoc()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> -> _SINKS_
<org.apache.lucene.index.CompoundFileWriter: java.lang.String getName()> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: org.apache.lucene.search.BooleanClause[] getClauses()> -> _SOURCES_
<org.apache.lucene.index.IndexCommit: long getVersion()> -> _SOURCES_
<org.apache.lucene.store.SimpleFSLockFactory: void setLockDir(java.io.File)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: int getTermIndexInterval()> -> _SOURCES_
<org.apache.lucene.index.DirectoryIndexReader: long getVersion()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()> -> _SOURCES_
<org.apache.lucene.index.ByteSliceWriter: int getAddress()> -> _SOURCES_
<org.apache.lucene.analysis.CharArraySet: int getHashCode(java.lang.CharSequence)> -> _SOURCES_
<org.apache.lucene.search.PhraseQuery: void setSlop(int)> -> _SINKS_
<org.apache.lucene.search.function.IntFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: int getPhraseSlop()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: long getDefaultWriteLockTimeout()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParserTokenManager: void setDebugStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMaxThreadCount(int)> -> _SINKS_
<org.apache.lucene.search.FieldSortedHitQueue: org.apache.lucene.search.SortField[] getFields()> -> _SOURCES_
<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)> -> _SINKS_
<org.apache.lucene.index.TermVectorOffsetInfo: void setStartOffset(int)> -> _SINKS_
<org.apache.lucene.store.IndexOutput: void setLength(long)> -> _SINKS_
<org.apache.lucene.search.FieldCacheImpl: int[] getInts(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$IntParser)> -> _SOURCES_
<org.apache.lucene.index.MultiReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.index.NormsWriter: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.document.Document: java.lang.String[] getValues(java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.Scorer: org.apache.lucene.search.Similarity getSimilarity()> -> _SOURCES_
<org.apache.lucene.store.FSDirectory: boolean getDisableLocks()> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardAnalyzer: int getMaxTokenLength()> -> _SOURCES_
<org.apache.lucene.search.ConstantScoreRangeQuery: java.lang.String getUpperVal()> -> _SOURCES_
<org.apache.lucene.index.StoredFieldsWriter: org.apache.lucene.index.StoredFieldsWriter$PerDoc getPerDoc()> -> _SOURCES_
<org.apache.lucene.index.TermVectorOffsetInfo: void setEndOffset(int)> -> _SINKS_
<org.apache.lucene.index.TermInfosReader: int getIndexOffset(org.apache.lucene.index.Term)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setLocale(java.util.Locale)> -> _SINKS_
<org.apache.lucene.document.AbstractField: void setOmitNorms(boolean)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.Vector)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: java.lang.String getSegmentName()> -> _SOURCES_
<org.apache.lucene.index.MultiReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.index.TermVectorOffsetInfo: int getStartOffset()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: int getFuzzyPrefixLength()> -> _SOURCES_
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.lang.String)> -> _SOURCES_
<org.apache.lucene.util.BitVector: boolean getAndSet(int)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergeScheduler getMergeScheduler()> -> _SOURCES_
<org.apache.lucene.search.PhraseQuery: int getSlop()> -> _SOURCES_
<org.apache.lucene.util.cache.Cache: org.apache.lucene.util.cache.Cache getSynchronizedCache()> -> _SOURCES_
<org.apache.lucene.index.LogDocMergePolicy: int getMinMergeDocs()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: java.io.PrintStream getInfoStream()> -> _SOURCES_
<org.apache.lucene.document.AbstractField: float getBoost()> -> _SOURCES_
<org.apache.lucene.store.Directory: java.lang.String getLockID()> -> _SOURCES_
<org.apache.lucene.search.BooleanClause: void setQuery(org.apache.lucene.search.Query)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: void setDateResolution(org.apache.lucene.document.DateTools$Resolution)> -> _SINKS_
<org.apache.lucene.search.TimeLimitedCollector: void setResolution(long)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: java.lang.String discardEscapeChar(java.lang.String)> -> _SANITIZERS_
<org.apache.lucene.analysis.standard.StandardTokenizer: void setInput(java.io.Reader)> -> _SINKS_
<org.apache.lucene.search.SortField: int getType()> -> _SOURCES_
<org.apache.lucene.search.SpanFilterResult: java.util.List getPositions()> -> _SOURCES_
<org.apache.lucene.document.Document: org.apache.lucene.document.Field getField(java.lang.String)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.analysis.Analyzer getAnalyzer()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: long getCurrentSegmentGeneration(java.lang.String[])> -> _SOURCES_
<org.apache.lucene.index.Payload: byte[] getData()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: void setNumFields(int)> -> _SINKS_
<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.BooleanClause$Occur getOccur()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: void loadDeletedDocs()> -> _SOURCES_
<org.apache.lucene.index.TermVectorEntry: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.search.ComplexExplanation: java.lang.String getSummary()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNotQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.IndexFileDeleter: void message(java.lang.String)> -> _SINKS_
<org.apache.lucene.index.ByteSliceReader: long writeTo(org.apache.lucene.store.IndexOutput)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: int[] getIntBlock(boolean)> -> _SOURCES_
<org.apache.lucene.analysis.Token: org.apache.lucene.index.Payload getPayload()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)> -> _SINKS_
<org.apache.lucene.analysis.SinkTokenizer: java.util.List getTokens()> -> _SOURCES_
<org.apache.lucene.store.ChecksumIndexOutput: void writeBytes(byte[],int,int)> -> _SINKS_
<org.apache.lucene.search.spans.SpanWeight: float getValue()> -> _SOURCES_
<org.apache.lucene.document.Field: void setValue(org.apache.lucene.analysis.TokenStream)> -> _SINKS_
<org.apache.lucene.queryParser.FastCharStream: int getBeginLine()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.search.Similarity getSimilarity()> -> _SOURCES_
<org.apache.lucene.index.LogDocMergePolicy: void setMinMergeDocs(int)> -> _SINKS_
<org.apache.lucene.index.InvertedDocConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.search.FieldCacheImpl: java.lang.Comparable[] getCustom(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.SortComparator)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.document.AbstractField: byte[] getBinaryValue()> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.Term get(int)> -> _SOURCES_
<org.apache.lucene.index.PositionBasedTermVectorMapper: java.util.Map getFieldToTerms()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: void setUseCompoundFile(boolean)> -> _SINKS_
<org.apache.lucene.util.OpenBitSet: boolean get(long)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo)> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setReplaceInvalidAcronym(boolean)> -> _SINKS_
<org.apache.lucene.search.RangeQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.search.Sort: void setSort(java.lang.String,boolean)> -> _SINKS_
<org.apache.lucene.analysis.StopFilter: boolean getEnablePositionIncrementsDefault()> -> _SOURCES_
<org.apache.lucene.index.IndexFileDeleter: org.apache.lucene.index.IndexFileDeleter$RefCount getRefCount(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: int getMaxSkipLevels()> -> _SOURCES_
<org.apache.lucene.index.SegmentMergeInfo: int[] getDocMap()> -> _SOURCES_
<org.apache.lucene.search.PrefixFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.store.NoLockFactory: org.apache.lucene.store.NoLockFactory getNoLockFactory()> -> _SOURCES_
<org.apache.lucene.search.TimeLimitedCollector: void setGreedy(boolean)> -> _SINKS_
<org.apache.lucene.search.spans.SpanNotQuery: java.util.Collection getTerms()> -> _SOURCES_
<org.apache.lucene.index.MultiReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> -> _SOURCES_
<org.apache.lucene.store.ChecksumIndexOutput: long getChecksum()> -> _SOURCES_
<org.apache.lucene.search.ExtendedFieldCacheImpl: double[] getDoubles(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File)> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: java.lang.Object getAuto(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,boolean)> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: short[] getShorts(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.document.Document: org.apache.lucene.document.Field[] getFields(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: void prepareCommit(org.apache.lucene.store.Directory)> -> _SINKS_
<org.apache.lucene.index.TermVectorMapper: void setDocumentNumber(int)> -> _SINKS_
<org.apache.lucene.index.IndexReader: void setTermInfosIndexDivisor(int)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: void setFuzzyMinSim(float)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo)> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeString(java.lang.String)> -> _SINKS_
<org.apache.lucene.index.DocInverter: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.search.spans.SpanNearQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: boolean getAllowDocsOutOfOrder()> -> _SOURCES_
<org.apache.lucene.index.FieldInfo: void update(boolean,boolean,boolean,boolean,boolean,boolean,boolean)> -> _SINKS_
<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.IndexReader[] getSubReaders()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getMergeFactor()> -> _SOURCES_
<org.apache.lucene.index.FreqProxTermsWriterPerField: int getStreamCount()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,int,boolean)> -> _SOURCES_
<org.apache.lucene.analysis.PorterStemmer: char[] getResultBuffer()> -> _SOURCES_
<org.apache.lucene.index.IndexReader: void main(java.lang.String[])> -> _SINKS_
<org.apache.lucene.index.LogMergePolicy: void setMaxMergeDocs(int)> -> _SINKS_
<org.apache.lucene.store.RAMFile: long getSizeInBytes()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: long getGeneration()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getMaxBufferedDeleteTerms()> -> _SOURCES_
<org.apache.lucene.index.FilterIndexReader: long getVersion()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: void setMaxFieldLength(int)> -> _SINKS_
<org.apache.lucene.util.OpenBitSet: void setNumWords(int)> -> _SINKS_
<org.apache.lucene.search.spans.SpanOrQuery: java.util.Collection getTerms()> -> _SOURCES_
<org.apache.lucene.search.FuzzyTermEnum: int getMaxDistance(int)> -> _SOURCES_
<org.apache.lucene.document.AbstractField: void setOmitTf(boolean)> -> _SINKS_
<org.apache.lucene.analysis.WordlistLoader: java.util.HashMap getStemDict(java.io.File)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: void setDocStoreOffset(int)> -> _SINKS_
<org.apache.lucene.index.SegmentInfo: java.lang.String getDocStoreSegment()> -> _SOURCES_
<org.apache.lucene.index.CheckIndex: void msg(java.lang.String)> -> _SINKS_
<org.apache.lucene.analysis.PorterStemmer: int getResultLength()> -> _SOURCES_
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Query getQuery()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: java.lang.String getCurrentSegmentFileName()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setStartOffset(int)> -> _SINKS_
<org.apache.lucene.index.IndexCommit: long getTimestamp()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: void setMergeFactor(int)> -> _SINKS_
<org.apache.lucene.index.MultiSegmentReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.search.function.FloatFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardTokenizer: int getMaxTokenLength()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setWriteLockTimeout(long)> -> _SINKS_
<org.apache.lucene.index.Term: void set(java.lang.String,java.lang.String)> -> _SINKS_
<org.apache.lucene.index.IndexModifier: boolean getUseCompoundFile()> -> _SOURCES_
<org.apache.lucene.document.Document: java.lang.String get(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexCommit getIndexCommit()> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: boolean getAndSet(int)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: int getTermInfosIndexDivisor()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void message(java.lang.String)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: int getDocCount(int)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: int getMaxBufferedDeleteTerms()> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeVInt(int)> -> _SINKS_
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.TermFreqVector get(int,java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: org.apache.lucene.search.FieldCache$StringIndex getStringIndex(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.CompoundFileWriter: org.apache.lucene.store.Directory getDirectory()> -> _SOURCES_
<org.apache.lucene.search.Hit: java.lang.String get(java.lang.String)> -> _SOURCES_
<org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int)> -> _SOURCES_
<org.apache.lucene.search.function.DocValues: float getMinValue()> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: void setMinimumNumberShouldMatch(int)> -> _SINKS_
<org.apache.lucene.search.function.FieldCacheSource: org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.Explanation: float getValue()> -> _SOURCES_
<org.apache.lucene.index.FieldInfo: void update(org.apache.lucene.index.FieldInfo)> -> _SINKS_
<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)> -> _SINKS_
<org.apache.lucene.search.function.ByteFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.TermInfo: void set(int,long,long,int)> -> _SINKS_
<org.apache.lucene.index.Payload: int getOffset()> -> _SOURCES_
<org.apache.lucene.document.Field: void setValue(byte[])> -> _SINKS_
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setMaxTokenLength(int)> -> _SINKS_
<org.apache.lucene.index.SegmentTermVector: int[] getTermFrequencies()> -> _SOURCES_
<org.apache.lucene.index.LogMergePolicy: void setMergeFactor(int)> -> _SINKS_
<org.apache.lucene.index.SegmentInfos: java.lang.String getCurrentSegmentFileName(org.apache.lucene.store.Directory)> -> _SOURCES_
<org.apache.lucene.document.AbstractField: boolean getOmitTf()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanFirstQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfo,boolean)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getMaxMergeDocs()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: int getDocStoreOffset()> -> _SOURCES_
<org.apache.lucene.search.FieldDocSortedHitQueue: org.apache.lucene.search.SortField[] getFields()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: java.lang.String getDocStoreSegment()> -> _SOURCES_
<org.apache.lucene.search.function.ShortFieldSource: org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache,java.lang.String,org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.Query: org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterThreadState getThreadState(org.apache.lucene.document.Document,org.apache.lucene.index.Term)> -> _SOURCES_
<org.apache.lucene.search.QueryWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.Sort: org.apache.lucene.search.SortField[] getSort()> -> _SOURCES_
<org.apache.lucene.search.PrefixFilter: org.apache.lucene.index.Term getPrefix()> -> _SOURCES_
<org.apache.lucene.search.function.OrdFieldSource: org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.TermVectorEntry: java.lang.String getTerm()> -> _SOURCES_
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput getTvfStream()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: java.util.Locale getLocale()> -> _SOURCES_
<org.apache.lucene.index.LogByteSizeMergePolicy: void setMinMergeMB(double)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: void setSegmentInfo(org.apache.lucene.index.SegmentInfo)> -> _SINKS_
<org.apache.lucene.search.Similarity: float[] getNormDecoder()> -> _SOURCES_
<org.apache.lucene.search.FieldDocSortedHitQueue: void setFields(org.apache.lucene.search.SortField[])> -> _SINKS_
<org.apache.lucene.index.TermVectorsReader: java.lang.String[] readFields(int)> -> _SOURCES_
<org.apache.lucene.search.CachingSpanFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.store.ChecksumIndexInput: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: void set(long,long)> -> _SINKS_
<org.apache.lucene.util.Parameter: java.lang.Object readResolve()> -> _SOURCES_
<org.apache.lucene.index.CompoundFileReader: java.lang.String getName()> -> _SOURCES_
<org.apache.lucene.index.MultiSegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption,org.apache.lucene.index.IndexReader[])> -> _SOURCES_
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.store.IndexInput getTvdStream()> -> _SOURCES_
<org.apache.lucene.store.RAMFile: byte[] getBuffer(int)> -> _SOURCES_
<org.apache.lucene.search.QueryTermVector: java.lang.String[] getTerms()> -> _SOURCES_
<org.apache.lucene.index.TermVectorsReader: org.apache.lucene.index.TermFreqVector[] get(int)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.SpanQuery[] getClauses()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getNumBufferedDocuments()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNearQuery: int getSlop()> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: boolean get(int)> -> _SOURCES_
<org.apache.lucene.index.TermVectorsReader: void get(int,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.search.PhraseQuery: org.apache.lucene.index.Term[] getTerms()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: int getBit(int)> -> _SOURCES_
<org.apache.lucene.index.MultiReader: org.apache.lucene.index.IndexReader[] getSubReaders()> -> _SOURCES_
<org.apache.lucene.search.MultiSearcherThread: float getMaxScore()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery getExclude()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: int getMaxFieldLength()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: long getWriteLockTimeout()> -> _SOURCES_
<org.apache.lucene.search.WildcardQuery: org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo,int)> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: short[] getShorts(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$ShortParser)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.ParallelReader: long getVersion()> -> _SOURCES_
<org.apache.lucene.store.LockFactory: void setLockPrefix(java.lang.String)> -> _SINKS_
<org.apache.lucene.index.LogMergePolicy: void setUseCompoundDocStore(boolean)> -> _SINKS_
<org.apache.lucene.search.SpanQueryFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanTermQuery: java.util.Collection getTerms()> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeVLong(long)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.analysis.Analyzer getAnalyzer()> -> _SOURCES_
<org.apache.lucene.index.TermVectorsReader: void get(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeChars(java.lang.String,int,int)> -> _SINKS_
<org.apache.lucene.search.spans.TermSpans: java.util.Collection getPayload()> -> _SOURCES_
<org.apache.lucene.queryParser.ParseException: java.lang.String getMessage()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setAllowLeadingWildcard(boolean)> -> _SINKS_
<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> -> _SOURCES_
<org.apache.lucene.analysis.StopFilter: boolean getEnablePositionIncrements()> -> _SOURCES_
<org.apache.lucene.analysis.Analyzer: int getPositionIncrementGap(java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanOrQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.store.BufferedIndexInput: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Filter getFilter()> -> _SOURCES_
<org.apache.lucene.search.Similarity: org.apache.lucene.search.Similarity getDefault()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)> -> _SOURCES_
<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)> -> _SINKS_
<org.apache.lucene.index.CheckIndex: void setInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List,boolean)> -> _SOURCES_
<org.apache.lucene.queryParser.Token: java.lang.Object getValue()> -> _SOURCES_
<org.apache.lucene.index.ByteSliceReader: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: void setUseScorer14(boolean)> -> _SINKS_
<org.apache.lucene.search.spans.SpanNearQuery: java.util.Collection getTerms()> -> _SOURCES_
<org.apache.lucene.queryParser.FastCharStream: int getEndLine()> -> _SOURCES_
<org.apache.lucene.search.FieldSortedHitQueue: org.apache.lucene.search.ScoreDocComparator getCachedComparator(org.apache.lucene.index.IndexReader,java.lang.String,int,java.util.Locale,org.apache.lucene.search.SortComparatorSource)> -> _SOURCES_
<org.apache.lucene.index.MultipleTermPositions: int getPayloadLength()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.spans.SpanQuery getMatch()> -> _SOURCES_
<org.apache.lucene.util.BitVector: boolean get(int)> -> _SOURCES_
<org.apache.lucene.index.IndexFileNameFilter: org.apache.lucene.index.IndexFileNameFilter getFilter()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setTermBuffer(char[],int,int)> -> _SINKS_
<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> -> _SINKS_
<org.apache.lucene.index.Payload: void setData(byte[],int,int)> -> _SINKS_
<org.apache.lucene.index.LogMergePolicy: void setUseCompoundFile(boolean)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: int getNumDocsInRAM()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.SegmentTermPositionVector: org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int)> -> _SOURCES_
<org.apache.lucene.search.TopDocs: void setMaxScore(float)> -> _SINKS_
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File,org.apache.lucene.store.LockFactory)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanTermQuery: org.apache.lucene.index.Term getTerm()> -> _SOURCES_
<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.index.Term getTerm()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setDateResolution(java.lang.String,org.apache.lucene.document.DateTools$Resolution)> -> _SINKS_
<org.apache.lucene.analysis.Token: void setEndOffset(int)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: void setDefaultOperator(org.apache.lucene.queryParser.QueryParser$Operator)> -> _SINKS_
<org.apache.lucene.index.SortedTermVectorMapper: java.util.SortedSet getTermVectorEntrySet()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: boolean getUseCompoundFile()> -> _SOURCES_
<org.apache.lucene.search.MultiSearcher: int[] getStarts()> -> _SOURCES_
<org.apache.lucene.index.FilterIndexReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardTokenizerImpl: void getText(org.apache.lucene.analysis.Token)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: double getMaxSyncPauseSeconds()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setType(java.lang.String)> -> _SINKS_
<org.apache.lucene.document.AbstractField: byte[] getBinaryValue(byte[])> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: boolean getUseScorer14()> -> _SOURCES_
<org.apache.lucene.util.SortedVIntList: int getByteSize()> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: void setBits(long[])> -> _SINKS_
<org.apache.lucene.index.FieldSortedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> -> _SINKS_
<org.apache.lucene.search.ConstantScoreRangeQuery: java.lang.String getLowerVal()> -> _SOURCES_
<org.apache.lucene.search.FilteredTermEnum: void setEnum(org.apache.lucene.index.TermEnum)> -> _SINKS_
<org.apache.lucene.index.SegmentInfo: java.lang.String getNormFileName(int)> -> _SOURCES_
<org.apache.lucene.index.IndexFileDeleter: void setInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.index.DirectoryIndexReader: void setDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)> -> _SINKS_
<org.apache.lucene.document.AbstractField: int getBinaryOffset()> -> _SOURCES_
<org.apache.lucene.search.SortField: boolean getReverse()> -> _SOURCES_
<org.apache.lucene.analysis.StopFilter: void setEnablePositionIncrements(boolean)> -> _SINKS_
<org.apache.lucene.document.Document: java.util.List getFields()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setTermIndexInterval(int)> -> _SINKS_
<org.apache.lucene.document.Document: byte[] getBinaryValue(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.FieldsWriter: void flushDocument(int,org.apache.lucene.store.RAMOutputStream)> -> _SINKS_
<org.apache.lucene.util.OpenBitSet: void set(long)> -> _SINKS_
<org.apache.lucene.queryParser.TokenMgrError: java.lang.String addEscapes(java.lang.String)> -> _SANITIZERS_
<org.apache.lucene.search.spans.SpanNearQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.DocFieldConsumers: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.TermInfosReader$ThreadResources getThreadResources()> -> _SOURCES_
<org.apache.lucene.analysis.StopFilter: void setEnablePositionIncrementsDefault(boolean)> -> _SINKS_
<org.apache.lucene.search.ConstantScoreQuery: org.apache.lucene.search.Filter getFilter()> -> _SOURCES_
<org.apache.lucene.index.FieldInfos: void write(org.apache.lucene.store.IndexOutput)> -> _SINKS_
<org.apache.lucene.store.FSDirectory: java.io.File getFile()> -> _SOURCES_
<org.apache.lucene.index.ParallelReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.lang.String,boolean)> -> _SOURCES_
<org.apache.lucene.LucenePackage: java.lang.Package get()> -> _SOURCES_
<org.apache.lucene.search.function.CustomScoreQuery: void setStrict(boolean)> -> _SINKS_
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setDefaultReplaceInvalidAcronym(boolean)> -> _SINKS_
<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.Explanation: java.lang.String getDescription()> -> _SOURCES_
<org.apache.lucene.search.TermQuery: org.apache.lucene.index.Term getTerm()> -> _SOURCES_
<org.apache.lucene.search.function.CustomScoreQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> -> _SINKS_
<org.apache.lucene.index.SegmentTermVector: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.search.ConstantScoreRangeQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: int getSkipInterval()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: byte[] getNorms(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.ParallelReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.index.MultiLevelSkipListReader: boolean loadNextSkip(int)> -> _SOURCES_
<org.apache.lucene.search.RangeQuery: java.text.Collator getCollator()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: float getFuzzyMinSim()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: java.lang.String getSegment()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.SortField: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.FieldsReader getFieldsReader()> -> _SOURCES_
<org.apache.lucene.search.FuzzyQuery: int getPrefixLength()> -> _SOURCES_
<org.apache.lucene.queryParser.FastCharStream: int getEndColumn()> -> _SOURCES_
<org.apache.lucene.analysis.WordlistLoader: java.util.HashSet getWordSet(java.io.Reader)> -> _SOURCES_
<org.apache.lucene.search.FilterManager: org.apache.lucene.search.Filter getFilter(org.apache.lucene.search.Filter)> -> _SOURCES_
<org.apache.lucene.index.MultiReader: long getVersion()> -> _SOURCES_
<org.apache.lucene.queryParser.ParseException: java.lang.String add_escapes(java.lang.String)> -> _SANITIZERS_
<org.apache.lucene.index.TermVectorEntry: void setFrequency(int)> -> _SINKS_
<org.apache.lucene.search.Explanation: void setDescription(java.lang.String)> -> _SINKS_
<org.apache.lucene.index.SegmentInfos: void updateGeneration(org.apache.lucene.index.SegmentInfos)> -> _SINKS_
<org.apache.lucene.document.Field: void setValue(java.lang.String)> -> _SINKS_
<org.apache.lucene.index.DefaultSkipListReader: int getPayloadLength()> -> _SOURCES_
<org.apache.lucene.analysis.Analyzer: java.lang.Object getPreviousTokenStream()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term)> -> _SINKS_
<org.apache.lucene.search.TimeLimitedCollector: long getResolution()> -> _SOURCES_
<org.apache.lucene.document.Document: byte[][] getBinaryValues(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfo getSegmentInfo()> -> _SOURCES_
<org.apache.lucene.search.SpanQueryFilter: org.apache.lucene.search.spans.SpanQuery getQuery()> -> _SOURCES_
<org.apache.lucene.index.MultiSegmentReader: void setTermInfosIndexDivisor(int)> -> _SINKS_
<org.apache.lucene.search.MultiPhraseQuery: int getSlop()> -> _SOURCES_
<org.apache.lucene.index.TermVectorEntry: int getFrequency()> -> _SOURCES_
<org.apache.lucene.analysis.PorterStemmer: void setto(java.lang.String)> -> _SINKS_
<org.apache.lucene.analysis.CharArraySet: int getSlot(java.lang.CharSequence)> -> _SOURCES_
<org.apache.lucene.search.Explanation: java.lang.String getSummary()> -> _SOURCES_
<org.apache.lucene.index.TermVectorsTermsWriter: org.apache.lucene.index.TermVectorsTermsWriter$PerDoc getPerDoc()> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: void setMaxClauseCount(int)> -> _SINKS_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: void setMaxBufferedDeleteTerms(int)> -> _SINKS_
<org.apache.lucene.index.ByteSliceWriter: void writeVInt(int)> -> _SINKS_
<org.apache.lucene.search.spans.TermSpans: org.apache.lucene.index.TermPositions getPositions()> -> _SOURCES_
<org.apache.lucene.store.RAMFile: void setLength(long)> -> _SINKS_
<org.apache.lucene.index.TermInfo: void set(org.apache.lucene.index.TermInfo)> -> _SINKS_
<org.apache.lucene.search.FieldCacheImpl: int[] getInts(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: int getNumWords()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: java.lang.String getDelFileName()> -> _SOURCES_
<org.apache.lucene.search.ExtendedFieldCacheImpl: java.lang.Object getAuto(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setEnablePositionIncrements(boolean)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token getNextToken()> -> _SOURCES_
<org.apache.lucene.index.TermVectorEntry: void setPositions(int[])> -> _SINKS_
<org.apache.lucene.index.TermInfosReader: long getPosition(org.apache.lucene.index.Term)> -> _SOURCES_
<org.apache.lucene.util.DocIdBitSet: java.util.BitSet getBitSet()> -> _SOURCES_
<org.apache.lucene.search.BooleanClause: org.apache.lucene.search.Query getQuery()> -> _SOURCES_
<org.apache.lucene.index.CompoundFileReader: org.apache.lucene.store.Directory getDirectory()> -> _SOURCES_
<org.apache.lucene.store.BufferedIndexInput: int getBufferSize()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.PayloadSpans getPayloadSpans(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: java.util.HashMap getBufferedDeleteTerms()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setTermBuffer(java.lang.String,int,int)> -> _SINKS_
<org.apache.lucene.index.IndexModifier: int getMaxBufferedDocs()> -> _SOURCES_
<org.apache.lucene.store.RAMOutputStream: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: java.text.Collator getRangeCollator()> -> _SOURCES_
<org.apache.lucene.queryParser.FastCharStream: int getLine()> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: int getIndexDivisor()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.FieldInfos getFieldInfos()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfos,boolean,boolean,int,boolean)> -> _SOURCES_
<org.apache.lucene.search.Explanation: org.apache.lucene.search.Explanation[] getDetails()> -> _SOURCES_
<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread getMergeThread(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.MergePolicy$OneMerge)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: java.lang.String getCurrentSegmentFileName(java.lang.String[])> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setMaxBufferedDeleteTerms(int)> -> _SINKS_
<org.apache.lucene.index.ParallelReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> -> _SOURCES_
<org.apache.lucene.search.FuzzyQuery: org.apache.lucene.search.FilteredTermEnum getEnum(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.SegmentMerger: int[] getDelCounts()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: void setUseCompoundFile(boolean)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: int getFlushDeletesCount()> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: java.lang.String[] getStrings(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.lang.String,org.apache.lucene.store.LockFactory)> -> _SOURCES_
<org.apache.lucene.queryParser.TokenMgrError: java.lang.String getMessage()> -> _SOURCES_
<org.apache.lucene.search.ExtendedFieldCacheImpl: long[] getLongs(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.ExtendedFieldCache$LongParser)> -> _SOURCES_
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> -> _SINKS_
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)> -> _SOURCES_
<org.apache.lucene.index.MultiSegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: int getDefaultGenFileRetryPauseMsec()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: java.lang.String escape(java.lang.String)> -> _SANITIZERS_
<org.apache.lucene.index.IndexReader: int getRefCount()> -> _SOURCES_
<org.apache.lucene.util.cache.SimpleMapCache: java.lang.Object get(java.lang.Object)> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardTokenizer: void setMaxTokenLength(int)> -> _SINKS_
<org.apache.lucene.index.PositionBasedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermVectorsReader getTermVectorsReader()> -> _SOURCES_
<org.apache.lucene.index.IndexModifier: void setInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.index.LogByteSizeMergePolicy: double getMaxMergeMB()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanFirstQuery: int getEnd()> -> _SOURCES_
<org.apache.lucene.index.MultiLevelSkipListReader: void loadSkipLevels()> -> _SOURCES_
<org.apache.lucene.search.Sort: void setSort(org.apache.lucene.search.SortField[])> -> _SINKS_
<org.apache.lucene.search.FieldCacheImpl: float[] getFloats(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.analysis.Analyzer: void setPreviousTokenStream(java.lang.Object)> -> _SINKS_
<org.apache.lucene.index.SegmentTermVector: java.lang.String[] getTerms()> -> _SOURCES_
<org.apache.lucene.search.spans.SpanFirstQuery: java.util.Collection getTerms()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: void setFlushedDocCount(int)> -> _SINKS_
<org.apache.lucene.index.MultiLevelSkipListReader: int getDoc()> -> _SOURCES_
<org.apache.lucene.store.RAMFile: long getLastModified()> -> _SOURCES_
<org.apache.lucene.index.FieldSortedTermVectorMapper: java.util.Comparator getComparator()> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: int getMaxClauseCount()> -> _SOURCES_
<org.apache.lucene.index.TermVectorEntry: org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets()> -> _SOURCES_
<org.apache.lucene.store.BufferedIndexOutput: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: void setTermInfosIndexDivisor(int)> -> _SINKS_
<org.apache.lucene.index.SegmentMerger: int[][] getDocMaps()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: boolean getEnablePositionIncrements()> -> _SOURCES_
<org.apache.lucene.document.Document: org.apache.lucene.document.Fieldable[] getFieldables(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.IndexCommit: long getGeneration()> -> _SOURCES_
<org.apache.lucene.index.DocFieldProcessorPerThread: void trimFields(org.apache.lucene.index.DocumentsWriter$FlushState)> -> _SINKS_
<org.apache.lucene.store.FSDirectory: java.lang.String getLockID()> -> _SOURCES_
<org.apache.lucene.index.MultiReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.TermsHashConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> -> _SINKS_
<org.apache.lucene.store.RAMFile: void setLastModified(long)> -> _SINKS_
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,float)> -> _SINKS_
<org.apache.lucene.search.Hit: float getScore()> -> _SOURCES_
<org.apache.lucene.util.OpenBitSet: boolean getAndSet(long)> -> _SOURCES_
<org.apache.lucene.document.Document: float getBoost()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setMergeScheduler(org.apache.lucene.index.MergeScheduler)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void setRAMBufferSizeMB(double)> -> _SINKS_
<org.apache.lucene.search.FilterManager: void setCacheSize(int)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: void setRAMBufferSizeMB(double)> -> _SINKS_
<org.apache.lucene.util.OpenBitSet: long[] getBits()> -> _SOURCES_
<org.apache.lucene.search.Hit: float getBoost()> -> _SOURCES_
<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)> -> _SINKS_
<org.apache.lucene.index.TermInfosWriter: void writeTerm(int,byte[],int)> -> _SINKS_
<org.apache.lucene.analysis.Token: void setTermBuffer(java.lang.String)> -> _SINKS_
<org.apache.lucene.analysis.Token: int getFlags()> -> _SOURCES_
<org.apache.lucene.search.ExtendedFieldCacheImpl: long[] getLongs(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.queryParser.Token getToken(int)> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setTermLength(int)> -> _SINKS_
<org.apache.lucene.index.IndexReader: long getCurrentVersion(java.io.File)> -> _SOURCES_
<org.apache.lucene.index.SegmentTermPositionVector: int[] getTermPositions(int)> -> _SOURCES_
<org.apache.lucene.index.FieldSortedTermVectorMapper: java.util.Map getFieldToTerms()> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeLong(long)> -> _SINKS_
<org.apache.lucene.search.RemoteSearchable: void main(java.lang.String[])> -> _SINKS_
<org.apache.lucene.index.SegmentInfos: java.lang.String getNextSegmentFileName()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy getMergePolicy()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: boolean getDocStoreIsCompoundFile()> -> _SOURCES_
<org.apache.lucene.store.RAMInputStream: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.search.MultiSearcher: org.apache.lucene.search.Searchable[] getSearchables()> -> _SOURCES_
<org.apache.lucene.search.RangeQuery: org.apache.lucene.index.Term getUpperTerm()> -> _SOURCES_
<org.apache.lucene.search.PrefixQuery: org.apache.lucene.index.Term getPrefix()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: boolean getAllowLeadingWildcard()> -> _SOURCES_
<org.apache.lucene.search.SortField: org.apache.lucene.search.SortComparatorSource getFactory()> -> _SOURCES_
<org.apache.lucene.store.BufferedIndexInput: void setBufferSize(int)> -> _SINKS_
<org.apache.lucene.index.SegmentInfos: java.io.PrintStream getInfoStream()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: int getDefaultGenLookahedCount()> -> _SOURCES_
<org.apache.lucene.index.LogMergePolicy: boolean getUseCompoundDocStore()> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: byte[] getBytes(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$ByteParser)> -> _SOURCES_
<org.apache.lucene.search.Query: void setBoost(float)> -> _SINKS_
<org.apache.lucene.index.SegmentInfos: long getLastGeneration()> -> _SOURCES_
<org.apache.lucene.store.IndexOutput: void writeInt(int)> -> _SINKS_
<org.apache.lucene.index.DefaultSkipListReader: void setLastSkipData(int)> -> _SINKS_
<org.apache.lucene.index.SegmentInfo: void write(org.apache.lucene.store.IndexOutput)> -> _SINKS_
<org.apache.lucene.search.payloads.PayloadSpanUtil: void getPayloads(java.util.Collection,org.apache.lucene.search.spans.SpanQuery)> -> _SOURCES_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfo,org.apache.lucene.index.SegmentInfos,boolean,boolean,int)> -> _SOURCES_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFuzzyQuery(java.lang.String,java.lang.String,float)> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: float[] getFloats(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.FieldCache$FloatParser)> -> _SOURCES_
<org.apache.lucene.index.MultipleTermPositions: byte[] getPayload(byte[],int)> -> _SOURCES_
<org.apache.lucene.search.ParallelMultiSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> -> _SINKS_
<org.apache.lucene.index.MultiReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> -> _SOURCES_
<org.apache.lucene.index.ParallelArrayTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: int getSegmentCount()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getPrefixQuery(java.lang.String,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: java.io.PrintStream getInfoStream()> -> _SOURCES_
<org.apache.lucene.index.DefaultSkipListWriter: void setSkipData(int,boolean,int)> -> _SINKS_
<org.apache.lucene.search.PhraseQuery: org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: void setDefaultGenLookaheadCount(int)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.List)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getWildcardQuery(java.lang.String,java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.Query: float getBoost()> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: org.apache.lucene.index.TermInfo get(org.apache.lucene.index.Term,boolean)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: boolean getHasProx()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: void setDefaultGenFileRetryPauseMsec(int)> -> _SINKS_
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File,boolean)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setDefaultWriteLockTimeout(long)> -> _SINKS_
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,byte)> -> _SINKS_
<org.apache.lucene.search.ComplexExplanation: void setMatch(java.lang.Boolean)> -> _SINKS_
<org.apache.lucene.util.cache.SimpleMapCache: org.apache.lucene.util.cache.Cache getSynchronizedCache()> -> _SOURCES_
<org.apache.lucene.search.Explanation: void setValue(float)> -> _SINKS_
<org.apache.lucene.analysis.standard.StandardAnalyzer: boolean getDefaultReplaceInvalidAcronym()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: boolean getLowercaseExpandedTerms()> -> _SOURCES_
<org.apache.lucene.search.RemoteSearchable: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: int getMaxBufferedDocs()> -> _SOURCES_
<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)> -> _SOURCES_
<org.apache.lucene.search.TopDocs: float getMaxScore()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setFlags(int)> -> _SINKS_
<org.apache.lucene.util.BitVector: void set(int)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.IndexReader: long getCurrentVersion(java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.FilterIndexReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getMaxBufferedDocs()> -> _SOURCES_
<org.apache.lucene.index.TermInfosReader: void setIndexDivisor(int)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: int getMaxFieldLength()> -> _SOURCES_
<org.apache.lucene.index.MultiLevelSkipListReader: void setLastSkipData(int)> -> _SINKS_
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.spans.SpanQuery getInclude()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)> -> _SINKS_
<org.apache.lucene.index.SegmentInfos: void setDefaultGenFileRetryCount(int)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: int getNumBufferedDeleteTerms()> -> _SOURCES_
<org.apache.lucene.search.FilterManager: void setCleanThreadSleepTime(long)> -> _SINKS_
<org.apache.lucene.store.LockVerifyServer: java.lang.String getTime(long)> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardTokenizer: void setReplaceInvalidAcronym(boolean)> -> _SINKS_
<org.apache.lucene.index.SegmentInfo: void setDocStoreIsCompoundFile(boolean)> -> _SINKS_
<org.apache.lucene.analysis.PerFieldAnalyzerWrapper: int getPositionIncrementGap(java.lang.String)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setPhraseSlop(int)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void setInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.document.AbstractField: int getBinaryLength()> -> _SOURCES_
<org.apache.lucene.index.SegmentInfo: void setDelCount(int)> -> _SINKS_
<org.apache.lucene.search.CachingWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.index.LogByteSizeMergePolicy: void setMaxMergeMB(double)> -> _SINKS_
<org.apache.lucene.index.FilterIndexReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.search.function.DocValues: java.lang.Object getInnerArray()> -> _SOURCES_
<org.apache.lucene.search.SpanFilterResult: java.util.BitSet getBits()> -> _SOURCES_
<org.apache.lucene.index.MultiLevelSkipListWriter: long writeSkip(org.apache.lucene.store.IndexOutput)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: java.io.PrintStream getDefaultInfoStream()> -> _SOURCES_
<org.apache.lucene.search.Sort: void setSort(java.lang.String[])> -> _SINKS_
<org.apache.lucene.search.spans.NearSpansUnordered: java.util.Collection getPayload()> -> _SOURCES_
<org.apache.lucene.index.FilterIndexReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setMaxMergeDocs(int)> -> _SINKS_
<org.apache.lucene.search.spans.SpanWeight: org.apache.lucene.search.Query getQuery()> -> _SOURCES_
<org.apache.lucene.search.MultiSearcherThread: java.io.IOException getIOException()> -> _SOURCES_
<org.apache.lucene.document.Document: void setBoost(float)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.index.TermVectorsReader: long[] readTvfPointers(int)> -> _SOURCES_
<org.apache.lucene.index.SegmentMergeInfo: org.apache.lucene.index.TermPositions getPositions()> -> _SOURCES_
<org.apache.lucene.index.TermVectorEntry: void setOffsets(org.apache.lucene.index.TermVectorOffsetInfo[])> -> _SINKS_
<org.apache.lucene.index.IndexReader: int getTermInfosIndexDivisor()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setDefaultInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document)> -> _SINKS_
<org.apache.lucene.index.TermVectorEntry: int[] getPositions()> -> _SOURCES_
<org.apache.lucene.search.ExtendedFieldCacheImpl: double[] getDoubles(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.search.ExtendedFieldCache$DoubleParser)> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: void setInfoStream(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.search.QueryTermVector: int[] getTermFrequencies()> -> _SOURCES_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.SegmentInfos: long getVersion()> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: void setLowercaseExpandedTerms(boolean)> -> _SINKS_
<org.apache.lucene.queryParser.QueryParser: void setRangeCollator(java.text.Collator)> -> _SINKS_
<org.apache.lucene.search.spans.SpanOrQuery: java.lang.String getField()> -> _SOURCES_
<org.apache.lucene.index.SegmentTermPositions: int getPayloadLength()> -> _SOURCES_
<org.apache.lucene.search.SortField: java.util.Locale getLocale()> -> _SOURCES_
<org.apache.lucene.analysis.CharArraySet: int getSlot(char[],int,int)> -> _SOURCES_
<org.apache.lucene.analysis.Token: int getPositionIncrement()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextExternalMerge()> -> _SOURCES_
<org.apache.lucene.index.ConcurrentMergeScheduler: int getMergeThreadPriority()> -> _SOURCES_
<org.apache.lucene.index.DocumentsWriter: void setMaxFieldLength(int)> -> _SINKS_
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> -> _SINKS_
<org.apache.lucene.search.Searcher: org.apache.lucene.search.Similarity getSimilarity()> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setMergeFactor(int)> -> _SINKS_
<org.apache.lucene.index.DocumentsWriter: char[] getCharBlock()> -> _SOURCES_
<org.apache.lucene.analysis.Token: void setPayload(org.apache.lucene.index.Payload)> -> _SINKS_
<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.Term)> -> _SINKS_
<org.apache.lucene.index.IndexModifier: void setMaxBufferedDocs(int)> -> _SINKS_
<org.apache.lucene.index.LogByteSizeMergePolicy: double getMinMergeMB()> -> _SOURCES_
<org.apache.lucene.search.function.DocValues: float getMaxValue()> -> _SOURCES_
<org.apache.lucene.index.LogMergePolicy: int getMergeFactor()> -> _SOURCES_
<org.apache.lucene.index.ParallelReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)> -> _SOURCES_
<org.apache.lucene.queryParser.FastCharStream: int getColumn()> -> _SOURCES_
<org.apache.lucene.search.Similarity: void setDefault(org.apache.lucene.search.Similarity)> -> _SINKS_
<org.apache.lucene.store.IndexOutput: void writeChars(char[],int,int)> -> _SINKS_
<org.apache.lucene.document.AbstractField: void setBoost(float)> -> _SINKS_
<org.apache.lucene.store.NativeFSLockFactory: void setLockDir(java.io.File)> -> _SINKS_
<org.apache.lucene.index.IndexFileNames: java.lang.String fileNameFromGeneration(java.lang.String,java.lang.String,long)> -> _SANITIZERS_
<org.apache.lucene.index.IndexWriter: void setSimilarity(org.apache.lucene.search.Similarity)> -> _SINKS_
<org.apache.lucene.search.Sort: void setSort(org.apache.lucene.search.SortField)> -> _SINKS_
<org.apache.lucene.document.Field: void setValue(java.io.Reader)> -> _SINKS_
<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo,int,boolean)> -> _SOURCES_
<org.apache.lucene.search.spans.NearSpansOrdered: java.util.Collection getPayload()> -> _SOURCES_
<org.apache.lucene.search.MultiSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> -> _SINKS_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query parse(java.lang.String,java.lang.String[],org.apache.lucene.search.BooleanClause$Occur[],org.apache.lucene.analysis.Analyzer)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void setMaxFieldLength(int)> -> _SINKS_
<org.apache.lucene.index.SegmentTermDocs: int readNoTf(int[],int[],int)> -> _SOURCES_
<org.apache.lucene.store.ChecksumIndexOutput: long getFilePointer()> -> _SOURCES_
<org.apache.lucene.search.function.FieldScoreQuery: org.apache.lucene.search.function.ValueSource getValueSource(java.lang.String,org.apache.lucene.search.function.FieldScoreQuery$Type)> -> _SOURCES_
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query getFieldQuery(java.lang.String,java.lang.String,int)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setMessageID(java.io.PrintStream)> -> _SINKS_
<org.apache.lucene.search.FuzzyQuery: float getMinSimilarity()> -> _SOURCES_
<org.apache.lucene.search.Filter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)> -> _SOURCES_
<org.apache.lucene.search.Hit: org.apache.lucene.document.Document getDocument()> -> _SOURCES_
<org.apache.lucene.analysis.CharArraySet: int getHashCode(char[],int,int)> -> _SOURCES_
<org.apache.lucene.index.FilterIndexReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)> -> _SOURCES_
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query getBooleanQuery(java.util.Vector,boolean)> -> _SOURCES_
<org.apache.lucene.index.FieldsWriter: void setFieldsStream(org.apache.lucene.store.IndexOutput)> -> _SINKS_
<org.apache.lucene.store.ChecksumIndexOutput: void writeByte(byte)> -> _SINKS_
<org.apache.lucene.index.DefaultSkipListReader: long getProxPointer()> -> _SOURCES_
<org.apache.lucene.index.FieldInfos: void write(org.apache.lucene.store.Directory,java.lang.String)> -> _SINKS_
<org.apache.lucene.index.IndexWriter: void setMergePolicy(org.apache.lucene.index.MergePolicy)> -> _SINKS_
<org.apache.lucene.index.IndexModifier: void createIndexReader()> -> _SOURCES_
<org.apache.lucene.search.FieldCacheImpl: byte[] getBytes(org.apache.lucene.index.IndexReader,java.lang.String)> -> _SOURCES_
<org.apache.lucene.index.IndexWriter: void setUseCompoundFile(boolean)> -> _SINKS_
<org.apache.lucene.search.PhraseQuery: int[] getPositions()> -> _SOURCES_
<org.apache.lucene.index.MultiSegmentReader: int getTermInfosIndexDivisor()> -> _SOURCES_
<org.apache.lucene.analysis.standard.StandardTokenizerImpl: int getNextToken()> -> _SOURCES_
<org.apache.lucene.index.TermVectorOffsetInfo: int getEndOffset()> -> _SOURCES_
<org.apache.lucene.util.CloseableThreadLocal: java.lang.Object get()> -> _SOURCES_
<org.apache.lucene.search.BooleanQuery: void setAllowDocsOutOfOrder(boolean)> -> _SINKS_
<org.apache.lucene.index.TermInfosWriter: void add(int,byte[],int,org.apache.lucene.index.TermInfo)> -> _SINKS_
