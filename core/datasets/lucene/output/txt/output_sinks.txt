<org.apache.lucene.index.SegmentInfo: void setHasProx(boolean)> 
<org.apache.lucene.index.DocumentsWriter: void updateFlushedDocCount(int)> 
<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int)> 
<org.apache.lucene.index.SegmentInfos: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.queryParser.QueryParser: void setLocale(java.util.Locale)> 
<org.apache.lucene.search.TimeLimitedCollector: void setGreedy(boolean)> 
<org.apache.lucene.queryParser.QueryParser: void setFuzzyMinSim(float)> 
<org.apache.lucene.index.DocInverter: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.document.AbstractField: void setOmitTf(boolean)> 
<org.apache.lucene.index.CheckIndex: void msg(java.lang.String)> 
<org.apache.lucene.util.OpenBitSet: void set(long,long)> 
<org.apache.lucene.index.DocFieldConsumers: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.index.TermVectorEntry: void setFrequency(int)> 
<org.apache.lucene.analysis.PorterStemmer: void setto(java.lang.String)> 
<org.apache.lucene.index.ByteSliceWriter: void writeVInt(int)> 
<org.apache.lucene.store.RAMFile: void setLength(long)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: void setMaxTokenLength(int)> 
<org.apache.lucene.index.PositionBasedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.index.IndexWriter: void setMergeScheduler(org.apache.lucene.index.MergeScheduler)> 
<org.apache.lucene.index.DocumentsWriter: void setRAMBufferSizeMB(double)> 
<org.apache.lucene.analysis.Token: void setTermLength(int)> 
<org.apache.lucene.search.Query: void setBoost(float)> 
<org.apache.lucene.index.IndexWriter: void setDefaultWriteLockTimeout(long)> 
<org.apache.lucene.index.IndexWriter: void setMergeFactor(int)> 
<org.apache.lucene.analysis.Token: void setPayload(org.apache.lucene.index.Payload)> 
<org.apache.lucene.search.Similarity: void setDefault(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.store.NativeFSLockFactory: void setLockDir(java.io.File)> 
<org.apache.lucene.index.FieldInfos: void write(org.apache.lucene.store.Directory,java.lang.String)> 
<org.apache.lucene.search.Sort: void setSort(java.lang.String)> 
<org.apache.lucene.index.CompoundFileWriter: void copyFile(org.apache.lucene.index.CompoundFileWriter$FileEntry,org.apache.lucene.store.IndexOutput,byte[])> 
<org.apache.lucene.analysis.Token: void setTermText(java.lang.String)> 
<org.apache.lucene.search.PhraseQuery: void setSlop(int)> 
<org.apache.lucene.index.TermVectorOffsetInfo: void setEndOffset(int)> 
<org.apache.lucene.index.ByteSliceReader: long writeTo(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.store.ChecksumIndexOutput: void writeBytes(byte[],int,int)> 
<org.apache.lucene.queryParser.QueryParser: void setDefaultOperator(org.apache.lucene.queryParser.QueryParser$Operator)> 
<org.apache.lucene.search.Explanation: void setDescription(java.lang.String)> 
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term)> 
<org.apache.lucene.index.TermInfo: void set(org.apache.lucene.index.TermInfo)> 
<org.apache.lucene.search.RemoteSearchable: void main(java.lang.String[])> 
<org.apache.lucene.index.DefaultSkipListWriter: void setSkipData(int,boolean,int)> 
<org.apache.lucene.analysis.Token: void setFlags(int)> 
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)> 
<org.apache.lucene.index.DocumentsWriter: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.store.IndexOutput: void writeChars(char[],int,int)> 
<org.apache.lucene.document.AbstractField: void setBoost(float)> 
<org.apache.lucene.index.TermInfosWriter: void add(int,byte[],int,org.apache.lucene.index.TermInfo)> 
<org.apache.lucene.util.BitVector: void write(org.apache.lucene.store.Directory,java.lang.String)> 
<org.apache.lucene.queryParser.QueryParser: void setFuzzyPrefixLength(int)> 
<org.apache.lucene.document.AbstractField: void setStoreTermVector(org.apache.lucene.document.Field$TermVector)> 
<org.apache.lucene.index.TermVectorOffsetInfo: void setStartOffset(int)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: void setInput(java.io.Reader)> 
<org.apache.lucene.index.IndexFileDeleter: void message(java.lang.String)> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setReplaceInvalidAcronym(boolean)> 
<org.apache.lucene.index.IndexReader: void setTermInfosIndexDivisor(int)> 
<org.apache.lucene.index.FieldInfo: void update(boolean,boolean,boolean,boolean,boolean,boolean,boolean)> 
<org.apache.lucene.index.Term: void set(java.lang.String,java.lang.String)> 
<org.apache.lucene.index.FieldInfo: void update(org.apache.lucene.index.FieldInfo)> 
<org.apache.lucene.store.RAMOutputStream: void writeTo(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.store.IndexOutput: void writeChars(java.lang.String,int,int)> 
<org.apache.lucene.index.TermsHashPerField: void writeVInt(int,int)> 
<org.apache.lucene.search.IndexSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.index.FieldSortedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.index.FieldsWriter: void flushDocument(int,org.apache.lucene.store.RAMOutputStream)> 
<org.apache.lucene.analysis.StopFilter: void setEnablePositionIncrementsDefault(boolean)> 
<org.apache.lucene.search.BooleanQuery: void setMaxClauseCount(int)> 
<org.apache.lucene.store.IndexOutput: void writeLong(long)> 
<org.apache.lucene.store.BufferedIndexInput: void setBufferSize(int)> 
<org.apache.lucene.index.SegmentInfos: void setDefaultGenLookaheadCount(int)> 
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,byte)> 
<org.apache.lucene.search.RemoteSearchable: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.index.SegmentInfos: void setDefaultGenFileRetryCount(int)> 
<org.apache.lucene.index.IndexWriter: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.document.Document: void setBoost(float)> 
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document)> 
<org.apache.lucene.search.Sort: void setSort(org.apache.lucene.search.SortField)> 
<org.apache.lucene.queryParser.MultiFieldQueryParser: org.apache.lucene.search.Query parse(java.lang.String,java.lang.String[],org.apache.lucene.search.BooleanClause$Occur[],org.apache.lucene.analysis.Analyzer)> 
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMergeThreadPriority(int)> 
<org.apache.lucene.index.DocumentsWriter: void setMaxBufferedDocs(int)> 
<org.apache.lucene.index.Payload: void setData(byte[])> 
<org.apache.lucene.index.DocumentsWriter: void setSimilarity(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.store.FSDirectory: void renameFile(java.lang.String,java.lang.String)> 
<org.apache.lucene.document.Field: void setValue(org.apache.lucene.analysis.TokenStream)> 
<org.apache.lucene.index.InvertedDocConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.search.Sort: void setSort(java.lang.String,boolean)> 
<org.apache.lucene.index.SegmentInfos: void prepareCommit(org.apache.lucene.store.Directory)> 
<org.apache.lucene.store.IndexOutput: void writeString(java.lang.String)> 
<org.apache.lucene.index.IndexModifier: void setMaxFieldLength(int)> 
<org.apache.lucene.index.IndexModifier: void setMergeFactor(int)> 
<org.apache.lucene.index.LogByteSizeMergePolicy: void setMinMergeMB(double)> 
<org.apache.lucene.index.SegmentReader: void setSegmentInfo(org.apache.lucene.index.SegmentInfo)> 
<org.apache.lucene.store.IndexOutput: void writeVLong(long)> 
<org.apache.lucene.index.LogMergePolicy: void setUseCompoundFile(boolean)> 
<org.apache.lucene.search.TopDocs: void setMaxScore(float)> 
<org.apache.lucene.queryParser.QueryParser: void setDateResolution(java.lang.String,org.apache.lucene.document.DateTools$Resolution)> 
<org.apache.lucene.index.IndexFileDeleter: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.index.DirectoryIndexReader: void setDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)> 
<org.apache.lucene.analysis.StopFilter: void setEnablePositionIncrements(boolean)> 
<org.apache.lucene.document.Field: void setValue(java.lang.String)> 
<org.apache.lucene.index.DocumentsWriter: void setMaxBufferedDeleteTerms(int)> 
<org.apache.lucene.index.TermsHashConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.store.RAMFile: void setLastModified(long)> 
<org.apache.lucene.index.IndexWriter: void setRAMBufferSizeMB(double)> 
<org.apache.lucene.store.IndexOutput: void writeInt(int)> 
<org.apache.lucene.index.ParallelArrayTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.index.SegmentInfos: void setDefaultGenFileRetryPauseMsec(int)> 
<org.apache.lucene.search.Explanation: void setValue(float)> 
<org.apache.lucene.util.BitVector: void set(int)> 
<org.apache.lucene.index.TermInfosReader: void setIndexDivisor(int)> 
<org.apache.lucene.analysis.standard.StandardTokenizer: void setReplaceInvalidAcronym(boolean)> 
<org.apache.lucene.index.DocumentsWriter: void setMaxFieldLength(int)> 
<org.apache.lucene.index.IndexModifier: void setMaxBufferedDocs(int)> 
<org.apache.lucene.index.IndexWriter: void setMessageID(java.io.PrintStream)> 
<org.apache.lucene.index.IndexWriter: void setUseCompoundFile(boolean)> 
<org.apache.lucene.search.Searcher: void setSimilarity(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.queryParser.QueryParser: void setUseOldRangeQuery(boolean)> 
<org.apache.lucene.index.SortedTermVectorMapper: void setExpectations(java.lang.String,int,boolean,boolean)> 
<org.apache.lucene.search.WildcardQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.TermsHash: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.store.SimpleFSLockFactory: void setLockDir(java.io.File)> 
<org.apache.lucene.index.SegmentInfo: void setNumFields(int)> 
<org.apache.lucene.queryParser.QueryParser: org.apache.lucene.search.Query parse(java.lang.String)> 
<org.apache.lucene.index.SegmentInfo: void setDocStoreOffset(int)> 
<org.apache.lucene.analysis.Token: void setStartOffset(int)> 
<org.apache.lucene.index.IndexWriter: void setWriteLockTimeout(long)> 
<org.apache.lucene.index.IndexWriter: void message(java.lang.String)> 
<org.apache.lucene.store.IndexOutput: void writeVInt(int)> 
<org.apache.lucene.document.Field: void setValue(byte[])> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setMaxTokenLength(int)> 
<org.apache.lucene.store.LockFactory: void setLockPrefix(java.lang.String)> 
<org.apache.lucene.analysis.Token: void setTermBuffer(char[],int,int)> 
<org.apache.lucene.analysis.Token: void setEndOffset(int)> 
<org.apache.lucene.index.FieldInfos: void write(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.search.function.CustomScoreQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.search.ComplexExplanation: void setMatch(java.lang.Boolean)> 
<org.apache.lucene.index.SegmentInfo: void setDocStoreIsCompoundFile(boolean)> 
<org.apache.lucene.index.LogByteSizeMergePolicy: void setMaxMergeMB(double)> 
<org.apache.lucene.index.IndexWriter: void setDefaultInfoStream(java.io.PrintStream)> 
<org.apache.lucene.search.MultiSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.index.IndexWriter: void setMaxFieldLength(int)> 
<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.TermBuffer)> 
<org.apache.lucene.store.IndexOutput: void setLength(long)> 
<org.apache.lucene.index.TermVectorMapper: void setDocumentNumber(int)> 
<org.apache.lucene.index.IndexReader: void main(java.lang.String[])> 
<org.apache.lucene.util.OpenBitSet: void setNumWords(int)> 
<org.apache.lucene.search.BooleanQuery: void setMinimumNumberShouldMatch(int)> 
<org.apache.lucene.util.OpenBitSet: void set(long)> 
<org.apache.lucene.analysis.standard.StandardAnalyzer: void setDefaultReplaceInvalidAcronym(boolean)> 
<org.apache.lucene.search.FilteredQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.analysis.Analyzer: void setPreviousTokenStream(java.lang.Object)> 
<org.apache.lucene.index.DocumentsWriter: void setFlushedDocCount(int)> 
<org.apache.lucene.index.SegmentReader: void setTermInfosIndexDivisor(int)> 
<org.apache.lucene.index.DocFieldProcessorPerThread: void trimFields(org.apache.lucene.index.DocumentsWriter$FlushState)> 
<org.apache.lucene.search.MultiPhraseQuery: void setSlop(int)> 
<org.apache.lucene.search.ParallelMultiSearcher: org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)> 
<org.apache.lucene.queryParser.QueryParser: void setPhraseSlop(int)> 
<org.apache.lucene.queryParser.QueryParser: void setLowercaseExpandedTerms(boolean)> 
<org.apache.lucene.document.Field: void setValue(java.io.Reader)> 
<org.apache.lucene.search.BooleanQuery: void setAllowDocsOutOfOrder(boolean)> 
<org.apache.lucene.index.IndexWriter: void setMaxBufferedDocs(int)> 
<org.apache.lucene.index.TermsHashPerField: void writeBytes(int,byte[],int,int)> 
<org.apache.lucene.document.Field: void setValue(byte[],int,int)> 
<org.apache.lucene.store.FSDirectory: void setDisableLocks(boolean)> 
<org.apache.lucene.search.spans.SpanFirstQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.queryParser.QueryParser: void setDateResolution(org.apache.lucene.document.DateTools$Resolution)> 
<org.apache.lucene.index.LogDocMergePolicy: void setMinMergeDocs(int)> 
<org.apache.lucene.index.IndexModifier: void setUseCompoundFile(boolean)> 
<org.apache.lucene.index.LogMergePolicy: void setMaxMergeDocs(int)> 
<org.apache.lucene.analysis.Token: void setType(java.lang.String)> 
<org.apache.lucene.index.IndexWriter: void setMaxBufferedDeleteTerms(int)> 
<org.apache.lucene.index.IndexModifier: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,float)> 
<org.apache.lucene.search.FilterManager: void setCacheSize(int)> 
<org.apache.lucene.analysis.Token: void setTermBuffer(java.lang.String)> 
<org.apache.lucene.index.DefaultSkipListReader: void setLastSkipData(int)> 
<org.apache.lucene.index.SegmentInfo: void write(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.index.MultiLevelSkipListReader: void setLastSkipData(int)> 
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)> 
<org.apache.lucene.search.FilterManager: void setCleanThreadSleepTime(long)> 
<org.apache.lucene.index.SegmentInfo: void setDelCount(int)> 
<org.apache.lucene.index.MultiLevelSkipListWriter: long writeSkip(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.search.Sort: void setSort(java.lang.String[])> 
<org.apache.lucene.index.TermVectorEntry: void setOffsets(org.apache.lucene.index.TermVectorOffsetInfo[])> 
<org.apache.lucene.queryParser.QueryParser: void setRangeCollator(java.text.Collator)> 
<org.apache.lucene.search.spans.SpanNotQuery: org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)> 
<org.apache.lucene.index.TermBuffer: void set(org.apache.lucene.index.Term)> 
<org.apache.lucene.index.IndexWriter: void setSimilarity(org.apache.lucene.search.Similarity)> 
<org.apache.lucene.index.FieldsWriter: void setFieldsStream(org.apache.lucene.store.IndexOutput)> 
<org.apache.lucene.index.IndexWriter: void setMaxSyncPauseSeconds(double)> 
<org.apache.lucene.index.DocFieldConsumer: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.analysis.Token: void setPositionIncrement(int)> 
<org.apache.lucene.queryParser.QueryParserTokenManager: void setDebugStream(java.io.PrintStream)> 
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMaxThreadCount(int)> 
<org.apache.lucene.search.BooleanClause: void setOccur(org.apache.lucene.search.BooleanClause$Occur)> 
<org.apache.lucene.index.NormsWriter: void setFieldInfos(org.apache.lucene.index.FieldInfos)> 
<org.apache.lucene.document.AbstractField: void setOmitNorms(boolean)> 
<org.apache.lucene.search.BooleanClause: void setQuery(org.apache.lucene.search.Query)> 
<org.apache.lucene.search.TimeLimitedCollector: void setResolution(long)> 
<org.apache.lucene.index.TermInfo: void set(int,long,long,int)> 
<org.apache.lucene.index.LogMergePolicy: void setMergeFactor(int)> 
<org.apache.lucene.search.FieldDocSortedHitQueue: void setFields(org.apache.lucene.search.SortField[])> 
<org.apache.lucene.index.LogMergePolicy: void setUseCompoundDocStore(boolean)> 
<org.apache.lucene.queryParser.QueryParser: void setAllowLeadingWildcard(boolean)> 
<org.apache.lucene.index.CheckIndex: void setInfoStream(java.io.PrintStream)> 
<org.apache.lucene.search.BooleanQuery: void setUseScorer14(boolean)> 
<org.apache.lucene.index.Payload: void setData(byte[],int,int)> 
<org.apache.lucene.util.OpenBitSet: void setBits(long[])> 
<org.apache.lucene.search.FilteredTermEnum: void setEnum(org.apache.lucene.index.TermEnum)> 
<org.apache.lucene.index.IndexWriter: void setTermIndexInterval(int)> 
<org.apache.lucene.search.function.CustomScoreQuery: void setStrict(boolean)> 
<org.apache.lucene.index.SegmentInfos: void updateGeneration(org.apache.lucene.index.SegmentInfos)> 
<org.apache.lucene.index.MultiSegmentReader: void setTermInfosIndexDivisor(int)> 
<org.apache.lucene.queryParser.QueryParser: void setEnablePositionIncrements(boolean)> 
<org.apache.lucene.index.TermVectorEntry: void setPositions(int[])> 
<org.apache.lucene.analysis.Token: void setTermBuffer(java.lang.String,int,int)> 
<org.apache.lucene.index.SegmentInfo: void setUseCompoundFile(boolean)> 
<org.apache.lucene.search.Sort: void setSort(org.apache.lucene.search.SortField[])> 
<org.apache.lucene.index.TermInfosWriter: void writeTerm(int,byte[],int)> 
<org.apache.lucene.index.IndexWriter: void setMaxMergeDocs(int)> 
<org.apache.lucene.store.ChecksumIndexOutput: void writeByte(byte)> 
<org.apache.lucene.index.IndexWriter: void setMergePolicy(org.apache.lucene.index.MergePolicy)> 
