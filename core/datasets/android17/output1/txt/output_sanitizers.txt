<android.webkit.WebViewClassic: void replaceTextfieldText(int,int,java.lang.String,int,int)> 
<java.lang.String: java.lang.String replace(char,char)> 
<gov.nist.javax.sip.header.Priority: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ExtensionHeaderImpl: java.lang.String encode()> 
<org.apache.james.mime4j.field.contenttype.parser.ParseException: java.lang.String add_escapes(java.lang.String)> 
<gov.nist.javax.sip.header.Server: java.lang.String encodeBody()> 
<org.apache.commons.codec.net.URLCodec: byte[] encode(byte[])> 
<gov.nist.javax.sip.header.Credentials: java.lang.String encode()> 
<android.net.UrlQuerySanitizer: void addSanitizedEntry(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.Expires: java.lang.String encodeBody()> 
<org.apache.harmony.security.asn1.ASN1Any: void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> 
<org.apache.james.mime4j.field.address.parser.ParseException: java.lang.String add_escapes(java.lang.String)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: java.lang.String encodeBody()> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressDisplayName(java.lang.String)> 
<gov.nist.javax.sip.header.Require: java.lang.String encodeBody()> 
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)> 
<gov.nist.javax.sip.header.Route: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<android.inputmethodservice.InputMethodService: void onExtractedReplaceText(int,int,java.lang.CharSequence)> 
<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)> 
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.ContentLanguage: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.To: java.lang.String encode()> 
<org.apache.harmony.security.asn1.ASN1Implicit: void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)> 
<gov.nist.javax.sip.header.ims.PChargingVector: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ReplyTo: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.AllowEvents: java.lang.String encodeBody()> 
<org.apache.commons.codec.language.Soundex: java.lang.String encode(java.lang.String)> 
<org.apache.http.client.utils.URLEncodedUtils: boolean isEncoded(org.apache.http.HttpEntity)> 
<java.nio.charset.CharsetDecoderICU: void implReplaceWith(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PAssertedIdentity: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.Contact: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<org.apache.commons.codec.binary.Base64: byte[] encode(byte[])> 
<gov.nist.javax.sip.header.CSeq: java.lang.String encode()> 
<gov.nist.javax.sip.header.Via: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String encode()> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeHeaderParameter(java.lang.String,java.lang.String)> 
<net.oauth.OAuth: java.lang.String percentEncode(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.apache.james.mime4j.field.contenttype.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)> 
<org.apache.james.mime4j.field.address.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)> 
<org.apache.james.mime4j.decoder.DecoderUtil: java.lang.String decodeEncodedWords(java.lang.String)> 
<android.speech.srec.UlawEncoderInputStream: void encode(byte[],int,byte[],int,int,int)> 
<android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String stripPathForLogs(java.lang.String)> 
<org.apache.harmony.security.asn1.DerOutputStream: void encodeValueCollection(org.apache.harmony.security.asn1.ASN1ValueCollection)> 
<android.net.Uri: java.lang.String encode(java.lang.String)> 
<gov.nist.javax.sip.header.ContentType: java.lang.String encodeBody()> 
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],int,int,java.lang.String)> 
<gov.nist.javax.sip.header.SIPHeader: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<libcore.io.Base64: java.lang.String encode(byte[])> 
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> 
<org.apache.xml.serializer.dom3.LSSerializerImpl: java.lang.String getPathWithoutEscapes(java.lang.String)> 
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> 
<gov.nist.javax.sip.header.SIPHeader: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.Organization: java.lang.String encodeBody()> 
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder replace(int,int,java.lang.String)> 
<org.apache.james.mime4j.codec.EncoderUtil: boolean hasToBeEncoded(java.lang.String,int)> 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String encodeMessage()> 
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encode(byte[])> 
<org.apache.james.mime4j.codec.EncoderUtil: byte[] encode(java.lang.String,java.nio.charset.Charset)> 
<gov.nist.javax.sip.address.AddressImpl: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.address.UserInfo: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.Supported: java.lang.String encode()> 
<gov.nist.javax.sip.header.StatusLine: java.lang.String encode()> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String encodeBase64(byte[])> 
<org.apache.harmony.security.asn1.ASN1Enumerated: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<gov.nist.javax.sip.header.AcceptEncoding: java.lang.String encodeBody()> 
<org.apache.harmony.security.asn1.DerOutputStream: void encodeSequenceOf(org.apache.harmony.security.asn1.ASN1SequenceOf)> 
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getEffectiveValueSanitizer(java.lang.String)> 
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[],boolean)> 
<gov.nist.javax.sip.header.ReplyTo: java.lang.String encode()> 
<org.apache.commons.codec.binary.Hex: byte[] encode(byte[])> 
<org.apache.james.mime4j.codec.EncoderUtil: int bEncodedLength(byte[])> 
<libcore.icu.NativeNormalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)> 
<gov.nist.core.Host: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage)> 
<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)> 
<org.apache.harmony.security.asn1.DerOutputStream: void encodeSetOf(org.apache.harmony.security.asn1.ASN1SetOf)> 
<gov.nist.javax.sip.address.GenericURI: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeBytes(byte[],int,int)> 
<gov.nist.javax.sip.header.SIPObject: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.address.Authority: java.lang.String encode()> 
<java.lang.CaseMapper: java.lang.String toUpperCase(java.util.Locale,java.lang.String,char[],int,int)> 
<gov.nist.core.NameValueList: java.lang.String encode()> 
<gov.nist.javax.sip.header.ErrorInfo: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ims.PUserDatabase: java.lang.String encodeBody()> 
<org.apache.james.mime4j.field.datetime.parser.ParseException: java.lang.String add_escapes(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PAssertedService: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.CallID: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.RecordRoute: java.lang.String encodeBody()> 
<org.apache.commons.codec.language.Metaphone: java.lang.String encode(java.lang.String)> 
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getValueSanitizer(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.CallIdentifier: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.apache.commons.codec.language.RefinedSoundex: java.lang.String encode(java.lang.String)> 
<gov.nist.javax.sip.header.Accept: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String)> 
<gov.nist.javax.sip.header.Allow: java.lang.String encodeBody()> 
<java.lang.CaseMapper: java.lang.String toLowerCase(java.util.Locale,java.lang.String,char[],int,int)> 
<gov.nist.javax.sip.header.To: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.RetryAfter: java.lang.String encodeBody()> 
<org.apache.commons.codec.language.SoundexUtils: java.lang.String clean(java.lang.String)> 
<gov.nist.javax.sip.header.RSeq: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.RequestLine: java.lang.String encode()> 
<gov.nist.javax.sip.header.Event: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ims.PMediaAuthorization: java.lang.String encodeBody()> 
<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String,java.nio.charset.Charset,boolean)> 
<org.apache.james.mime4j.decoder.DecoderUtil: java.lang.String decodeEncodedWord(java.lang.String,int,int)> 
<gov.nist.javax.sip.address.AddressImpl: java.lang.String encode()> 
<gov.nist.javax.sip.header.ims.PPreferredIdentity: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.From: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<android.net.sip.SimpleSessionDescription: java.lang.String encode()> 
<gov.nist.javax.sip.header.TimeStamp: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ContentLength: java.lang.String encodeBody()> 
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.Supported: java.lang.String encodeBody()> 
<org.apache.commons.codec.language.DoubleMetaphone: java.lang.String encode(java.lang.String)> 
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)> 
<gov.nist.javax.sip.header.UserAgent: java.lang.String encodeBody()> 
<android.text.Html: java.lang.String escapeHtml(java.lang.CharSequence)> 
<android.webkit.URLUtil: java.lang.String stripAnchor(java.lang.String)> 
<gov.nist.javax.sip.header.InReplyTo: java.lang.String encodeBody()> 
<android.support.v4.app.ShareCompatJB: java.lang.String escapeHtml(java.lang.CharSequence)> 
<android.widget.AutoCompleteTextView: void replaceText(java.lang.CharSequence)> 
<gov.nist.javax.sip.header.CallInfo: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.Via: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ims.PPreferredService: java.lang.String encodeBody()> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)> 
<java.nio.charset.CharsetICU: java.nio.charset.CharsetEncoder newEncoder()> 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String encodeMessage()> 
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)> 
<gov.nist.javax.sip.header.CSeq: java.lang.String encodeBody()> 
<gov.nist.core.NameValue: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.ims.ServiceRoute: java.lang.String encodeBody()> 
<org.apache.http.impl.auth.DigestScheme: java.lang.String encode(byte[])> 
<java.nio.charset.CharsetEncoderICU: byte[] makeReplacement(java.lang.String,long)> 
<org.apache.james.mime4j.codec.EncoderUtil: int qEncodedLength(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)> 
<android.content.res.StringBlock: java.lang.String subtag(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.MediaRange: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.jivesoftware.smack.util.Base64: byte[] encode3to4(byte[],byte[],int)> 
<java.nio.charset.ModifiedUtf8: byte[] encode(java.lang.String)> 
<gov.nist.core.DuplicateNameValueList: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.apache.harmony.security.asn1.ASN1Integer: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<net.oauth.signature.OAuthSignatureMethod: java.lang.String base64Encode(byte[])> 
<java.nio.charset.ModifiedUtf8: java.lang.String decode(byte[],char[],int,int)> 
<gov.nist.core.HostPort: java.lang.String encode()> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(byte[],org.apache.james.mime4j.codec.EncoderUtil$Usage)> 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String encodeSIPHeaders()> 
<org.apache.commons.codec.binary.BinaryCodec: byte[] encode(byte[])> 
<net.oauth.OAuth: java.lang.String formEncode(java.lang.Iterable)> 
<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])> 
<gov.nist.javax.sip.header.MaxForwards: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<org.apache.http.util.EncodingUtils: java.lang.String getString(byte[],java.lang.String)> 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String encode()> 
<org.apache.harmony.security.provider.cert.X509CertPathImpl: byte[] getEncoded(java.lang.String)> 
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)> 
<org.apache.harmony.security.asn1.ASN1Implicit: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<gov.nist.javax.sip.address.GenericURI: java.lang.String encode()> 
<gov.nist.javax.sip.header.Subject: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.AcceptLanguage: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ContentEncoding: java.lang.String encodeBody()> 
<org.apache.harmony.security.asn1.DerOutputStream: void encodeExplicit(org.apache.harmony.security.asn1.ASN1Explicit)> 
<gov.nist.javax.sip.header.extensions.Join: java.lang.String encodeBody()> 
<gov.nist.javax.sip.address.UserInfo: java.lang.String encode()> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(java.lang.String,java.lang.String,int,java.nio.charset.Charset,byte[])> 
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)> 
<gov.nist.core.NameValueList: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.ProxyRequire: java.lang.String encodeBody()> 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[][] encodeIssuerX509Principals(java.security.cert.X509Certificate[])> 
<gov.nist.javax.sip.header.SIPDate: java.lang.String encode()> 
<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)> 
<gov.nist.javax.sip.header.Reason: java.lang.String encodeBody()> 
<libcore.net.UriCodec: java.lang.String encode(java.lang.String,java.nio.charset.Charset)> 
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])> 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.RAck: java.lang.String encodeBody()> 
<org.apache.james.mime4j.field.datetime.parser.TokenMgrError: java.lang.String addEscapes(java.lang.String)> 
<gov.nist.core.Host: java.lang.String encode()> 
<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)> 
<android.net.wifi.WifiSsid: android.net.wifi.WifiSsid createFromAsciiEncoded(java.lang.String)> 
<gov.nist.javax.sip.header.Expires: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.address.SipUri: java.lang.String encode()> 
<gov.nist.javax.sip.header.ReferTo: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.Protocol: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String encode()> 
<org.apache.harmony.security.asn1.ASN1UTCTime: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeQ(java.lang.String,java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,byte[])> 
<gov.nist.javax.sip.header.Accept: java.lang.String encodeBody()> 
<gov.nist.javax.sip.address.TelephoneNumber: java.lang.String encode()> 
<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String,java.lang.String)> 
<java.nio.charset.CharsetEncoderICU: void implReplaceWith(byte[])> 
<gov.nist.javax.sip.header.Server: java.lang.String encodeProduct()> 
<gov.nist.javax.sip.header.SIPIfMatch: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.SIPDateHeader: java.lang.String encodeBody()> 
<gov.nist.javax.sip.message.SIPRequest: byte[] encodeAsBytes(java.lang.String)> 
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PServedUser: java.lang.String encodeBody()> 
<java.math.BigInt: java.lang.String toAscii(java.lang.String,int)> 
<gov.nist.core.GenericObject: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.apache.commons.codec.net.QCodec: java.lang.String encode(java.lang.String,java.lang.String)> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeAddressLocalPart(java.lang.String)> 
<java.nio.charset.CharsetEncoderICU: boolean canEncode(char)> 
<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)> 
<gov.nist.javax.sip.header.Challenge: java.lang.String encode()> 
<gov.nist.javax.sip.header.extensions.ReferredBy: java.lang.String encodeBody()> 
<org.apache.commons.codec.net.BCodec: java.lang.String encode(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.RecordRoute: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.ContentLength: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.Warning: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: java.lang.String encodeBody()> 
<java.lang.RealToString: java.lang.String resultOrSideEffect(java.lang.AbstractStringBuilder,java.lang.String)> 
<org.apache.harmony.security.asn1.ASN1Boolean: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)> 
<android.content.pm.PackageParser: java.lang.String buildProcessName(java.lang.String,java.lang.String,java.lang.CharSequence,int,java.lang.String[],java.lang.String[])> 
<org.apache.harmony.security.asn1.ASN1Set: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.content.pm.VerifierDeviceIdentity: java.lang.String encodeBase32(long)> 
<gov.nist.javax.sip.header.extensions.MinSE: java.lang.String encodeBody()> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeB(byte[])> 
<gov.nist.javax.sip.header.Event: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.SubscriptionState: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String encode(java.lang.String,java.lang.String)> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeIfNecessary(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)> 
<gov.nist.javax.sip.header.Contact: java.lang.String encodeBody()> 
<java.nio.charset.ModifiedUtf8: void encode(byte[],int,java.lang.String)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeBytes(byte[],int,int,int)> 
<android.content.pm.PackageParser: java.lang.String buildClassName(java.lang.String,java.lang.CharSequence,java.lang.String[])> 
<android.telephony.PhoneNumberUtils: java.lang.String replaceUnicodeDigits(java.lang.String)> 
<gov.nist.javax.sip.message.SIPMessage: byte[] encodeAsBytes(java.lang.String)> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String escapeForXML(java.lang.String)> 
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)> 
<gov.nist.javax.sip.address.Authority: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.SIPHeader: java.lang.String encode()> 
<gov.nist.javax.sip.header.Route: java.lang.String encodeBody()> 
<org.apache.harmony.security.asn1.ASN1Explicit: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<java.nio.charset.CharsetEncoderICU: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.extensions.SessionExpires: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ims.PCalledPartyID: java.lang.String encodeBody()> 
<gov.nist.core.GenericObjectList: java.lang.String encode()> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String encodeBase64(java.lang.String)> 
<gov.nist.javax.sip.header.CSeq: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<android.inputmethodservice.ExtractEditText: void replaceText_internal(int,int,java.lang.CharSequence)> 
<gov.nist.core.HostPort: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.ExtensionHeaderImpl: java.lang.String encodeBody()> 
<org.apache.harmony.security.asn1.ASN1Any: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<gov.nist.javax.sip.header.extensions.Replaces: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.UserAgent: java.lang.String encodeProduct()> 
<org.apache.harmony.security.x501.AttributeValue: java.lang.String makeEscaped(java.lang.String)> 
<org.apache.commons.codec.net.QuotedPrintableCodec: byte[] encodeQuotedPrintable(java.util.BitSet,byte[])> 
<org.apache.commons.codec.net.QuotedPrintableCodec: java.lang.String encode(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PProfileKey: java.lang.String encodeBody()> 
<org.apache.commons.codec.net.RFC1522Codec: java.lang.String encodeText(java.lang.String,java.lang.String)> 
<org.apache.commons.codec.language.SoundexUtils: int differenceEncoded(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.ContentDisposition: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ContentType: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.CallInfo: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String encodeBase64(byte[],boolean)> 
<java.util.prefs.XMLParser: java.lang.String htmlEncode(java.lang.String)> 
<android.media.MediaCodec: android.media.MediaCodec createEncoderByType(java.lang.String)> 
<gov.nist.javax.sip.header.RouteList: java.lang.String encode()> 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String encode()> 
<org.apache.commons.codec.net.QCodec: java.lang.String encode(java.lang.String)> 
<org.jivesoftware.smackx.packet.VCard: void setEncodedImage(java.lang.String)> 
<java.nio.charset.CharsetEncoderICU: boolean canEncode(int)> 
<org.jivesoftware.smack.util.Base64: boolean encodeToFile(byte[],java.lang.String)> 
<gov.nist.core.NameValue: java.lang.String encode()> 
<org.apache.xml.serializer.utils.SystemIDResolver: java.lang.String replaceChars(java.lang.String)> 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String encodeBody()> 
<libcore.net.UriCodec: void appendPartiallyEncoded(java.lang.StringBuilder,java.lang.String)> 
<android.telephony.PhoneNumberUtils: java.lang.String convertAndStrip(java.lang.String)> 
<net.oauth.OAuth: java.lang.String percentEncode(java.lang.Iterable)> 
<gov.nist.javax.sip.header.ims.PAssociatedURI: java.lang.String encodeBody()> 
<org.apache.commons.codec.net.BCodec: java.lang.String encode(java.lang.String)> 
<gov.nist.javax.sip.header.To: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<gov.nist.javax.sip.header.MinExpires: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.AcceptEncoding: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<org.apache.harmony.security.asn1.DerOutputStream: void encodeSequence(org.apache.harmony.security.asn1.ASN1Sequence)> 
<org.apache.http.client.utils.URLEncodedUtils: java.lang.String encode(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.From: java.lang.String encodeBody()> 
<org.jivesoftware.smack.util.Base64: byte[] encode3to4(byte[],int,int,byte[],int)> 
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: byte[][] encodeCertificates(java.security.cert.Certificate[])> 
<gov.nist.javax.sip.header.SubscriptionState: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.RequestLine: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<net.oauth.OAuth: boolean isFormEncoded(java.lang.String)> 
<android.util.Base64: byte[] encode(byte[],int,int,int)> 
<android.text.method.QwertyKeyListener: java.lang.String getReplacement(java.lang.CharSequence,int,int,android.view.View)> 
<gov.nist.javax.sip.header.CallID: java.lang.StringBuffer encodeBody(java.lang.StringBuffer)> 
<org.apache.commons.codec.binary.Base64: byte[] encodeBase64Chunked(byte[])> 
<org.apache.harmony.security.asn1.DerOutputStream: void encodeChoice(org.apache.harmony.security.asn1.ASN1Choice)> 
<org.apache.xml.utils.SystemIDResolver: java.lang.String replaceChars(java.lang.String)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeBytes(byte[],int)> 
<android.text.Layout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)> 
<android.content.pm.PackageParser: java.lang.String buildTaskAffinityName(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String[])> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int,java.nio.charset.Charset,org.apache.james.mime4j.codec.EncoderUtil$Encoding)> 
<gov.nist.javax.sip.header.Protocol: java.lang.String encode()> 
<gov.nist.javax.sip.header.SIPETag: java.lang.String encodeBody()> 
<android.telephony.PhoneNumberUtils: java.lang.String internalGetStrippedReversed(java.lang.String,int)> 
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)> 
<android.content.pm.PackageParser: java.lang.String buildCompoundName(java.lang.String,java.lang.CharSequence,java.lang.String,java.lang.String[])> 
<gov.nist.javax.sip.header.MimeVersion: java.lang.String encodeBody()> 
<org.apache.commons.codec.net.URLCodec: java.lang.String encode(java.lang.String)> 
<android.util.Base64: byte[] encode(byte[],int)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeBytes(byte[])> 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.StringBuffer encode(java.lang.StringBuffer)> 
<org.apache.commons.codec.net.URLCodec: byte[] encodeUrl(java.util.BitSet,byte[])> 
<gov.nist.javax.sip.header.Unsupported: java.lang.String encodeBody()> 
<gov.nist.javax.sip.message.SIPResponse: java.lang.String encode()> 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.String sanitizeUri(java.lang.String)> 
<org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])> 
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> 
<org.apache.james.mime4j.codec.EncoderUtil: java.lang.String encodeEncodedWord(java.lang.String,org.apache.james.mime4j.codec.EncoderUtil$Usage,int)> 
<gov.nist.javax.sip.header.CallIdentifier: java.lang.String encode()> 
<gov.nist.core.DuplicateNameValueList: java.lang.String encode()> 
<gov.nist.javax.sip.header.AlertInfo: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.MaxForwards: java.lang.String encodeBody()> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String encodeBase64(byte[],int,int,boolean)> 
<gov.nist.javax.sip.header.ims.Path: java.lang.String encodeBody()> 
<android.util.Base64: java.lang.String encodeToString(byte[],int)> 
<gov.nist.javax.sip.header.AuthenticationHeader: java.lang.String encodeBody()> 
<org.apache.harmony.security.asn1.ASN1GeneralizedTime: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String encodeHex(byte[])> 
<gov.nist.javax.sip.header.ims.Privacy: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.MediaRange: java.lang.String encode()> 
<gov.nist.javax.sip.header.extensions.References: java.lang.String encodeBody()> 
<gov.nist.javax.sip.header.ExtensionHeaderList: java.lang.String encode()> 
