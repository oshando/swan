<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)> 
<android.content.SyncStorageEngine: void handleMessage(android.os.Message)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)> 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void setSession(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)> 
<android.webkit.WebViewClassic: void replaceTextfieldText(int,int,java.lang.String,int,int)> 
<org.apache.xalan.templates.ElemTextLiteral: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.media.AudioManager: void setVibrateSetting(int,int)> 
<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)> 
<java.lang.ThreadGroup: void setMaxPriority(int)> 
<org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)> 
<org.jivesoftware.smack.RosterEntry: void updateState(java.lang.String,org.jivesoftware.smack.packet.RosterPacket$ItemType,org.jivesoftware.smack.packet.RosterPacket$ItemStatus)> 
<org.apache.xalan.templates.ElemNumber: void setLang(org.apache.xalan.templates.AVT)> 
<org.apache.http.client.protocol.ClientContextConfigurer: void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry)> 
<android.app.FragmentManagerImpl: boolean popBackStackImmediate(java.lang.String,int)> 
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> 
<java.security.cert.X509CertSelector: void setSubject(byte[])> 
<android.os.Parcel: void writeArray(java.lang.Object[])> 
<org.apache.xalan.transformer.TransformerImpl: void setSerializationHandler(org.apache.xml.serializer.SerializationHandler)> 
<java.text.DateFormatSymbols: void setEras(java.lang.String[])> 
<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setMediaAuthorizationToken(java.lang.String)> 
<org.jivesoftware.smack.PacketReader: void dump(java.io.PrintWriter)> 
<org.jivesoftware.smack.packet.Message: void setType(org.jivesoftware.smack.packet.Message$Type)> 
<org.jivesoftware.smack.XMPPConnection: void setHeartbeatAlarm(com.google.android.gsf.gtalkservice.HeartbeatAlarm)> 
<org.apache.commons.io.EndianUtils: void writeSwappedLong(java.io.OutputStream,long)> 
<org.apache.xpath.patterns.UnionPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)> 
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> 
<android.appwidget.AppWidgetHostView: void updateAppWidgetSize(android.os.Bundle,int,int,int,int)> 
<android.net.wifi.WifiNative: boolean setModelName(java.lang.String)> 
<android.filterfw.core.SerializedFrame: void setInts(int[])> 
<android.webkit.WebViewClassic: boolean restorePicture(android.os.Bundle,java.io.File)> 
<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)> 
<org.apache.xalan.templates.ElemSort: void setDataType(org.apache.xalan.templates.AVT)> 
<android.inputmethodservice.IInputMethodSessionWrapper: void executeMessage(android.os.Message)> 
<android.webkit.CallbackProxy: void onReceivedHttpAuthCredentials(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.app.ActivityManagerProxy: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)> 
<android.test.suitebuilder.TestGrouping: void setClassLoader(java.lang.ClassLoader)> 
<org.apache.commons.codec.language.Metaphone: void setMaxCodeLen(int)> 
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> 
<android.widget.TextView: void setPadding(int,int,int,int)> 
<gov.nist.javax.sip.message.SIPMessage: java.lang.String debugDump()> 
<android.os.CommonTimeConfig: int setMasterAnnounceInterval(int)> 
<android.graphics.drawable.NinePatchDrawable: void setTargetDensity(int)> 
<java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)> 
<android.widget.TextView: void setWidth(int)> 
<android.drm.DrmManagerClient: void notify(java.lang.Object,int,int,java.lang.String)> 
<android.widget.CalendarView: void setSelectedDateVerticalBar(android.graphics.drawable.Drawable)> 
<net.oauth.signature.PLAINTEXT: void setTokenSecret(java.lang.String)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int)> 
<gov.nist.javax.sip.header.extensions.Replaces: void setValue(java.lang.String)> 
<org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.Field parse(java.lang.String,java.lang.String,java.lang.String)> 
<dalvik.system.SocketTagger: void set(dalvik.system.SocketTagger)> 
<android.widget.ActivityChooserModel: void setActivitySorter(android.widget.ActivityChooserModel$ActivitySorter)> 
<android.app.ApplicationThreadProxy: void dumpDbInfo(java.io.FileDescriptor,java.lang.String[])> 
<org.apache.xpath.NodeSet: void setTailSub1(org.w3c.dom.Node)> 
<android.webkit.WebViewClassic: void setTouchInterval(int)> 
<org.apache.xalan.templates.ElemElement: void setName(org.apache.xalan.templates.AVT)> 
<gov.nist.javax.sip.header.CallID: void setCallIdentifier(gov.nist.javax.sip.header.CallIdentifier)> 
<org.apache.james.mime4j.field.address.AddressList: void main(java.lang.String[])> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Service parseService(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])> 
<org.apache.xalan.templates.TemplateList: void setTemplate(org.apache.xalan.templates.ElemTemplate)> 
<android.app.ActivityManager: java.util.List getRunningServices(int)> 
<gov.nist.javax.sip.header.ContentLength: void setContentLength(int)> 
<android.widget.RemoteViews: void setLabelFor(int,int)> 
<android.view.ViewRootImpl: void dispatchScreenStateChange(boolean)> 
<android.support.v4.app.FragmentTabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)> 
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> 
<org.apache.http.message.ParserCursor: void updatePos(int)> 
<android.app.Activity: void setParent(android.app.Activity)> 
<android.view.animation.AnimationSet: void setFillAfter(boolean)> 
<android.opengl.GLSurfaceView: void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory)> 
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)> 
<org.apache.xpath.functions.FuncString: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.xalan.templates.XUnresolvedVariable: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM,int)> 
<android.view.GLES20DisplayList: void setTransformationInfo(float,float,float,float,float,float,float,float)> 
<android.speech.tts.BlockingAudioTrack: int writeToAudioTrack(android.media.AudioTrack,byte[])> 
<gov.nist.javax.sip.header.Contact: void setAddress(javax.sip.address.Address)> 
<org.apache.xml.utils.UnImplNode: void setXmlStandalone(boolean)> 
<android.content.AsyncQueryHandler: void startUpdate(int,java.lang.Object,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<org.apache.commons.io.EndianUtils: void writeSwappedFloat(java.io.OutputStream,float)> 
<android.location.Location: void setElapsedRealtimeNanos(long)> 
<android.webkit.WebViewClassic: void updateJavaScriptEnabled(boolean)> 
<android.webkit.WebSettings: void setAllowContentAccess(boolean)> 
<java.text.DecimalFormatSymbols: void setDigit(char)> 
<android.widget.PopupWindow: void setInputMethodMode(int)> 
<java.text.DateFormat: void setCalendar(java.util.Calendar)> 
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> 
<java.lang.String: java.lang.String replace(char,char)> 
<android.content.res.Resources: void updateSystemConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> 
<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)> 
<android.app.ActivityManagerProxy: long inputDispatchingTimedOut(int,boolean)> 
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> 
<android.os.BatteryStats: void dumpLocked(java.io.PrintWriter)> 
<android.app.ActivityManagerProxy: int getPackageScreenCompatMode(java.lang.String)> 
<java.util.logging.LogRecord: void setThreadID(int)> 
<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int)> 
<org.ccil.cowan.tagsoup.Schema: void setURI(java.lang.String)> 
<org.apache.xpath.operations.UnaryOperation: void setExpression(org.apache.xpath.Expression)> 
<android.webkit.JWebCoreJavaBridge: void setSharedTimer(long)> 
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult writeIpAndProxyConfigurationsOnChange(android.net.wifi.WifiConfiguration,android.net.wifi.WifiConfiguration)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void characters(char[],int,int)> 
<android.os.CommonTimeUtils: int transactSetInt(int,int)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setPendingSubscribe(gov.nist.javax.sip.stack.SIPClientTransaction)> 
<org.apache.xalan.processor.TransformerFactoryImpl: void setURIResolver(javax.xml.transform.URIResolver)> 
<org.apache.xpath.CachedXPathAPI: org.apache.xpath.objects.XObject eval(org.w3c.dom.Node,java.lang.String,org.w3c.dom.Node)> 
<org.apache.xpath.axes.ReverseAxesWalker: void setRoot(int)> 
<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)> 
<android.view.View: void setTagInternal(int,java.lang.Object)> 
<android.widget.ProgressBar: void setSecondaryProgress(int)> 
<android.webkit.JWebCoreJavaBridge: void setActiveWebView(android.webkit.WebViewClassic)> 
<org.apache.commons.io.output.FileWriterWithEncoding: void write(char[])> 
<android.widget.TextView: void setScroller(android.widget.Scroller)> 
<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setPreferences(android.content.SharedPreferences,android.view.inputmethod.EditorInfo)> 
<java.util.logging.Handler: void setEncoding(java.lang.String)> 
<android.filterpacks.imageproc.BlackWhiteFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.view.ActionMode: void setTitleOptionalHint(boolean)> 
<libcore.io.BlockGuardOs: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)> 
<libcore.net.url.FtpURLConnection: void setDoInput(boolean)> 
<java.text.DecimalFormatSymbols: void setInternationalCurrencySymbol(java.lang.String)> 
<android.bluetooth.BluetoothPan: void log(java.lang.String)> 
<org.kxml2.io.KXmlSerializer: void setFeature(java.lang.String,boolean)> 
<org.apache.http.impl.client.DefaultHttpClient: void setDefaultHttpParams(org.apache.http.params.HttpParams)> 
<android.view.View: void setSelected(boolean)> 
<android.test.InstrumentationTestRunner: void parseTestClasses(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)> 
<libcore.io.DropBox: void setReporter(libcore.io.DropBox$Reporter)> 
<android.telephony.SmsCbLocation: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.CallbackProxy: java.lang.String onJsPrompt(java.lang.String,java.lang.String,java.lang.String)> 
<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)> 
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)> 
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)> 
<org.apache.commons.io.input.NullReader: int read(char[],int,int)> 
<java.util.logging.StreamHandler: void setOutputStream(java.io.OutputStream)> 
<java.util.zip.Deflater: void setInput(byte[],int,int)> 
<org.apache.xml.serializer.SerializerBase: void setDoctype(java.lang.String,java.lang.String)> 
<android.os.ServiceManagerProxy: android.os.IBinder checkService(java.lang.String)> 
<android.filterfw.core.FilterGraph: void setAutoBranchMode(int)> 
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)> 
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)> 
<org.apache.http.impl.conn.tsccm.WaitingThreadAborter: void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread)> 
<android.media.JetPlayer: boolean setMuteFlags(int,boolean)> 
<java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.io.BufferedWriter)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setProperty(java.lang.String,java.lang.Object)> 
<android.bluetooth.BluetoothPan: void setBluetoothTethering(boolean)> 
<android.widget.EdgeEffect: void setSize(int,int)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void setReturnFrequency(int)> 
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setValue(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setEventChargingFunctionAddress(java.lang.String)> 
<android.app.ActivityManagerProxy: void activityIdle(android.os.IBinder,android.content.res.Configuration,boolean)> 
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)> 
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> 
<android.app.Activity: void startActivityAsUser(android.content.Intent,android.os.Bundle,android.os.UserHandle)> 
<android.location.Address: void setThoroughfare(java.lang.String)> 
<android.app.ApplicationThreadProxy: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])> 
<org.apache.xalan.templates.Stylesheet: void setXmlnsXsl(java.lang.String)> 
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)> 
<android.filterpacks.videosrc.SurfaceTextureTarget: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.net.NetworkInfo: void setExtraInfo(java.lang.String)> 
<org.jivesoftware.smack.packet.Message: void setTimestamp(long)> 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)> 
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<android.widget.GridLayout: void setRowOrderPreserved(boolean)> 
<org.jivesoftware.smack.packet.LoginResponse: void setSettings(java.util.Map)> 
<gov.nist.javax.sip.header.ims.PPreferredIdentity: void setValue(java.lang.String)> 
<libcore.icu.RuleBasedCollatorICU: void setDecomposition(int)> 
<android.support.v4.content.ModernAsyncTask: android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])> 
<android.net.http.Headers: void setCacheControl(java.lang.String)> 
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> 
<org.jivesoftware.smack.SASLAuthentication: void setAvailableSASLMethods(java.util.Collection)> 
<android.speech.tts.SynthesisRequest: void setSpeechRate(int)> 
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.WebViewCore: void access$2600(android.webkit.WebViewCore,int,int,int,int,int)> 
<android.net.wifi.p2p.WifiP2pDeviceList: void updateStatus(java.lang.String,int)> 
<android.telephony.CellInfoLte: void setCellIdentity(android.telephony.CellIdentityLte)> 
<android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.animation.ObjectAnimator: android.animation.Animator setDuration(long)> 
<android.text.style.SuggestionSpan: void writeToParcel(android.os.Parcel,int)> 
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)> 
<android.media.AudioTrack: int setLoopPoints(int,int,int)> 
<android.app.ExpandableListActivity: void setSelectedGroup(int)> 
<android.support.v4.widget.ResourceCursorAdapter: void setViewResource(int)> 
<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)> 
<javax.xml.transform.stream.StreamSource: void setSystemId(java.io.File)> 
<android.graphics.Paint: void setTextLocale(java.util.Locale)> 
<android.preference.RingtonePreference: void setShowDefault(boolean)> 
<android.nfc.NfcAdapter: void setP2pModes(int,int)> 
<android.support.v4.widget.EdgeEffectCompatIcs: void setSize(java.lang.Object,int,int)> 
<java.io.PrintStream: void write(byte[],int,int)> 
<org.apache.xalan.xslt.EnvironmentCheck: void main(java.lang.String[])> 
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<org.apache.xalan.templates.FuncFormatNumb: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.Header createHeader(java.lang.String)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setCustomAnimations(int,int,int,int)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setVersion(int)> 
<java.net.HttpCookie: void setExpires(java.util.Date)> 
<org.apache.http.client.params.ClientParamBean: void setRejectRelativeRedirect(boolean)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$PermissionGroup parsePermissionGroup(android.content.pm.PackageParser$Package,int,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])> 
<org.ccil.cowan.tagsoup.XMLWriter: void write(java.lang.String)> 
<org.apache.xml.utils.URI: void setPath(java.lang.String)> 
<android.app.ActivityManager: java.util.List getRunningTasks(int)> 
<org.apache.xalan.templates.ElemLiteralResult: void setRawName(java.lang.String)> 
<android.media.AudioService: void setStreamSolo(int,boolean,android.os.IBinder)> 
<android.location.Address: void setSubThoroughfare(java.lang.String)> 
<java.io.PipedOutputStream: void write(byte[],int,int)> 
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)> 
<android.filterfw.core.ShaderProgram: void setBlendFunc(int,int)> 
<android.content.ContentProviderProxy: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> 
<org.apache.http.params.HttpProtocolParams: void setUserAgent(org.apache.http.params.HttpParams,java.lang.String)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setMethod(org.apache.xml.utils.QName)> 
<org.apache.xalan.transformer.TransformerImpl: void setExtensionsTable(org.apache.xalan.templates.StylesheetRoot)> 
<android.widget.ListPopupWindow: void setDropDownAlwaysVisible(boolean)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1: void setMaxScrollY(java.lang.Object,int)> 
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1: void setMaxScrollX(java.lang.Object,int)> 
<java.util.zip.Adler32: void update(byte[],int,int)> 
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> 
<android.test.mock.MockContext: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> 
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)> 
<android.net.SntpClient: boolean requestTime(java.lang.String,int)> 
<org.apache.xml.serializer.SerializerBase: void setOutputProperty(java.lang.String,java.lang.String)> 
<org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> 
<android.net.wifi.WifiNative: boolean setWfdDeviceInfo(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setMethod(java.lang.String)> 
<android.net.ConnectivityManager: int setUsbTethering(boolean)> 
<android.view.WindowOrientationListener: void setCurrentRotation(int)> 
<org.apache.xalan.templates.ElemExtensionScript: void setSrc(java.lang.String)> 
<android.filterfw.core.MutableFrameFormat: void setDimensions(int)> 
<java.sql.Date: void setMinutes(int)> 
<android.widget.CalendarView: void setDateTextAppearance(int)> 
<android.widget.LinearLayout: void setOrientation(int)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeFromFile(java.lang.String)> 
<jp.co.omronsoft.openwnn.OpenWnnEN: void onUpdateSelection(int,int,int,int,int,int)> 
<android.widget.Chronometer: void setFormat(java.lang.String)> 
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)> 
<android.media.Ringtone: void setTitle(java.lang.String)> 
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.TableLayout: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> 
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)> 
<android.gesture.GestureStore: void save(java.io.OutputStream,boolean)> 
<android.app.Activity: void setFeatureDrawableResource(int,int)> 
<android.inputmethodservice.InputMethodService: void sendKeyChar(char)> 
<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)> 
<jp.co.omronsoft.openwnn.JAJP.RomkanFullKatakana: void setPreferences(android.content.SharedPreferences)> 
<org.ccil.cowan.tagsoup.PYXWriter: void stage(char[],int,int)> 
<android.gesture.GestureOverlayView: void setEventsInterceptionEnabled(boolean)> 
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> 
<android.app.ApplicationThreadProxy: void setSchedulingGroup(int)> 
<gov.nist.javax.sip.message.SIPMessage: void setCallId(javax.sip.header.CallIdHeader)> 
<android.gesture.GestureOverlayView: void setUncertainGestureColor(int)> 
<android.os.Parcel: void writeTypedList(java.util.List)> 
<org.apache.xpath.axes.LocPathIterator: void setNextPosition(int)> 
<android.view.animation.Transformation: void setTransformationType(int)> 
<android.preference.Preference: void setTitle(java.lang.CharSequence)> 
<org.apache.harmony.xml.ExpatReader: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<org.apache.xpath.XPathContext: void setNamespaceContext(org.apache.xml.utils.PrefixResolver)> 
<org.apache.xpath.axes.WalkingIterator: void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)> 
<android.filterfw.core.GLFrame: void setInts(int[])> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setParcelableData(java.lang.Object,android.os.Parcelable)> 
<gov.nist.core.NameValue: void setSeparator(java.lang.String)> 
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)> 
<java.text.DecimalFormat: void setMinimumFractionDigits(int)> 
<android.widget.Toast: void setGravity(int,int,int)> 
<org.apache.xalan.templates.Stylesheet: void setOutput(org.apache.xalan.templates.OutputProperties)> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void setLocale(java.util.Locale)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setDocumentLocator(org.xml.sax.Locator)> 
<junit.textui.TestRunner: void runAndWait(junit.framework.Test)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setItemCount(int)> 
<java.io.PipedWriter: void write(char[],int,int)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setCompressionEnabled(boolean)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLCipherRSA: byte[] engineUpdate(byte[],int,int)> 
<android.net.wifi.WpsResult: void writeToParcel(android.os.Parcel,int)> 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: void setNeedClientAuth(boolean)> 
<android.widget.SlidingDrawer: void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener)> 
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void setEntity(org.apache.http.HttpEntity)> 
<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)> 
<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setCdataSectionElements(java.util.Vector)> 
<android.os.Parcel: void writeStringList(java.util.List)> 
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)> 
<android.view.GLES20DisplayList: void setLeftTop(int,int)> 
<gov.nist.core.GenericObjectList: java.lang.String debugDump()> 
<org.apache.xalan.processor.ProcessorOutputElem: void setStandalone(boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setTextContent(java.lang.String)> 
<org.apache.xml.serializer.dom3.DOMOutputImpl: void setEncoding(java.lang.String)> 
<android.view.ViewGroup: void setLayoutMode(int)> 
<gov.nist.javax.sip.message.SIPMessage: void setContent(java.lang.Object,javax.sip.header.ContentTypeHeader)> 
<org.apache.commons.io.CopyUtils: int copy(java.io.InputStream,java.io.OutputStream)> 
<libcore.net.http.ResponseHeaders: void setLocalTimestamps(long,long)> 
<android.widget.ExpandableListConnector: void setExpandedGroupMetadataList(java.util.ArrayList)> 
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.jivesoftware.smack.util.Cache: void setMaxCacheSize(int)> 
<org.jivesoftware.smack.XMPPConnection: void dump(java.io.PrintWriter)> 
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,int,android.graphics.Paint$FontMetricsInt)> 
<android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)> 
<dalvik.system.profiler.BinaryHprofWriter: void write(dalvik.system.profiler.HprofData,java.io.OutputStream)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setSelected(java.lang.Object,boolean)> 
<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: int setDictionary(int,int,int)> 
<org.apache.xalan.templates.ElemExtensionDecl: void setFunctions(org.apache.xml.utils.StringVector)> 
<android.net.wifi.RssiPacketCountInfo: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smack.packet.BatchPresence: void setType(org.jivesoftware.smack.packet.BatchPresence$Type)> 
<libcore.net.url.FtpURLConnection: void write(java.lang.String)> 
<org.apache.xalan.templates.ElemWithParam: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)> 
<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request,boolean)> 
<org.apache.xalan.templates.Stylesheet: void setStylesheetRoot(org.apache.xalan.templates.StylesheetRoot)> 
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)> 
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.graphics.Bitmap: void setDensity(int)> 
<java.security.cert.PKIXParameters: void setDate(java.util.Date)> 
<android.net.BaseNetworkStateTracker: boolean setRadio(boolean)> 
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)> 
<android.preference.TwoStatePreference: void setSummaryOn(java.lang.CharSequence)> 
<java.util.concurrent.ConcurrentSkipListMap: void writeObject(java.io.ObjectOutputStream)> 
<android.os.StrictMode: void setThreadPolicyMask(int)> 
<org.apache.xml.dtm.ref.DTMAxisIteratorBase: void setRestartable(boolean)> 
<java.net.Socket: void setKeepAlive(boolean)> 
<android.filterfw.core.FilterFunction: void setInputFrame(java.lang.String,android.filterfw.core.Frame)> 
<org.apache.harmony.xml.dom.DOMConfigurationImpl: void setParameter(java.lang.String,java.lang.Object)> 
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)> 
<android.accounts.AccountManagerService: void setUserdataInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String,java.lang.String)> 
<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)> 
<android.app.ActivityManagerProxy: boolean profileControl(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> 
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)> 
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)> 
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> 
<android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(android.database.sqlite.SQLiteDatabaseConfiguration)> 
<android.media.videoeditor.MediaItem: void setRegenerateClip(boolean)> 
<android.content.ContentService: void setMasterSyncAutomatically(boolean)> 
<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)> 
<org.apache.james.mime4j.message.Entity: void setParent(org.apache.james.mime4j.message.Entity)> 
<android.hardware.Camera: void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)> 
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> 
<android.graphics.drawable.GradientDrawable: void setStroke(int,int,float,float)> 
<gov.nist.javax.sip.header.CallIdentifier: void setHost(java.lang.String)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeStartThread(dalvik.system.profiler.HprofData$ThreadEvent)> 
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: void setSessionTimeout(int)> 
<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> 
<android.filterfw.core.SimpleFrame: void setBitmap(android.graphics.Bitmap)> 
<javax.xml.validation.ValidatorHandler: void setFeature(java.lang.String,boolean)> 
<org.apache.xml.serializer.ToStream: void writeOutCleanChars(char[],int,int)> 
<android.widget.DatePicker: void setMinDate(long)> 
<android.webkit.WebViewClassic: void dumpRenderTree(boolean)> 
<android.webkit.WebViewClassic: void setupProxyListener(android.content.Context)> 
<org.jivesoftware.smack.PacketReader: void log(java.lang.String)> 
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> 
<android.webkit.WebSettingsClassic: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)> 
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])> 
<gov.nist.javax.sip.header.ExtensionHeaderImpl: void setValue(java.lang.String)> 
<android.media.AudioService: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)> 
<android.support.v4.widget.ResourceCursorAdapter: void setDropDownViewResource(int)> 
<android.widget.TextView: void setEms(int)> 
<android.webkit.BrowserFrame: void setTitle(java.lang.String)> 
<org.apache.harmony.security.x509.IssuingDistributionPoint: void setOnlyContainsUserCerts(boolean)> 
<android.view.ViewDebug: void writeValue(java.io.BufferedWriter,java.lang.Object)> 
<org.apache.xml.serializer.ToStream: void setTransformer(javax.xml.transform.Transformer)> 
<org.javia.arity.Token: org.javia.arity.Token setPos(int)> 
<org.apache.http.params.HttpConnectionParamBean: void setLinger(int)> 
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> 
<android.net.MobileDataStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)> 
<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)> 
<java.net.Socket: void sendUrgentData(int)> 
<java.sql.SQLException: void setNextException(java.sql.SQLException)> 
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> 
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)> 
<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)> 
<android.inputmethodservice.IInputMethodWrapper: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(libcore.icu.LocaleData)> 
<android.app.Dialog: void setTitle(java.lang.CharSequence)> 
<org.apache.xml.utils.UnImplNode: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSignatureRawRSA: void engineUpdate(byte[],int,int)> 
<libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)> 
<org.apache.xpath.patterns.NodeTest: void setStaticScore(org.apache.xpath.objects.XNumber)> 
<org.apache.harmony.luni.internal.util.TimezoneGetter: void setInstance(org.apache.harmony.luni.internal.util.TimezoneGetter)> 
<android.text.format.Time: void set(int,int,int)> 
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener)> 
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)> 
<org.apache.http.impl.cookie.BasicMaxAgeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<android.media.audiofx.BassBoost: void setStrength(short)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setUseClientMode(boolean)> 
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(gov.nist.core.Token)> 
<org.apache.xpath.functions.FuncNot: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.webkit.WebSettingsClassic: void setAllowContentAccess(boolean)> 
<android.webkit.WebSettingsClassic: void syncSettingsAndCreateHandler(android.webkit.BrowserFrame)> 
<javax.crypto.Mac: void update(java.nio.ByteBuffer)> 
<org.apache.xalan.templates.AVT: void setName(java.lang.String)> 
<org.apache.xalan.templates.ElemPI: void setName(org.apache.xalan.templates.AVT)> 
<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)> 
<android.inputmethodservice.InputMethodService: void onExtractedReplaceText(int,int,java.lang.CharSequence)> 
<org.apache.xalan.templates.ElemChoose: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setParent(java.lang.Object,android.view.View,int)> 
<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)> 
<android.support.v4.app.FragmentManagerImpl: boolean popBackStackImmediate(java.lang.String,int)> 
<javax.xml.xpath.XPathFactoryFinder: void debugPrintln(java.lang.String)> 
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)> 
<android.net.http.Headers: void setLastModified(java.lang.String)> 
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)> 
<android.os.Broadcaster: void broadcast(android.os.Message)> 
<org.apache.xpath.operations.Variable: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.speech.srec.WaveHeader: android.speech.srec.WaveHeader setSampleRate(int)> 
<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory _newFactory(java.lang.String)> 
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)> 
<android.app.ApplicationThreadProxy: android.os.Debug$MemoryInfo dumpMemInfo(java.io.FileDescriptor,boolean,boolean,java.lang.String[])> 
<gov.nist.javax.sip.header.ims.AddressHeaderIms: void setAddress(javax.sip.address.Address)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setValue(int,java.lang.String)> 
<android.view.WindowManagerGlobal: void setStoppedState(android.os.IBinder,boolean)> 
<java.util.concurrent.LinkedTransferQueue: void writeObject(java.io.ObjectOutputStream)> 
<android.view.View: void setDisabledSystemUiVisibility(int)> 
<android.os.Looper: void setMessageLogging(android.util.Printer)> 
<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)> 
<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)> 
<gov.nist.javax.sip.address.NetObject: java.lang.String debugDump()> 
<android.filterfw.core.Frame: void setData(byte[],int,int)> 
<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)> 
<android.text.method.CharacterPickerDialog: void replaceCharacterAndClose(java.lang.CharSequence)> 
<android.graphics.drawable.ClipDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.content.SyncStorageEngine: void setSyncAutomatically(android.accounts.Account,int,java.lang.String,boolean)> 
<android.graphics.drawable.GradientDrawable: void setOrientation(android.graphics.drawable.GradientDrawable$Orientation)> 
<java.security.cert.PKIXParameters: void setCertStores(java.util.List)> 
<android.widget.TextView: void setHint(java.lang.CharSequence)> 
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int)> 
<org.apache.xml.serializer.ToTextStream: void cdata(char[],int,int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setScrollY(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setScrollX(int)> 
<android.widget.TextView: void setFreezesText(boolean)> 
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> 
<android.net.DummyDataStateTracker: void setTeardownRequested(boolean)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setTimer(java.util.Timer)> 
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)> 
<android.widget.Spinner: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> 
<org.jivesoftware.smackx.provider.MUCUserProvider: org.jivesoftware.smack.packet.PacketExtension parseExtension(com.google.common.io.protocol.ProtoBuf)> 
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)> 
<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean,long)> 
<org.apache.xml.utils.DOMHelper: void setDOMFactory(org.w3c.dom.Document)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setKeepAlive(boolean)> 
<org.apache.xpath.compiler.Compiler: void warn(java.lang.String,java.lang.Object[])> 
<android.inputmethodservice.InputMethodService: void setInputView(android.view.View)> 
<android.net.NetworkInfo: void setFailover(boolean)> 
<android.media.audiofx.AudioEffect: int setParameter(int[],byte[])> 
<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)> 
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setIK(java.lang.String)> 
<java.security.cert.PKIXParameters: void setPolicyMappingInhibited(boolean)> 
<android.webkit.WebStorageClassic: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)> 
<android.widget.ViewFlipper: void updateRunning(boolean)> 
<gov.nist.javax.sip.header.RAck: void setCSequenceNumber(long)> 
<libcore.io.Streams: void writeSingleByte(java.io.OutputStream,int)> 
<org.xml.sax.helpers.DefaultHandler: void setDocumentLocator(org.xml.sax.Locator)> 
<android.net.wifi.WifiStateMachine: void addToBlacklist(java.lang.String)> 
<android.webkit.WebViewClassic: void documentAsText(android.os.Message)> 
<org.apache.xalan.templates.ElemApplyTemplates: void setMode(org.apache.xml.utils.QName)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setTransition(int)> 
<android.webkit.WebViewClassic: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)> 
<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)> 
<android.app.IntentService: void onStart(android.content.Intent,int)> 
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)> 
<gov.nist.javax.sip.message.SIPMessage: void setContentDisposition(javax.sip.header.ContentDispositionHeader)> 
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setMinusSign(char)> 
<junit.textui.TestRunner: void setPrinter(junit.textui.ResultPrinter)> 
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)> 
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> 
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(java.lang.String,java.lang.String,java.lang.String)> 
<libcore.io.ForwardingOs: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)> 
<android.view.GLES20DisplayList: void setAlpha(float)> 
<android.widget.OverScroller: void setFinalY(int)> 
<android.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> 
<android.widget.OverScroller: void setFinalX(int)> 
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)> 
<org.apache.xpath.patterns.NodeTest: void setWhatToShow(int)> 
<android.view.SurfaceView: boolean setFrame(int,int,int,int)> 
<android.webkit.WebView: void setNetworkAvailable(boolean)> 
<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object replace(java.lang.Object,java.lang.Object)> 
<org.apache.xml.serializer.ToUnknownStream: void setStandalone(java.lang.String)> 
<java.io.File: boolean setLastModified(long)> 
<org.apache.xml.serializer.ToTextStream: void writeNormalizedChars(char[],int,int,boolean)> 
<android.filterpacks.base.ObjectSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.os.StrictMode: void setCloseGuardEnabled(boolean)> 
<org.ccil.cowan.tagsoup.Element: void setAttribute(java.lang.String,java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> 
<org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.String)> 
<org.apache.http.auth.AuthSchemeRegistry: void setItems(java.util.Map)> 
<android.bluetooth.BluetoothDevice: boolean setPasskey(int)> 
<android.inputmethodservice.Keyboard: boolean setShifted(boolean)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setCK(java.lang.String)> 
<org.apache.xml.dtm.ref.DTMDefaultBase: void setDocumentBaseURI(java.lang.String)> 
<org.kxml2.io.KXmlParser: void defineEntityReplacementText(java.lang.String,java.lang.String)> 
<android.bluetooth.BluetoothTetheringDataTracker: void setDependencyMet(boolean)> 
<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)> 
<android.webkit.WebViewClassic: void loadViewState(java.io.InputStream)> 
<android.telephony.CellInfo: void writeToParcel(android.os.Parcel,int,int)> 
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.stack.ServerLog: void setStackIpAddress(java.lang.String)> 
<android.app.AlarmManager: void setTimeZone(java.lang.String)> 
<org.apache.xalan.transformer.TrAXFilter: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> 
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)> 
<android.widget.DatePicker: void setMaxDate(long)> 
<android.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])> 
<android.hardware.display.WifiDisplayStatus: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)> 
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void writeToParcel(android.os.Parcel,int)> 
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)> 
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)> 
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: boolean setDictionary(int)> 
<java.io.CharArrayWriter: void write(char[],int,int)> 
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(java.lang.String,java.lang.String,java.lang.String)> 
<android.net.wifi.WifiStateMachine: void setScanType(boolean)> 
<android.app.ActivityManagerProxy: void killBackgroundProcesses(java.lang.String,int)> 
<android.drm.DrmManagerClient: boolean canHandle(android.net.Uri,java.lang.String)> 
<java.net.Socket: void setTrafficClass(int)> 
<android.graphics.drawable.ShapeDrawable: void setPadding(int,int,int,int)> 
<gov.nist.core.GenericObjectList: void setSeparator(java.lang.String)> 
<android.view.ViewRootImpl: void requestUpdateConfiguration(android.content.res.Configuration)> 
<org.apache.xml.serializer.ToHTMLStream: void setSpecialEscapeURLs(boolean)> 
<android.bluetooth.BluetoothClass: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.TemplateList: void setNamedTemplates(java.util.Hashtable)> 
<android.view.View: void setLayerPaint(android.graphics.Paint)> 
<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int,int)> 
<org.xml.sax.ext.Attributes2Impl: void setDeclared(int,boolean)> 
<org.apache.http.params.HttpProtocolParamBean: void setUserAgent(java.lang.String)> 
<android.text.AlteredCharSequence: void update(char[],int,int)> 
<gov.nist.javax.sip.message.SIPResponse: void setBranch(gov.nist.javax.sip.header.Via,java.lang.String)> 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> 
<android.filterfw.core.VertexFrame: void setDataFromFrame(android.filterfw.core.Frame)> 
<gov.nist.javax.sip.message.HeaderIterator: void set(java.lang.Object)> 
<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,org.w3c.dom.Node,org.apache.xml.utils.PrefixResolver)> 
<android.content.SyncManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)> 
<org.apache.james.mime4j.message.Multipart: void setParent(org.apache.james.mime4j.message.Entity)> 
<android.media.AudioService: void setSpeakerphoneOn(boolean)> 
<libcore.net.http.HttpsURLConnectionImpl: void setDoOutput(boolean)> 
<android.view.Surface: void setMatrix(float,float,float,float)> 
<org.apache.xpath.axes.DescendantIterator: void setRoot(int,java.lang.Object)> 
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)> 
<org.jivesoftware.smack.PacketProcessor: void log(java.lang.String)> 
<android.filterfw.io.GraphReader: android.filterfw.core.FilterGraph readGraphResource(android.content.Context,int)> 
<android.media.MediaPlayer: boolean setParameter(int,int)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)> 
<org.jivesoftware.smack.packet.Message: void setBody(java.lang.String)> 
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)> 
<android.view.ActionMode: void setTag(java.lang.Object)> 
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)> 
<org.apache.xml.serializer.ToTextSAXHandler: boolean setEscaping(boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnableSessionCreation(boolean)> 
<android.app.ActivityManagerProxy: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> 
<gov.nist.javax.sip.ListeningPointImpl: void sendHeartbeat(java.lang.String,int)> 
<org.apache.harmony.xml.ExpatReader: void setDTDHandler(org.xml.sax.DTDHandler)> 
<android.telephony.ServiceState: void setNullState(int)> 
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> 
<android.content.SyncQueue: void dump(java.lang.StringBuilder)> 
<android.content.CursorLoader: void setSelection(java.lang.String)> 
<android.bluetooth.BluetoothTetheringDataTracker: void setUserDataEnable(boolean)> 
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> 
<gov.nist.javax.sip.stack.IOHandler: void writeChunks(java.io.OutputStream,byte[],int)> 
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)> 
<android.widget.AutoCompleteTextView: void setThreshold(int)> 
<org.ccil.cowan.tagsoup.ElementType: void setAttribute(org.ccil.cowan.tagsoup.AttributesImpl,java.lang.String,java.lang.String,java.lang.String)> 
<android.support.v4.app.ListFragment: void setSelection(int)> 
<org.apache.xpath.functions.FunctionOneArg: void setExpression(org.apache.xpath.Expression)> 
<org.apache.xalan.processor.TransformerFactoryImpl: void setErrorListener(javax.xml.transform.ErrorListener)> 
<android.widget.AdapterViewAnimator: void setAnimateFirstView(boolean)> 
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> 
<android.webkit.WebViewCore: void sendViewInvalidate(int,int,int,int)> 
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> 
<android.filterfw.core.FinalPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> 
<org.jivesoftware.smack.packet.XMPPError: void setCode(int)> 
<android.widget.ImageView: boolean setFrame(int,int,int,int)> 
<org.apache.http.conn.params.ConnManagerParams: void setTimeout(org.apache.http.params.HttpParams,long)> 
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setPrefix(java.lang.String)> 
<org.jivesoftware.smack.packet.IQ: void setType(org.jivesoftware.smack.packet.IQ$Type)> 
<android.os.WorkSource: android.os.WorkSource[] setReturningDiffs(android.os.WorkSource)> 
<android.view.HardwareCanvas: void setBitmap(android.graphics.Bitmap)> 
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)> 
<android.location.Location: void set(android.location.Location)> 
<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)> 
<android.support.v4.view.PagerAdapter: void finishUpdate(android.view.View)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setOnKeyboardActionListener(jp.co.omronsoft.openwnn.KeyboardView$OnKeyboardActionListener)> 
<android.telephony.CellIdentityCdma: void log(java.lang.String)> 
<org.jivesoftware.smack.util.ObservableWriter: void write(int)> 
<android.inputmethodservice.InputMethodService: void setCandidatesView(android.view.View)> 
<org.apache.xalan.processor.XSLTAttributeDef: void setDefAttrValue(org.apache.xalan.processor.StylesheetHandler,org.apache.xalan.templates.ElemTemplateElement)> 
<org.apache.xpath.axes.NodeSequence: void setIter(org.apache.xml.dtm.DTMIterator)> 
<java.text.Collator: void setDecomposition(int)> 
<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> 
<android.app.Activity: void setPersistent(boolean)> 
<android.widget.AutoCompleteTextView: void setListSelection(int)> 
<android.widget.TextView: void sendAccessibilityEventTypeViewTextChanged(java.lang.CharSequence,int,int,int)> 
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.View,int,java.lang.Object)> 
<gov.nist.javax.sip.header.ims.PProfileKey: void setValue(java.lang.String)> 
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> 
<org.apache.xalan.transformer.TransformerImpl: void setRecursionLimit(int)> 
<org.apache.http.impl.client.AbstractHttpClient: void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<org.jivesoftware.smack.util.PacketParserUtils: org.jivesoftware.smack.packet.PacketExtension parsePacketExtension(java.lang.String,java.lang.String,org.xmlpull.v1.XmlPullParser)> 
<android.view.TextureView: void setLayerType(int,android.graphics.Paint)> 
<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.javax.sip.address.AddressImpl parseAddress(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoLinger(boolean,int)> 
<android.os.Process: android.os.Process$ProcessStartResult zygoteSendArgsAndGetResult(java.util.ArrayList)> 
<org.apache.xpath.axes.FilterExprWalker: void setRoot(int)> 
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> 
<gov.nist.javax.sip.address.SipUri: void setTelephoneSubscriber(gov.nist.javax.sip.address.TelephoneNumber)> 
<org.apache.http.message.AbstractHttpMessage: void setHeader(org.apache.http.Header)> 
<gov.nist.javax.sip.header.MaxForwards: void setMaxForwards(int)> 
<android.webkit.CookieManager: java.lang.String getCookie(android.net.WebAddress)> 
<org.apache.harmony.xnet.provider.jsse.CertificateMessage: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<android.net.wifi.WifiStateMachine: void sendSupplicantConnectionChangedBroadcast(boolean)> 
<org.apache.xpath.functions.FuncId: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.jivesoftware.smack.XMPPConnection: void write(java.lang.String)> 
<android.net.wifi.WifiNative: boolean setConcurrencyPriority(java.lang.String)> 
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)> 
<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)> 
<android.view.View: void setMeasuredDimension(int,int)> 
<android.net.WebAddress: void setHost(java.lang.String)> 
<gov.nist.javax.sip.stack.MessageProcessor: void setSentBy(java.lang.String)> 
<android.net.EthernetDataTracker: void setUserDataEnable(boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setPassword(java.lang.Object,boolean)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setType(int,java.lang.String)> 
<gov.nist.javax.sip.header.StatusLine: void setStatusCode(int)> 
<net.oauth.signature.OAuthSignatureMethod: void setTokenSecret(java.lang.String)> 
<android.webkit.BrowserFrame: void externalRepresentation(android.os.Message)> 
<java.security.cert.X509CRLSelector: void setIssuerNames(java.util.Collection)> 
<org.xmlpull.v1.XmlPullParserFactory: void setNamespaceAware(boolean)> 
<android.webkit.UrlInterceptRegistry: void setUrlInterceptDisabled(boolean)> 
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)> 
<java.nio.FileChannelImpl: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)> 
<android.webkit.DeviceMotionAndOrientationManager: void setMockOrientation(boolean,double,boolean,double,boolean,double)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.ServerRequestInterface newSIPServerRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTcpNoDelay(boolean)> 
<android.webkit.WebViewClassic: void setScrollBarStyle(int)> 
<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)> 
<android.animation.ValueAnimator: android.animation.Animator setDuration(long)> 
<gov.nist.javax.sip.header.Via: void setSentBy(gov.nist.core.HostPort)> 
<android.test.mock.MockContext: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> 
<gov.nist.javax.sip.stack.SIPDialog: void setRemoteParty(gov.nist.javax.sip.message.SIPMessage)> 
<org.apache.xml.serializer.dom3.DOMErrorHandlerImpl: boolean handleError(org.w3c.dom.DOMError)> 
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> 
<javax.security.auth.callback.PasswordCallback: void setPassword(char[])> 
<java.net.URLConnection: void setReadTimeout(int)> 
<android.view.animation.Animation: void setFillAfter(boolean)> 
<android.app.ApplicationThreadProxy: void setCoreSettings(android.os.Bundle)> 
<android.content.BroadcastReceiver: void setResultData(java.lang.String)> 
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)> 
<org.apache.harmony.xml.ExpatReader: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.net.EthernetDataTracker: void setDependencyMet(boolean)> 
<android.inputmethodservice.InputMethodService: void setCandidatesViewShown(boolean)> 
<org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)> 
<java.util.zip.Deflater: void setStrategy(int)> 
<org.apache.xml.serializer.ToStream: void setOutputStreamInternal(java.io.OutputStream,boolean)> 
<org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)> 
<org.ccil.cowan.tagsoup.Parser: void setFeature(java.lang.String,boolean)> 
<android.widget.ImageView: void setMaxWidth(int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setNpnProtocols(byte[])> 
<android.webkit.WebView: void setOverScrollMode(int)> 
<libcore.io.ForwardingOs: int pread(java.io.FileDescriptor,byte[],int,int,long)> 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<java.nio.charset.CharsetDecoderICU: void implReplaceWith(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledProtocols(java.lang.String[])> 
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)> 
<android.webkit.WebSettingsClassic: void setBlockNetworkImage(boolean)> 
<java.util.logging.LogRecord: void setSequenceNumber(long)> 
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> 
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> 
<android.widget.GridView: void setAdapter(android.widget.ListAdapter)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int)> 
<android.os.BatteryStats: void dumpCheckinLocked(java.io.PrintWriter,int,int)> 
<android.widget.ScrollView: void setSmoothScrollingEnabled(boolean)> 
<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)> 
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)> 
<android.media.videoeditor.OverlayFrame: void setOverlayFrameWidth(int)> 
<android.animation.ObjectAnimator: void setTarget(java.lang.Object)> 
<org.apache.xalan.templates.ElemMessage: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object set(int,java.lang.Object)> 
<android.app.ActivityManagerProxy: void removeContentProviderExternal(java.lang.String,android.os.IBinder)> 
<android.app.ActivityManager: void setFrontActivityScreenCompatMode(int)> 
<java.text.DateFormatSymbols: void setShortWeekdays(java.lang.String[])> 
<android.media.videoeditor.OverlayFrame: void setBitmap(android.graphics.Bitmap)> 
<android.graphics.drawable.ColorDrawable: void setAlpha(int)> 
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)> 
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)> 
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)> 
<android.app.ApplicationThreadProxy: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> 
<android.net.wifi.p2p.WifiP2pManager: void setDeviceName(android.net.wifi.p2p.WifiP2pManager$Channel,java.lang.String,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.util.MathUtils: float log(float)> 
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean,boolean)> 
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,float)> 
<org.jivesoftware.smack.packet.RosterPacket: void setEtag(java.lang.String)> 
<org.apache.xml.utils.NodeVector: void setElementAt(int,int)> 
<org.apache.harmony.xml.parsers.SAXParserImpl: void setProperty(java.lang.String,java.lang.Object)> 
<dalvik.system.profiler.HprofBinaryToAscii: boolean write(dalvik.system.profiler.HprofData)> 
<android.test.AndroidTestRunner: void setPerformanceWriterIfPerformanceCollectorTestCase(junit.framework.Test,android.os.PerformanceCollector$PerformanceResultsWriter)> 
<java.net.ServerSocket: void setSoTimeout(int)> 
<gov.nist.javax.sip.header.ims.SecurityVerify: void setValue(java.lang.String)> 
<android.database.sqlite.SQLiteConnection: void setAutoCheckpointInterval()> 
<android.renderscript.ScriptGroup: void setOutput(android.renderscript.Script$KernelID,android.renderscript.Allocation)> 
<android.text.Selection: void setSelection(android.text.Spannable,int,int)> 
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)> 
<android.os.CommonTimeUtils: int transactSetLong(int,long)> 
<android.widget.ProgressBar: void setVisibility(int)> 
<android.widget.PopupWindow: void setClippingEnabled(boolean)> 
<android.webkit.ZoomManager: void updateMultiTouchSupport(android.content.Context)> 
<android.appwidget.AppWidgetHostView: void setOnClickHandler(android.widget.RemoteViews$OnClickHandler)> 
<org.apache.http.conn.BasicManagedEntity: void writeTo(java.io.OutputStream)> 
<org.kxml2.io.KXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)> 
<android.widget.SimpleCursorAdapter: void setStringConversionColumn(int)> 
<android.webkit.WebHistoryItemClassic: void setFavicon(android.graphics.Bitmap)> 
<android.widget.RemoteViews: void setBitmapCache(android.widget.RemoteViews$BitmapCache)> 
<android.view.ViewStub: void setOnInflateListener(android.view.ViewStub$OnInflateListener)> 
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.AuthenticationInfo: void setNextNonce(java.lang.String)> 
<android.drm.DrmManagerClient: void setOnEventListener(android.drm.DrmManagerClient$OnEventListener)> 
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)> 
<android.widget.ListView: void setSelection(int)> 
<java.text.Bidi: int getRunLevel(int)> 
<org.xml.sax.helpers.XMLReaderAdapter: void setLocale(java.util.Locale)> 
<org.apache.xpath.XPathContext: void setErrorListener(javax.xml.transform.ErrorListener)> 
<gov.nist.javax.sip.header.CallIdentifier: void setCallID(java.lang.String)> 
<android.app.ApplicationThreadProxy: void scheduleSendResult(android.os.IBinder,java.util.List)> 
<android.support.v4.view.ViewPager: android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)> 
<android.location.Location: void writeToParcel(android.os.Parcel,int)> 
<android.media.audiofx.AudioEffect: void setParameterListener(android.media.audiofx.AudioEffect$OnParameterChangeListener)> 
<java.sql.Time: void setDate(int)> 
<java.util.Calendar: void set(int,int,int)> 
<org.apache.xalan.templates.ElemNumber: void setLetterValue(org.apache.xalan.templates.AVT)> 
<gov.nist.javax.sip.header.extensions.Replaces: void setToTag(java.lang.String)> 
<android.net.wifi.WifiStateMachine: boolean syncRemoveNetwork(com.android.internal.util.AsyncChannel,int)> 
<org.apache.xalan.templates.ElemCopyOf: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)> 
<android.webkit.WebView: boolean setFrame(int,int,int,int)> 
<android.webkit.WebViewClassic: boolean updateScrollCoordinates(int,int)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setDomain(java.lang.String)> 
<android.telephony.ServiceState: void setSystemAndNetworkId(int,int)> 
<gov.nist.javax.sip.stack.SIPTransaction: void setEncapsulatedChannel(gov.nist.javax.sip.stack.MessageChannel)> 
<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: void setSourceBuffer(java.nio.ByteBuffer)> 
<android.widget.ZoomButton: void setEnabled(boolean)> 
<android.view.VolumePanel: void postRemoteSliderVisibility(boolean)> 
<org.kxml2.io.KXmlSerializer: void docdecl(java.lang.String)> 
<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setHardKeyboardHidden(boolean)> 
<gov.nist.javax.sip.SipStackImpl: void setEnabledCipherSuites(java.lang.String[])> 
<gov.nist.javax.sip.header.ProxyRequire: void setOptionTag(java.lang.String)> 
<gov.nist.core.NameValueList: void set(gov.nist.core.NameValue)> 
<android.telephony.CellSignalStrengthCdma: void setEvdoEcio(int)> 
<org.apache.xpath.functions.FuncCurrent: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.graphics.drawable.LayerDrawable: void setId(int,int)> 
<android.widget.RemoteViews: void setUser(android.os.UserHandle)> 
<java.text.DateFormatSymbols: void setShortMonths(java.lang.String[])> 
<gov.nist.core.GenericObject: java.lang.String debugDump(int)> 
<org.xmlpull.v1.sax2.Driver: void setEntityResolver(org.xml.sax.EntityResolver)> 
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])> 
<android.location.Address: void setFeatureName(java.lang.String)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSink(boolean)> 
<org.kxml2.io.KXmlSerializer: void entityRef(java.lang.String)> 
<org.ccil.cowan.tagsoup.ElementType: void setParent(org.ccil.cowan.tagsoup.ElementType)> 
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setPassword(boolean)> 
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)> 
<android.support.v4.view.ViewPager: void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)> 
<gov.nist.javax.sip.header.ims.PServedUser: void setSessionCase(java.lang.String)> 
<android.media.effect.effects.IdentityEffect: void setParameter(java.lang.String,java.lang.Object)> 
<android.content.SyncManager: void dumpRecentHistory(java.io.PrintWriter)> 
<org.apache.xml.serializer.ToXMLStream: void addUniqueAttribute(java.lang.String,java.lang.String,int)> 
<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence)> 
<android.webkit.WebSettingsClassic: void setMinimumFontSize(int)> 
<android.graphics.drawable.PictureDrawable: void setAlpha(int)> 
<android.webkit.WebViewClassic: void animateHandle(boolean,android.animation.ObjectAnimator,android.graphics.Point,int,android.webkit.WebViewClassic$SelectionHandleAlpha)> 
<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)> 
<android.widget.TextView: void setShowSoftInputOnFocus(boolean)> 
<java.util.logging.LogRecord: void setLevel(java.util.logging.Level)> 
<android.webkit.WebSettingsClassic: void setLinkPrefetchEnabled(boolean)> 
<android.preference.PreferenceManager: void setFragment(android.preference.PreferenceFragment)> 
<android.widget.HorizontalScrollView: void setOverScrollMode(int)> 
<java.util.concurrent.ForkJoinPool: void execute(java.lang.Runnable)> 
<org.xmlpull.v1.sax2.Driver: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)> 
<libcore.io.Posix: int pread(java.io.FileDescriptor,java.nio.ByteBuffer,long)> 
<org.apache.james.mime4j.decoder.DecoderUtil: byte[] decodeBaseQuotedPrintable(java.lang.String)> 
<gov.nist.javax.sip.header.extensions.Replaces: void setCallIdentifier(gov.nist.javax.sip.header.CallIdentifier)> 
<android.widget.RemoteViews: void setTextColor(int,int)> 
<java.sql.Date: void setSeconds(int)> 
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)> 
<java.security.cert.X509CertSelector: void setPolicy(java.util.Set)> 
<org.kxml2.io.KXmlParser: void setInput(java.io.Reader)> 
<java.util.SimpleTimeZone: void setStartRule(int,int,int,int,boolean)> 
<org.jivesoftware.smack.RosterEntry: void setVCard(org.jivesoftware.smackx.packet.VCard)> 
<gov.nist.javax.sip.address.TelURLImpl: void setPostDial(java.lang.String)> 
<javax.net.ssl.HttpsURLConnection: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)> 
<android.content.BroadcastReceiver: void setResultCode(int)> 
<org.jivesoftware.smackx.packet.MUCUser: void setStatus(org.jivesoftware.smackx.packet.MUCUser$Status)> 
<android.graphics.drawable.ShapeDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)> 
<org.apache.harmony.xml.ExpatReader: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)> 
<jp.co.omronsoft.openwnn.JAJP.DefaultSoftKeyboardJAJP: void setHardware12Keyboard(boolean)> 
<android.net.wifi.p2p.WifiP2pDeviceList: void updateGroupCapability(java.lang.String,int)> 
<android.widget.ScrollBarDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<junit.textui.TestRunner: void runFailed(java.lang.String)> 
<android.telephony.CellIdentityGsm: void log(java.lang.String)> 
<android.net.BaseNetworkStateTracker: void setTeardownRequested(boolean)> 
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)> 
<java.util.HugeEnumSet: void setRange(java.lang.Enum,java.lang.Enum)> 
<gov.nist.javax.sip.header.SubscriptionState: void setState(java.lang.String)> 
<org.apache.http.params.HttpProtocolParamBean: void setContentCharset(java.lang.String)> 
<android.hardware.usb.UsbInterface: void writeToParcel(android.os.Parcel,int)> 
<android.view.ViewRootImpl: void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo,long)> 
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> 
<org.jivesoftware.smackx.ServiceDiscoveryManager: void setNodeInformationProvider(java.lang.String,org.jivesoftware.smackx.NodeInformationProvider)> 
<android.support.v4.view.MenuCompat: boolean setShowAsAction(android.view.MenuItem,int)> 
<gov.nist.javax.sip.header.SIPObject: boolean equals(java.lang.Object)> 
<org.apache.xalan.transformer.TransformerImpl: void setXMLSource(javax.xml.transform.Source)> 
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)> 
<android.bluetooth.BluetoothServerSocket: void setCloseHandler(android.os.Handler,int)> 
<android.filterfw.core.StreamPort: void setFrame(android.filterfw.core.Frame)> 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.lang.String)> 
<org.apache.xml.serializer.SerializerBase: void setEncoding(java.lang.String)> 
<android.view.accessibility.AccessibilityEvent: void setAction(int)> 
<gov.nist.javax.sip.header.RAck: void setRSequenceNumber(long)> 
<org.apache.commons.logging.impl.SimpleLog: void write(java.lang.StringBuffer)> 
<org.apache.xalan.templates.ElemLiteralResult: void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)> 
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> 
<android.net.http.Headers: void setContentEncoding(java.lang.String)> 
<android.app.ActivityManagerProxy: android.os.IBinder newUriPermissionOwner(java.lang.String)> 
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)> 
<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)> 
<android.widget.NumberPicker: void setEnabled(boolean)> 
<org.apache.xml.utils.ObjectVector: void setSize(int)> 
<org.apache.xml.utils.URI: void setPort(int)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: void setEncryptionAlgorithm(java.lang.String)> 
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)> 
<dalvik.system.profiler.DalvikThreadSampler: void setDepth(int)> 
<org.apache.commons.io.output.FileWriterWithEncoding: void write(int)> 
<android.location.LocationRequest: android.location.LocationRequest setSmallestDisplacement(float)> 
<android.net.wifi.p2p.WifiP2pGroup: void setNetworkId(int)> 
<org.jivesoftware.smack.packet.Packet: void setProperty(java.lang.String,boolean)> 
<gov.nist.javax.sip.stack.ServerLog: void setLevel(int)> 
<org.xmlpull.v1.sax2.Driver: void setDTDHandler(org.xml.sax.DTDHandler)> 
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.HTML5VideoViewProxy: void play(java.lang.String,int,int)> 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)> 
<android.filterfw.core.KeyValueMap: void setKeyValues(java.lang.Object[])> 
<android.webkit.WebCoreThreadWatchdog: void run()> 
<org.apache.xml.serializer.WriterToASCI: void write(int)> 
<android.view.MotionEvent: void setEdgeFlags(int)> 
<android.app.ActivityManagerProxy: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)> 
<jp.co.omronsoft.openwnn.JAJP.RomkanHalfKatakana: void setPreferences(android.content.SharedPreferences)> 
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)> 
<android.gesture.GestureLibrary: void setOrientationStyle(int)> 
<java.security.cert.X509CertSelector: void setPrivateKeyValid(java.util.Date)> 
<android.media.AudioRecord: int setNotificationMarkerPosition(int)> 
<org.apache.xalan.templates.ElemSort: void setOrder(org.apache.xalan.templates.AVT)> 
<android.filterfw.core.Filter: void setInputFrame(java.lang.String,android.filterfw.core.Frame)> 
<android.support.v4.app.FragmentPagerAdapter: void startUpdate(android.view.ViewGroup)> 
<android.preference.Preference: void setOnPreferenceChangeInternalListener(android.preference.Preference$OnPreferenceChangeInternalListener)> 
<android.net.wifi.WifiStateMachine: void enableRssiPolling(boolean)> 
<android.app.ApplicationThreadProxy: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])> 
<android.net.wifi.p2p.WifiP2pGroup: void setIsGroupOwner(boolean)> 
<android.widget.SearchView: void setInputType(int)> 
<libcore.icu.NativeDecimalFormat: void setMaximumFractionDigits(int)> 
<android.gesture.GestureOverlayView: void setFadeOffset(long)> 
<android.graphics.Matrix: void setScale(float,float)> 
<gov.nist.javax.sip.header.SIPDate: void setDay(int)> 
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)> 
<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)> 
<android.app.ActivityManagerProxy: boolean killProcessesBelowForeground(java.lang.String)> 
<java.util.logging.Handler: void setErrorManager(java.util.logging.ErrorManager)> 
<org.xml.sax.helpers.AttributesImpl: void setValue(int,java.lang.String)> 
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)> 
<android.app.NativeActivity: void setWindowFlags(int,int)> 
<android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)> 
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)> 
<android.renderscript.RenderScriptGL: void setSurfaceTexture(android.graphics.SurfaceTexture,int,int)> 
<gov.nist.javax.sip.stack.TLSMessageChannel: void handleException(java.text.ParseException,gov.nist.javax.sip.message.SIPMessage,java.lang.Class,java.lang.String,java.lang.String)> 
<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)> 
<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)> 
<android.inputmethodservice.InputMethodService: void onUpdateCursor(android.graphics.Rect)> 
<android.webkit.CallbackProxy: void setWebViewClient(android.webkit.WebViewClient)> 
<java.io.FilterWriter: void write(char[],int,int)> 
<org.apache.commons.io.EndianUtils: void writeSwappedInteger(java.io.OutputStream,int)> 
<android.app.ListFragment: void setListShownNoAnimation(boolean)> 
<android.gesture.GestureOverlayView: void setGestureStrokeLengthThreshold(float)> 
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)> 
<java.text.Collator: void setStrength(int)> 
<android.view.View: void setAlpha(float)> 
<android.text.style.SuggestionRangeSpan: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> 
<org.apache.xalan.templates.Stylesheet: void setExtensionElementPrefixes(org.apache.xml.utils.StringVector)> 
<android.os.UserManager: void setGuestEnabled(boolean)> 
<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)> 
<org.apache.http.impl.cookie.RFC2965VersionAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<android.net.wifi.NetworkUpdateResult: void setNetworkId(int)> 
<android.graphics.drawable.LayerDrawable: void setAlpha(int)> 
<android.widget.SearchView: void setImeOptions(int)> 
<org.xmlpull.v1.XmlPullParserFactory: void setValidating(boolean)> 
<android.filterfw.core.VertexFrame: void setFloats(float[])> 
<gov.nist.javax.sip.message.SIPRequest: void setMethod(java.lang.String)> 
<org.apache.commons.io.output.FileWriterWithEncoding: void write(java.lang.String,int,int)> 
<android.webkit.WebViewClassic: void passToJavaScript(java.lang.String,android.view.KeyEvent)> 
<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)> 
<android.app.ActivityManagerProxy: void setProcessLimit(int)> 
<android.support.v4.util.TimeUtils: void formatDuration(long,java.io.PrintWriter,int)> 
<java.security.cert.X509CertSelector: void setKeyUsage(boolean[])> 
<android.preference.MultiCheckPreference: void setEntries(java.lang.CharSequence[])> 
<android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter,int)> 
<android.widget.TextView: void setTypefaceFromAttrs(java.lang.String,int,int)> 
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)> 
<javax.xml.transform.sax.SAXResult: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setBeforeText(java.lang.CharSequence)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setPackageName(java.lang.Object,java.lang.CharSequence)> 
<java.util.SimpleTimeZone: void setEndRule(int,int,int)> 
<gov.nist.javax.sip.header.extensions.References: void setValue(java.lang.String)> 
<android.widget.GridLayout: void setRowCount(int)> 
<gov.nist.javax.sip.address.TelURLImpl: void setGlobal(boolean)> 
<libcore.net.url.FileHandler: void parseURL(java.net.URL,java.lang.String,int,int)> 
<gov.nist.javax.sip.stack.ServerLog: void setStackProperties(java.util.Properties)> 
<android.app.AlertDialog: void setIcon(int)> 
<android.widget.GridView: void setColumnWidth(int)> 
<org.apache.xalan.templates.StylesheetRoot: void setOptimizer(boolean)> 
<android.inputmethodservice.InputMethodService: void setBackDisposition(int)> 
<android.os.Parcel: void writeIntArray(int[])> 
<jp.co.omronsoft.openwnn.Keyboard: void setKeyWidth(int)> 
<org.jivesoftware.smack.packet.Authentication: void setUsername(java.lang.String)> 
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)> 
<android.widget.ViewSwitcher: void setFactory(android.widget.ViewSwitcher$ViewFactory)> 
<android.bluetooth.BluetoothInputDevice: void log(java.lang.String)> 
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> 
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)> 
<android.webkit.ZoomManager: void setZoomScale(float,boolean)> 
<org.jivesoftware.smack.packet.DataMessage: void setToken(java.lang.String)> 
<android.app.MediaRouteActionProvider: void setExtendedSettingsClickListener(android.view.View$OnClickListener)> 
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)> 
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void endEntity(java.lang.String)> 
<android.webkit.FindActionModeCallback: void setText(java.lang.String)> 
<android.content.SyncStorageEngine: void setBackoff(android.accounts.Account,int,java.lang.String,long,long)> 
<org.apache.xml.serializer.ToStream: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<junit.runner.BaseTestRunner: void setPreference(java.lang.String,java.lang.String)> 
<javax.xml.datatype.FactoryFinder: void debugPrintln(java.lang.String)> 
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)> 
<org.jivesoftware.smack.packet.Packet: void setRmq2Id(java.lang.String)> 
<org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> 
<android.app.ActivityThread: void handleReceiver(android.app.ActivityThread$ReceiverData)> 
<gov.nist.core.HostPort: void setPort(int)> 
<org.apache.xml.serializer.SerializerBase: void setMediaType(java.lang.String)> 
<org.apache.xalan.templates.Stylesheet: void setStripSpaces(org.apache.xalan.templates.WhiteSpaceInfo)> 
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)> 
<android.filterpacks.imageproc.SharpenFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.os.Parcel: void writeDoubleArray(double[])> 
<android.support.v4.view.AccessibilityDelegateCompat: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> 
<android.view.GLES20DisplayList: void setCaching(boolean)> 
<org.apache.xml.serializer.ToHTMLStream: void writeAttrString(java.io.Writer,java.lang.String,java.lang.String)> 
<android.content.pm.PackageInfoLite: void writeToParcel(android.os.Parcel,int)> 
<android.widget.CalendarView: void setFocusedMonthDateColor(int)> 
<android.widget.TextView: void setMinLines(int)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])> 
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.Writer)> 
<org.apache.xpath.functions.FuncExtFunctionAvailable: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.speech.tts.FileSynthesisCallback: int start(int,int,int)> 
<android.view.Window: void setLayout(int,int)> 
<android.view.View: void setHasTransientState(boolean)> 
<android.view.accessibility.AccessibilityManager: void setAccessibilityState(boolean)> 
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)> 
<android.app.ActivityManagerProxy: void grantUriPermissionFromOwner(android.os.IBinder,int,java.lang.String,android.net.Uri,int)> 
<android.view.accessibility.AccessibilityNodeInfo: void setSealed(boolean)> 
<org.apache.xalan.templates.ElemExtensionDecl: void runtimeInit(org.apache.xalan.transformer.TransformerImpl)> 
<org.apache.http.entity.ByteArrayEntity: void writeTo(java.io.OutputStream)> 
<android.app.ActionBar: void setHomeButtonEnabled(boolean)> 
<android.widget.VideoView: void setMediaController(android.widget.MediaController)> 
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)> 
<android.test.ActivityUnitTestCase: void setActivityContext(android.content.Context)> 
<android.preference.SeekBarPreference: void setProgress(int,boolean)> 
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)> 
<android.os.CommonClock: void setTimelineChangedListener(android.os.CommonClock$OnTimelineChangedListener)> 
<android.net.SSLCertificateSocketFactory: void setNpnProtocols(byte[][])> 
<org.xml.sax.helpers.NamespaceSupport: void setNamespaceDeclUris(boolean)> 
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)> 
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> 
<android.widget.ResourceCursorAdapter: void setViewResource(int)> 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void setNamespaceAware(boolean)> 
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> 
<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.core.Host parseHost(java.lang.String)> 
<android.app.ApplicationThreadProxy: void scheduleNewIntent(java.util.List,android.os.IBinder)> 
<gov.nist.core.GenericObjectList: void setMyClass(java.lang.Class)> 
<org.apache.xalan.templates.ElemVariable: void setIsTopLevel(boolean)> 
<java.io.BufferedOutputStream: void write(byte[],int,int)> 
<org.apache.harmony.xml.dom.TextImpl: org.w3c.dom.Text replaceWholeText(java.lang.String)> 
<android.widget.GridLayout: void setAlignmentMode(int)> 
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setHead(java.util.concurrent.locks.AbstractQueuedLongSynchronizer$Node)> 
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)> 
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> 
<gov.nist.core.Debug: void setStackLogger(gov.nist.core.StackLogger)> 
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: void setInput(java.lang.reflect.GenericDeclaration,java.lang.String)> 
<android.webkit.WebViewClassic: void requestFocusNodeHref(android.os.Message)> 
<android.widget.MediaController: void setEnabled(boolean)> 
<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: void setPreferences(android.content.SharedPreferences)> 
<android.content.ContentProviderProxy: int bulkInsert(android.net.Uri,android.content.ContentValues[])> 
<android.accounts.AccountAuthenticatorCache: android.accounts.AuthenticatorDescription parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)> 
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser,java.util.List)> 
<android.location.Location: void setLatitude(double)> 
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)> 
<android.widget.Gallery: void setAnimationDuration(int)> 
<android.media.AudioTrack: int setPlaybackHeadPosition(int)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setTransitionStyle(int)> 
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> 
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.app.PendingIntent)> 
<libcore.icu.CollationElementIteratorICU: void setText(java.text.CharacterIterator)> 
<javax.net.ssl.HttpsURLConnection: void setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)> 
<org.apache.james.mime4j.field.datetime.parser.SimpleCharStream: void setTabSize(int)> 
<android.net.nsd.DnsSdTxtRecord: void writeToParcel(android.os.Parcel,int)> 
<android.support.v4.view.AccessibilityDelegateCompatIcs: void sendAccessibilityEvent(java.lang.Object,android.view.View,int)> 
<android.view.View: void setMinimumWidth(int)> 
<java.net.Socks4Message: void setPort(int)> 
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)> 
<android.widget.GridView: void setStretchMode(int)> 
<org.apache.xalan.templates.OutputProperties: void setQNameProperties(java.lang.String,java.util.Vector)> 
<android.net.wifi.p2p.WifiP2pManager: void requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)> 
<android.util.Log: android.util.Log$TerribleFailureHandler setWtfHandler(android.util.Log$TerribleFailureHandler)> 
<android.widget.AbsListView: void setFastScrollEnabled(boolean)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTrafficClass(int)> 
<android.view.animation.Animation: void setBackgroundColor(int)> 
<android.app.Fragment: void setMenuVisibility(boolean)> 
<android.net.DummyDataStateTracker: boolean setRadio(boolean)> 
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)> 
<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)> 
<android.support.v4.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)> 
<android.net.http.AndroidHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> 
<org.apache.http.params.HttpProtocolParamBean: void setHttpElementCharset(java.lang.String)> 
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<java.util.logging.MemoryHandler: void setPushLevel(java.util.logging.Level)> 
<org.apache.commons.io.FileCleaningTracker: void track(java.lang.String,java.lang.Object,org.apache.commons.io.FileDeleteStrategy)> 
<android.os.CommonTimeConfig: int setAutoDisable(boolean)> 
<android.webkit.WebSettingsClassic: void setForceUserScalable(boolean)> 
<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> 
<android.view.GLES20DisplayList: void setLeftTopRightBottom(int,int,int,int)> 
<android.filterfw.MffEnvironment: void setGLEnvironment(android.filterfw.core.GLEnvironment)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(gov.nist.javax.sip.message.SIPResponse)> 
<android.webkit.WebSettingsClassic: void setShrinksStandaloneImagesToFit(boolean)> 
<org.apache.xml.serializer.ToXMLSAXHandler: void setOutputStream(java.io.OutputStream)> 
<android.net.wifi.WifiNative: boolean setModelNumber(java.lang.String)> 
<org.xml.sax.InputSource: void setCharacterStream(java.io.Reader)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setMapped(boolean)> 
<android.webkit.HTML5VideoViewProxy: void loadPoster(java.lang.String)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: void setAlgorithm(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setInviteTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)> 
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(java.lang.String)> 
<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)> 
<org.apache.xpath.functions.FuncExtFunctionAvailable: void setFunctionTable(org.apache.xpath.compiler.FunctionTable)> 
<org.apache.http.impl.cookie.NetscapeDraftHeaderParser: org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<org.apache.xalan.xslt.EnvironmentCheck: void logMsg(java.lang.String)> 
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> 
<android.text.SpannableStringInternal: void setSpan(java.lang.Object,int,int,int)> 
<android.view.Surface: void setWindowCrop(android.graphics.Rect)> 
<org.xml.sax.helpers.XMLFilterImpl: void setParent(org.xml.sax.XMLReader)> 
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)> 
<android.os.Looper: void dump(android.util.Printer,java.lang.String)> 
<gov.nist.javax.sip.address.TelephoneNumber: void setPhoneNumber(java.lang.String)> 
<android.webkit.WebViewCore: void contentScrollTo(int,int,boolean,boolean)> 
<android.widget.VideoView: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)> 
<android.preference.TwoStatePreference: void setChecked(boolean)> 
<java.net.ServerSocket: void setReceiveBufferSize(int)> 
<dalvik.system.profiler.HprofData: void setDepth(int)> 
<org.xml.sax.ext.Locator2Impl: void setXMLVersion(java.lang.String)> 
<org.jivesoftware.smack.SmackConfiguration: void setKeepAliveInterval(int)> 
<org.apache.harmony.xml.ExpatParser: void handleExternalEntity(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.auth.params.AuthParams: void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String)> 
<org.jivesoftware.smack.XMPPConnection: void setConnected(boolean)> 
<gov.nist.javax.sip.header.SIPETag: void setValue(java.lang.String)> 
<android.webkit.WebViewClassic: void setupPackageListener(android.content.Context)> 
<org.apache.xml.dtm.DTMException: void printStackTrace(java.io.PrintStream)> 
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)> 
<android.media.MediaPlayer: void setVideoScalingMode(int)> 
<java.lang.Thread: void setName(java.lang.String)> 
<android.widget.AutoCompleteTextView: void setText(java.lang.CharSequence,boolean)> 
<android.app.ActivityManagerProxy: java.lang.String getPackageForToken(android.os.IBinder)> 
<android.net.wifi.WifiWatchdogStateMachine: void updateCurrentBssid(java.lang.String)> 
<java.io.LineNumberReader: void setLineNumber(int)> 
<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> 
<android.webkit.WebViewClassic: void onConfigurationChanged(android.content.res.Configuration)> 
<android.database.sqlite.SQLiteStatement: void execute()> 
<android.app.Activity: void setRequestedOrientation(int)> 
<android.app.ActivityManagerProxy: void reportThumbnail(android.os.IBinder,android.graphics.Bitmap,java.lang.CharSequence)> 
<dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)> 
<android.webkit.HTML5VideoViewProxy: void sendTimeupdate()> 
<gov.nist.javax.sip.header.extensions.Replaces: void setCallId(java.lang.String)> 
<java.util.logging.Handler: void setFormatter(java.util.logging.Formatter)> 
<java.lang.reflect.Field: void setShort(java.lang.Object,short)> 
<gov.nist.javax.sip.address.UserInfo: void setUser(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setPort(int)> 
<android.app.Instrumentation: void sendKeyDownUpSync(int)> 
<android.filterfw.core.Frame: void setObjectValue(java.lang.Object)> 
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)> 
<android.app.ActivityManagerProxy: void signalPersistentProcesses(int)> 
<gov.nist.javax.sip.header.Accept: void setMediaRange(gov.nist.javax.sip.header.MediaRange)> 
<android.preference.RingtonePreference: void setShowSilent(boolean)> 
<android.animation.ValueAnimator: void setDurationScale(float)> 
<android.telephony.CellSignalStrengthGsm: void log(java.lang.String)> 
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)> 
<android.webkit.WebViewClassic: void updateDefaultZoomDensity(float)> 
<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<org.apache.xml.serializer.ToStream: boolean addAttributeAlways(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> 
<org.apache.xpath.functions.Function: void setArg(org.apache.xpath.Expression,int)> 
<org.xml.sax.helpers.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)> 
<java.util.jar.JarVerifier: void setManifest(java.util.jar.Manifest)> 
<android.widget.AbsListView: void setTranscriptMode(int)> 
<android.net.wifi.p2p.WifiP2pManager: void discoverServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<gov.nist.javax.sip.header.AlertInfo: void setAlertInfo(javax.sip.address.URI)> 
<org.apache.http.params.HttpConnectionParamBean: void setSocketBufferSize(int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setCertificate(java.lang.String)> 
<android.app.ProgressDialog: void setMax(int)> 
<org.apache.xml.serializer.ToHTMLStream: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder replace(int,int,java.lang.String)> 
<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])> 
<android.media.AudioManager: void setParameters(java.lang.String)> 
<gov.nist.javax.sip.header.TimeStamp: void setTimeDelay(int)> 
<java.util.concurrent.FutureTask: void setException(java.lang.Throwable)> 
<android.filterfw.core.SerializedFrame: void setFloats(float[])> 
<android.view.GLES20RecordingCanvas: void setNextPoolable(android.view.GLES20RecordingCanvas)> 
<android.webkit.AutoCompletePopup: void setAutoFillQueryId(int)> 
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)> 
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> 
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)> 
<org.apache.xalan.templates.StylesheetRoot: void setSource_location(boolean)> 
<java.lang.HexStringParser: double parseDouble(java.lang.String)> 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void setIgnoreComments(boolean)> 
<org.apache.xalan.templates.ElemCallTemplate: void setName(org.apache.xml.utils.QName)> 
<android.media.RingtoneManager: void setIncludeDrm(boolean)> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory)> 
<android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()> 
<libcore.io.Streams: int copy(java.io.InputStream,java.io.OutputStream)> 
<javax.obex.PrivateOutputStream: void write(byte[])> 
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> 
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> 
<org.apache.xml.serializer.ToUnknownStream: void setContentHandler(org.xml.sax.ContentHandler)> 
<org.apache.xml.serializer.ToStream: void cdata(char[],int,int)> 
<org.apache.http.entity.AbstractHttpEntity: void setChunked(boolean)> 
<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler,int)> 
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable)> 
<android.filterpacks.imageproc.GrainFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.apache.xml.serializer.dom3.DOM3SerializerImpl: void setNewLine(char[])> 
<java.util.zip.Deflater: void setLevel(int)> 
<android.webkit.WebViewCore: void updateTextSizeAndScroll(int,int,int,int,int)> 
<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint,int)> 
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> 
<java.nio.FileChannelImpl: java.nio.channels.FileChannel truncate(long)> 
<java.io.OutputStreamWriter: void write(char[],int,int)> 
<android.app.ActivityManagerProxy: void publishService(android.os.IBinder,android.content.Intent,android.os.IBinder)> 
<android.net.rtp.AudioGroup: void setMode(int)> 
<android.widget.TextView: void setCursorPosition_internal(int,int)> 
<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)> 
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setXmlStandalone(boolean)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: java.lang.String getNodeName(int)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setValue(java.lang.String)> 
<android.inputmethodservice.KeyboardView: void setPopupParent(android.view.View)> 
<android.os.SystemProperties: void set(java.lang.String,java.lang.String)> 
<android.net.nsd.NsdManager: void setEnabled(boolean)> 
<android.content.SyncManager: void dumpDayStatistics(java.io.PrintWriter)> 
<org.apache.xpath.NodeSetDTM: void setItem(int,int)> 
<android.widget.ListPopupWindow: void setVerticalOffset(int)> 
<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)> 
<android.webkit.WebViewClassic: void setMockGeolocationPosition(double,double,double)> 
<android.widget.ViewFlipper: void setAutoStart(boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReuseAddress(boolean)> 
<org.apache.xpath.functions.FuncDoclocation: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)> 
<android.text.format.Time: void set(int,int,int,int,int,int)> 
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)> 
<android.support.v4.app.FragmentActivity: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)> 
<java.net.Socket: void setReuseAddress(boolean)> 
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)> 
<java.lang.Thread: void setDaemon(boolean)> 
<org.apache.commons.io.output.TeeOutputStream: void write(byte[])> 
<android.app.ActivityManagerProxy: void setAlwaysFinish(boolean)> 
<android.graphics.Paint: int getTextRunCursor(char[],int,int,int,int,int)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)> 
<android.view.Window: void setCloseOnTouchOutsideIfNotSet(boolean)> 
<android.media.videoeditor.MediaVideoItem: void setVolume(int)> 
<android.media.videoeditor.MediaArtistNativeHelper: void setAudioflag(boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setStrictErrorChecking(boolean)> 
<java.text.DecimalFormat: void setPositiveSuffix(java.lang.String)> 
<android.text.Annotation: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> 
<android.widget.TextView: void setSpan_internal(java.lang.Object,int,int,int)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> 
<org.apache.harmony.crypto.internal.NullCipherSpi: int engineUpdate(byte[],int,int,byte[],int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setContentDescription(java.lang.CharSequence)> 
<java.util.Date: void setYear(int)> 
<org.apache.xpath.CachedXPathAPI: org.apache.xpath.objects.XObject eval(org.w3c.dom.Node,java.lang.String,org.apache.xml.utils.PrefixResolver)> 
<android.net.ProxyProperties: void writeToParcel(android.os.Parcel,int)> 
<android.test.mock.MockResources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> 
<android.app.backup.AbsoluteFileBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setVerifyChainEnabled(boolean)> 
<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)> 
<javax.xml.xpath.XPathFactoryFinder: javax.xml.xpath.XPathFactory _newFactory(java.lang.String)> 
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView$OnCloseListener)> 
<android.net.http.Headers: void setExpires(java.lang.String)> 
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> 
<android.os.ParcelUuid: void writeToParcel(android.os.Parcel,int)> 
<android.support.v4.content.CursorLoader: void setProjection(java.lang.String[])> 
<android.speech.tts.FileSynthesisCallback: int audioAvailable(byte[],int,int)> 
<org.apache.xalan.templates.Stylesheet: void setStylesheetParent(org.apache.xalan.templates.Stylesheet)> 
<org.ccil.cowan.tagsoup.jaxp.SAXParserImpl: void setFeature(java.lang.String,boolean)> 
<android.bluetooth.BluetoothTetheringDataTracker: void setPolicyDataEnable(boolean)> 
<android.widget.PopupWindow: void setTouchable(boolean)> 
<android.inputmethodservice.InputMethodService: void setTheme(int)> 
<android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> 
<android.view.ViewRootImpl: void dispatchCloseSystemDialogs(java.lang.String)> 
<android.widget.ListView: void setSelectionInt(int)> 
<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)> 
<jp.co.omronsoft.openwnn.SymbolList: void setPreferences(android.content.SharedPreferences)> 
<android.app.DownloadManager: void setAccessAllDownloads(boolean)> 
<android.view.GLES20DisplayList: void setLeft(int)> 
<org.apache.xalan.templates.ElemValueOf: void setSelect(org.apache.xpath.XPath)> 
<libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)> 
<android.location.LocationRequest: android.location.LocationRequest setInterval(long)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setUseSessionTickets(boolean)> 
<java.sql.DriverManager: void setLogStream(java.io.PrintStream)> 
<android.nfc.tech.MifareClassic: void setTimeout(int)> 
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)> 
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> 
<org.apache.xml.utils.UnImplNode: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> 
<org.apache.http.message.BasicHttpResponse: void setEntity(org.apache.http.HttpEntity)> 
<android.view.textservice.SentenceSuggestionsInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.ElemTemplateElement: void setPrefixes(org.xml.sax.helpers.NamespaceSupport,boolean)> 
<android.os.BatteryStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String[],java.util.List)> 
<android.widget.RatingBar: void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener)> 
<android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)> 
<android.widget.ListPopupWindow: void setPromptView(android.view.View)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setIdAttributeNode(org.w3c.dom.Attr,boolean)> 
<android.media.effect.FilterGraphEffect: void setParameter(java.lang.String,java.lang.Object)> 
<org.apache.harmony.security.x509.Extension: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<junit.extensions.RepeatedTest: void run(junit.framework.TestResult)> 
<java.text.DecimalFormatSymbols: void setInfinity(java.lang.String)> 
<android.widget.ProgressBar: void setProgress(int)> 
<android.media.AudioService: void sendMasterVolumeUpdate(int,int,int)> 
<org.apache.xml.serializer.ToXMLStream: void entityReference(java.lang.String)> 
<android.view.KeyEvent: void setTainted(boolean)> 
<android.gesture.GestureOverlayView: void setFadeEnabled(boolean)> 
<libcore.net.http.RequestHeaders: void setContentLength(int)> 
<android.app.ActivityManagerProxy: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)> 
<android.filterfw.core.NativeFrame: void setInts(int[])> 
<android.view.accessibility.AccessibilityRecord: void setWindowId(int)> 
<android.webkit.WebViewCore: void chromeTakeFocus(int)> 
<android.text.SpannableStringBuilder: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint,int)> 
<android.animation.ObjectAnimator: void setIntValues(int[])> 
<android.accessibilityservice.AccessibilityService: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> 
<android.preference.PreferenceManager: boolean setPreferences(android.preference.PreferenceScreen)> 
<android.renderscript.RenderScript: void setPriority(android.renderscript.RenderScript$Priority)> 
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)> 
<android.opengl.Matrix: void setIdentityM(float[],int)> 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.File)> 
<android.inputmethodservice.Keyboard: void parseKeyboardAttributes(android.content.res.Resources,android.content.res.XmlResourceParser)> 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setNeedClientAuth(boolean)> 
<android.database.sqlite.SQLiteConnection: void setOnlyAllowReadOnlyOperations(boolean)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void comment(char[],int,int)> 
<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: void sendRequestHeader(org.apache.http.HttpRequest)> 
<javax.xml.parsers.SAXParserFactory: void setSchema(javax.xml.validation.Schema)> 
<org.apache.xpath.axes.OneStepIteratorForward: void setRoot(int,java.lang.Object)> 
<java.text.DecimalFormatSymbols: void setMonetaryDecimalSeparator(char)> 
<android.sax.Element: void setElementListener(android.sax.ElementListener)> 
<android.webkit.WebView: void setInitialScale(int)> 
<android.content.PeriodicSync: void writeToParcel(android.os.Parcel,int)> 
<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)> 
<android.os.UserManager: void setUserIcon(int,android.graphics.Bitmap)> 
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)> 
<dalvik.system.TemporaryDirectory: void setUpDirectory(java.io.File)> 
<org.apache.harmony.security.provider.crypto.SHA1_MessageDigestImpl: void engineUpdate(byte[],int,int)> 
<org.apache.xpath.axes.LocPathIterator: void setIsTopLevel(boolean)> 
<javax.security.auth.SubjectDomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])> 
<android.app.Dialog: void setFeatureDrawableResource(int,int)> 
<android.view.ViewRootImpl: void dispatchSystemUiVisibilityChanged(int,int,int,int)> 
<android.webkit.WebViewClassic: void findNext(boolean)> 
<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)> 
<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setHardKeyboardHidden(boolean)> 
<android.webkit.CallbackProxy: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> 
<org.apache.http.impl.cookie.BasicClientCookie2: void setDiscard(boolean)> 
<android.location.GpsStatus: void setStatus(int,int[],float[],float[],float[],int,int,int)> 
<gov.nist.javax.sip.address.TelephoneNumber: void setParameters(gov.nist.core.NameValueList)> 
<org.apache.xml.serializer.SerializerBase: void setProp(java.lang.String,java.lang.String,boolean)> 
<org.apache.xalan.templates.KeyDeclaration: void setMatch(org.apache.xpath.XPath)> 
<android.text.style.SuperscriptSpan: void updateMeasureState(android.text.TextPaint)> 
<android.net.LinkCapabilities: void log(java.lang.String)> 
<android.content.res.Configuration: void setLocale(java.util.Locale)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setPopupParent(android.view.View)> 
<android.webkit.WebSettingsClassic: void setNavDump(boolean)> 
<gov.nist.javax.sip.header.ims.PChargingVector: void setOriginatingIOI(java.lang.String)> 
<java.io.FileOutputStream: void write(byte[],int,int)> 
<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])> 
<android.widget.AdapterView: void setNextSelectedPositionInt(int)> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)> 
<android.net.InterfaceConfiguration: void setFlag(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setWantClientAuth(boolean)> 
<android.net.NetworkStats: java.lang.String setToString(int)> 
<android.media.AudioManager: void setRingerMode(int)> 
<android.app.DialogFragment: void setStyle(int,int)> 
<gov.nist.javax.sip.stack.SIPTransaction: void setBranch(java.lang.String)> 
<android.animation.ObjectAnimator: void setProperty(android.util.Property)> 
<android.view.animation.Animation: void setFillBefore(boolean)> 
<org.jivesoftware.smackx.packet.MUCInitialPresence: void setHistory(org.jivesoftware.smackx.packet.MUCInitialPresence$History)> 
<android.view.View: boolean setAlphaNoInvalidation(float)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setSecure(boolean)> 
<android.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)> 
<android.webkit.BrowserFrame: void setCertificate(byte[])> 
<org.apache.xalan.templates.OutputProperties: void setIntProperty(org.apache.xml.utils.QName,int)> 
<android.widget.TextClock: void setFormat12Hour(java.lang.CharSequence)> 
<org.apache.james.mime4j.MimeStreamParser: void parseMessage(java.io.InputStream)> 
<android.graphics.drawable.BitmapDrawable: void setGravity(int)> 
<android.net.http.Request: void setLoadingPaused(boolean)> 
<android.test.TestRunner: void setInternalIterations(int)> 
<android.support.v4.widget.SimpleCursorAdapter: void setStringConversionColumn(int)> 
<android.preference.GenericInflater: void setFactory(android.preference.GenericInflater$Factory)> 
<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)> 
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)> 
<android.bluetooth.BluetoothDevice: boolean setTrust(boolean)> 
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> 
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)> 
<android.text.style.SuggestionSpan: void setFlags(int)> 
<gov.nist.javax.sip.message.SIPRequest: gov.nist.javax.sip.message.SIPResponse createResponse(int,java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setScrollX(java.lang.Object,int)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void setDocumentLocator(org.xml.sax.Locator)> 
<org.ccil.cowan.tagsoup.XMLWriter: void startDTD(java.lang.String,java.lang.String,java.lang.String)> 
<android.bluetooth.BluetoothA2dp: void log(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setScrollY(java.lang.Object,int)> 
<gov.nist.javax.sip.address.SipUri: void setGrParam(java.lang.String)> 
<org.apache.xml.res.XMLMessages: void setLocale(java.util.Locale)> 
<org.jivesoftware.smack.packet.PresenceCapability: void setHash(java.lang.String)> 
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult addOrUpdateNetworkNative(android.net.wifi.WifiConfiguration)> 
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)> 
<android.support.v4.content.ModernAsyncTask: void execute(java.lang.Runnable)> 
<org.apache.http.protocol.UriPatternMatcher: void setHandlers(java.util.Map)> 
<org.apache.xml.utils.DefaultErrorHandler: void fatalError(javax.xml.transform.TransformerException)> 
<android.text.style.TypefaceSpan: void writeToParcel(android.os.Parcel,int)> 
<android.support.v4.app.Fragment: void setUserVisibleHint(boolean)> 
<gov.nist.javax.sip.header.ims.PAssertedService: void setApplicationIdentifiers(java.lang.String)> 
<org.apache.xpath.Expression: void executeCharsToContentHandler(org.apache.xpath.XPathContext,org.xml.sax.ContentHandler)> 
<android.net.nsd.NsdManager: void unregisterService(android.net.nsd.NsdManager$RegistrationListener)> 
<org.apache.commons.io.IOUtils: long copyLarge(java.io.Reader,java.io.Writer)> 
<android.view.animation.Transformation: void printShortString(java.io.PrintWriter)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setDSLLocation(java.lang.String)> 
<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)> 
<android.graphics.Bitmap: void setHasMipMap(boolean)> 
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<org.jivesoftware.smackx.packet.DiscoverInfo: void setNode(java.lang.String)> 
<java.text.RuleBasedBreakIterator: void setText(java.text.CharacterIterator)> 
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)> 
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)> 
<android.widget.ZoomButtonsController: void setAutoDismissed(boolean)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> 
<android.support.v4.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)> 
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void setTransactionId(int)> 
<android.view.View: void setIsRootNamespace(boolean)> 
<java.lang.ThreadGroup: void setDaemon(boolean)> 
<android.util.JsonWriter: android.util.JsonWriter close(android.util.JsonScope,android.util.JsonScope,java.lang.String)> 
<android.media.videoeditor.MediaItem: void setGeneratedImageClip(java.lang.String)> 
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(int,java.lang.String)> 
<gov.nist.javax.sip.header.Unsupported: void setOptionTag(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: void setMD5(byte[])> 
<dalvik.system.CloseGuard: void setEnabled(boolean)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setScrollable(boolean)> 
<android.nfc.ApduList: void writeToParcel(android.os.Parcel,int)> 
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> 
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> 
<android.widget.AbsListView: void sendAccessibilityEvent(int)> 
<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)> 
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.AutoCompletePopup: void setAdapter(android.widget.ListAdapter)> 
<android.webkit.CallbackProxy: void onReceivedClientCertRequest(android.webkit.ClientCertRequestHandler,java.lang.String)> 
<org.apache.xml.serializer.dom3.DOM3SerializerImpl: void setErrorHandler(org.w3c.dom.DOMErrorHandler)> 
<org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> 
<android.webkit.AccessibilityInjector: void handleSelectionChangedIfNecessary(java.lang.String)> 
<java.util.concurrent.atomic.AtomicMarkableReference: void set(java.lang.Object,boolean)> 
<android.filterpacks.imageproc.RotateFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.jivesoftware.smack.packet.Presence: void setPriority(int)> 
<java.util.Date: void setTime(long)> 
<java.util.Vector: void setElementAt(java.lang.Object,int)> 
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> 
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)> 
<android.widget.AbsListView: void setFriction(float)> 
<android.net.wifi.WifiMonitor: void notifyNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String,int)> 
<org.apache.harmony.xml.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> 
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> 
<android.widget.ZoomControls: void setIsZoomOutEnabled(boolean)> 
<org.apache.xpath.functions.FuncNormalizeSpace: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.filterpacks.imageproc.CropRectFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<libcore.icu.NativeDecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)> 
<java.security.MessageDigest: void update(byte[])> 
<android.graphics.Matrix: void setSinCos(float,float)> 
<org.apache.http.entity.EntityTemplate: void writeTo(java.io.OutputStream)> 
<android.widget.ListPopupWindow: void setPromptPosition(int)> 
<org.apache.commons.io.CopyUtils: int copy(java.io.Reader,java.io.Writer)> 
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)> 
<android.webkit.WebViewCore: void key(android.view.KeyEvent,int,boolean)> 
<android.net.LinkProperties: void setInterfaceName(java.lang.String)> 
<org.apache.harmony.xml.dom.NodeImpl: void setPrefix(java.lang.String)> 
<java.io.ObjectOutputStream: void write(byte[],int,int)> 
<android.webkit.WebSettingsClassic: void setJavaScriptEnabled(boolean)> 
<android.content.SyncStats: void writeToParcel(android.os.Parcel,int)> 
<android.net.MobileDataStateTracker: void log(java.lang.String)> 
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<android.opengl.GLSurfaceView: void setEGLContextClientVersion(int)> 
<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)> 
<junit.extensions.ActiveTestSuite: void run(junit.framework.TestResult)> 
<org.apache.james.mime4j.message.AbstractBody: void setParent(org.apache.james.mime4j.message.Entity)> 
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,boolean)> 
<gov.nist.javax.sip.header.Expires: void setExpires(int)> 
<android.support.v4.view.ViewPager: void setScrollingCacheEnabled(boolean)> 
<gov.nist.javax.sip.stack.SIPDialog: void setEarlyDialogId(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setFocusable(boolean)> 
<android.widget.CalendarView: void setWeekSeparatorLineColor(int)> 
<android.filterpacks.imageproc.RedEyeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.apache.commons.io.output.FileWriterWithEncoding: void write(java.lang.String)> 
<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String)> 
<android.os.WorkSource: void set(int)> 
<android.app.Activity: void setFinishOnTouchOutside(boolean)> 
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.Object)> 
<java.util.concurrent.atomic.AtomicLong: void set(long)> 
<org.apache.xalan.processor.StylesheetHandler: void setStylesheetType(int)> 
<org.apache.xpath.Arg: void setIsVisible(boolean)> 
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> 
<android.widget.TextView: void setLinkTextColor(int)> 
<android.view.View: void setScrollContainer(boolean)> 
<android.animation.TimeAnimator: void setTimeListener(android.animation.TimeAnimator$TimeListener)> 
<android.media.AudioTrack: int write(byte[],int,int)> 
<android.app.ActivityManagerProxy: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.packet.LoginResponse: void setHeartbeatConfig(org.jivesoftware.smack.packet.HeartbeatConfig)> 
<libcore.io.Posix: int recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)> 
<android.preference.MultiSelectListPreference: void setEntries(java.lang.CharSequence[])> 
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)> 
<android.view.accessibility.AccessibilityNodeInfo: void setConnectionId(int)> 
<libcore.icu.NativeDecimalFormat: void setNegativeSuffix(java.lang.String)> 
<android.app.Instrumentation: void setInTouchMode(boolean)> 
<android.filterfw.core.Filter: void setWaitsOnOutputPort(java.lang.String,boolean)> 
<android.support.v4.app.FragmentPagerAdapter: void finishUpdate(android.view.ViewGroup)> 
<android.hardware.Sensor: void setRange(float,float)> 
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)> 
<org.apache.http.params.HttpProtocolParams: void setUseExpectContinue(org.apache.http.params.HttpParams,boolean)> 
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)> 
<android.net.wifi.WifiNative: boolean setScanResultHandling(int)> 
<android.net.LinkProperties: void setHttpProxy(android.net.ProxyProperties)> 
<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)> 
<android.preference.VolumePreference: void setStreamType(int)> 
<android.view.accessibility.AccessibilityRecord: void setSealed(boolean)> 
<android.widget.Switch: void setTextOff(java.lang.CharSequence)> 
<org.apache.harmony.security.asn1.ASN1Any: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setNeedClientAuth(boolean)> 
<android.text.util.Rfc822Token: void setName(java.lang.String)> 
<android.widget.ListPopupWindow: void setInputMethodMode(int)> 
<android.widget.TextView: void setTextColor(int)> 
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)> 
<libcore.net.http.ChunkedOutputStream: void writeHex(int)> 
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> 
<org.apache.xalan.templates.ElemVariable: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)> 
<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)> 
<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)> 
<android.net.http.HttpResponseCache: void update(java.net.CacheResponse,java.net.HttpURLConnection)> 
<android.widget.VideoView: void setVideoURI(android.net.Uri)> 
<gov.nist.javax.sip.message.SIPMessage: void setSize(int)> 
<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> 
<android.webkit.WebSettings: void setNavDump(boolean)> 
<org.apache.xpath.jaxp.XPathImpl: void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)> 
<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)> 
<org.xml.sax.helpers.XMLFilterImpl: void setEntityResolver(org.xml.sax.EntityResolver)> 
<android.webkit.WebViewClassic: void setHTML5VideoViewProxy(android.webkit.HTML5VideoViewProxy)> 
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> 
<org.apache.http.entity.SerializableEntity: void writeTo(java.io.OutputStream)> 
<org.jivesoftware.smack.RosterEntry: void setQuickContact(boolean)> 
<org.jivesoftware.smackx.packet.VCard: void setFirstName(java.lang.String)> 
<android.app.ApplicationThreadProxy: void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor,int)> 
<android.support.v4.content.LocalBroadcastManager: void sendBroadcastSync(android.content.Intent)> 
<android.widget.RemoteViews: void setIsWidgetCollectionChild(boolean)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])> 
<org.xml.sax.helpers.XMLFilterImpl: void setDTDHandler(org.xml.sax.DTDHandler)> 
<android.os.Parcel: void writeLongArray(long[])> 
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,android.text.style.MetricAffectingSpan[],int,android.graphics.Paint$FontMetricsInt)> 
<java.net.URLConnection: void setDoOutput(boolean)> 
<libcore.net.http.RawHeaders: void setStatusLine(java.lang.String)> 
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)> 
<android.support.v4.view.ViewPager: void setCurrentItemInternal(int,boolean,boolean)> 
<android.filterfw.core.MutableFrameFormat: void setBaseType(int)> 
<android.webkit.WebViewClassic: void setScrollXRaw(int)> 
<gov.nist.core.NameValue: void setName(java.lang.String)> 
<java.text.DateFormatSymbols: void setWeekdays(java.lang.String[])> 
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> 
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: void setSourceBuffers(java.nio.ByteBuffer[],int,int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setRemovedCount(java.lang.Object,int)> 
<org.apache.http.params.HttpConnectionParams: void setTcpNoDelay(org.apache.http.params.HttpParams,boolean)> 
<android.app.ActivityManagerProxy: boolean removeSubTask(int,int)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbTitle(int)> 
<android.app.ActivityManagerProxy: void setImmersive(android.os.IBinder,boolean)> 
<java.text.DateFormatSymbols: void setLocalPatternChars(java.lang.String)> 
<android.webkit.WebViewClassic: void setOverScrollMode(int)> 
<org.apache.xpath.Arg: void setExpression(java.lang.String)> 
<junit.framework.TestCase: void setName(java.lang.String)> 
<java.util.Date: void setMonth(int)> 
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)> 
<android.test.InstrumentationTestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)> 
<android.database.sqlite.SQLiteConnection: int executeForChangedRowCount(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> 
<jp.co.omronsoft.openwnn.TextCandidates1LineViewManager: void setAutoHide(boolean)> 
<android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)> 
<org.apache.xml.utils.DOMBuilder: void setDocumentLocator(org.xml.sax.Locator)> 
<org.apache.xml.serializer.ToStream: int accumDefaultEntity(java.io.Writer,char,int,char[],int,boolean,boolean)> 
<android.widget.ScrollBarDrawable: void setAlpha(int)> 
<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)> 
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String dumpNode(int)> 
<android.view.VelocityTracker: void setNextPoolable(android.view.VelocityTracker)> 
<org.jivesoftware.smackx.packet.VCard: void setEmailWork(java.lang.String)> 
<libcore.icu.NativeDecimalFormat: void setPositivePrefix(java.lang.String)> 
<android.widget.TextView: void setShadowLayer(float,float,float,int)> 
<android.support.v4.content.CursorLoader: void setSelection(java.lang.String)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: void setParameter(java.lang.String,java.lang.String)> 
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> 
<android.os.BinderProxy: void dump(java.io.FileDescriptor,java.lang.String[])> 
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<dalvik.system.profiler.BinaryHprofWriter: void writeHeader(long)> 
<android.webkit.WebViewCore: void setMockGeolocationError(int,java.lang.String)> 
<org.jivesoftware.smack.sasl.SASLMechanism: void authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<android.widget.ToggleButton: void setTextOff(java.lang.CharSequence)> 
<android.renderscript.RenderScript: void setupDiskCache(java.io.File)> 
<gov.nist.core.Host: void setAddress(java.lang.String)> 
<android.os.Parcel: void writeCharArray(char[])> 
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int,boolean)> 
<android.net.wifi.p2p.WifiP2pManager: void clearLocalServices(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<javax.xml.datatype.FactoryFinder: java.lang.Object find(java.lang.String,java.lang.String)> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void parse(org.xml.sax.InputSource)> 
<android.media.videoeditor.MediaItem: void setEndTransition(android.media.videoeditor.Transition)> 
<android.graphics.drawable.BitmapDrawable: void setBitmap(android.graphics.Bitmap)> 
<android.webkit.WebViewCore: void <init>(android.content.Context,android.webkit.WebViewClassic,android.webkit.CallbackProxy,java.util.Map)> 
<android.webkit.WebViewClientClassicExt: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequestHandler,java.lang.String)> 
<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)> 
<junit.runner.Version: void main(java.lang.String[])> 
<java.net.DatagramPacket: void setData(byte[],int,int)> 
<android.webkit.ZoomManager: void setDefaultZoomScale(float)> 
<libcore.net.url.FtpURLConnection: void setDoOutput(boolean)> 
<org.apache.harmony.lang.annotation.AnnotationMember: org.apache.harmony.lang.'annotation'.AnnotationMember setDefinition(org.apache.harmony.lang.'annotation'.AnnotationMember)> 
<libcore.icu.NativeConverter: void setCallbackEncode(long,java.nio.charset.CharsetEncoder)> 
<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)> 
<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)> 
<android.webkit.WebViewCore: void updateSurface(android.webkit.ViewManager$ChildView,int,int,int,int)> 
<org.apache.xml.serializer.WriterToUTF8Buffered: void write(char[],int,int)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setFeature(java.lang.String,boolean)> 
<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)> 
<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: void setPersistentCache(org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)> 
<org.apache.http.impl.conn.AbstractPooledConnAdapter: void setState(java.lang.Object)> 
<java.text.NumberFormat: void setGroupingUsed(boolean)> 
<android.service.dreams.DreamService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.content.BroadcastReceiver: void setOrderedHint(boolean)> 
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> 
<android.webkit.WebSettingsClassic: void setAppCacheEnabled(boolean)> 
<android.widget.SearchView: void setSearchableInfo(android.app.SearchableInfo)> 
<org.apache.xalan.templates.OutputProperties: void setProperty(java.lang.String,java.lang.String)> 
<org.apache.commons.io.output.ByteArrayOutputStream: java.io.InputStream toBufferedInputStream(java.io.InputStream)> 
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> 
<org.apache.xalan.templates.Stylesheet: void replaceTemplate(org.apache.xalan.templates.ElemTemplate,int)> 
<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)> 
<org.apache.xml.serializer.WriterToASCI: void write(java.lang.String)> 
<android.support.v4.app.Fragment: void setArguments(android.os.Bundle)> 
<android.widget.Toast: void setDuration(int)> 
<java.security.cert.X509CertSelector: void setExtendedKeyUsage(java.util.Set)> 
<gov.nist.javax.sip.message.ContentImpl: void setContent(java.lang.Object)> 
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)> 
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)> 
<android.text.MeasuredText: void setPara(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)> 
<libcore.net.http.HttpsURLConnectionImpl: void setDoInput(boolean)> 
<org.apache.harmony.xml.dom.DocumentImpl: void setXmlVersion(java.lang.String)> 
<org.jivesoftware.smack.util.PacketParserUtils: org.jivesoftware.smack.packet.Packet parseBatchPresence(com.google.common.io.protocol.ProtoBuf,long)> 
<gov.nist.javax.sip.header.Indentation: void setIndentation(int)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setProperty(java.lang.String,java.lang.Object)> 
<java.text.DecimalFormatSymbols: void setMinusSign(char)> 
<org.apache.xml.utils.ThreadControllerWrapper: java.lang.Thread runThread(java.lang.Runnable,int)> 
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)> 
<junit.textui.ResultPrinter: void printHeader(long)> 
<android.webkit.HTML5VideoView: void setStartWhenPrepared(boolean)> 
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> 
<android.location.Criteria: void setHorizontalAccuracy(int)> 
<gov.nist.core.GenericObjectList: boolean match(java.lang.Object)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setEnabled(boolean)> 
<android.view.GLES20DisplayList: void setTop(int)> 
<android.animation.AnimatorSet: void setTarget(java.lang.Object)> 
<android.webkit.CallbackProxy: void sendMessageToUiThreadSync(android.os.Message)> 
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.message.SIPMessage: void setFromTag(java.lang.String)> 
<org.apache.http.client.protocol.ClientContextConfigurer: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> 
<android.gesture.GestureOverlayView: void setGestureStrokeType(int)> 
<android.view.GLES20DisplayList: void setCameraDistance(float)> 
<android.widget.LinearLayout: void setHorizontalGravity(int)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.media.AudioTrack: int setNotificationMarkerPosition(int)> 
<android.database.CursorWindow: boolean setNumColumns(int)> 
<gov.nist.javax.sip.header.ims.PAssociatedURI: void setValue(java.lang.String)> 
<jp.co.omronsoft.openwnn.KeyboardView: boolean setShifted(boolean)> 
<gov.nist.javax.sip.header.Credentials: void setScheme(java.lang.String)> 
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer$OnJetEventListener,android.os.Handler)> 
<org.apache.xalan.templates.ElemForEach: void setExpression(org.apache.xpath.Expression)> 
<libcore.io.OsConstants: boolean WCOREDUMP(int)> 
<org.apache.http.impl.conn.tsccm.BasicPoolEntry: void updateExpiry(long,java.util.concurrent.TimeUnit)> 
<android.app.ProgressDialog: void setMessage(java.lang.CharSequence)> 
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> 
<android.support.v4.app.ListFragment: void setListShown(boolean)> 
<android.support.v4.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> 
<android.speech.tts.BlockingAudioTrack: int write(byte[])> 
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> 
<java.io.LineNumberInputStream: void setLineNumber(int)> 
<gov.nist.javax.sip.message.SIPRequest: void setMessageChannel(java.lang.Object)> 
<org.apache.xml.serializer.WriterToASCI: void write(char[],int,int)> 
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)> 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void setEntityResolver(org.xml.sax.EntityResolver)> 
<org.apache.xalan.templates.ElemLiteralResult: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<org.apache.xml.serializer.dom3.LSSerializerImpl: void setParameter(java.lang.String,java.lang.Object)> 
<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)> 
<android.widget.TextView: void replaceText_internal(int,int,java.lang.CharSequence)> 
<android.os.CommonTimeConfig: void setServerDiedListener(android.os.CommonTimeConfig$OnServerDiedListener)> 
<android.content.Intent: android.content.Intent setPackage(java.lang.String)> 
<org.apache.xpath.functions.FuncBoolean: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.text.style.SubscriptSpan: void updateDrawState(android.text.TextPaint)> 
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: void setSHA(byte[])> 
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)> 
<android.content.ContentProvider: void setWritePermission(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: void setEnableSessionCreation(boolean)> 
<javax.xml.transform.stream.StreamSource: void setInputStream(java.io.InputStream)> 
<android.preference.SeekBarPreference: void setMax(int)> 
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingText(java.lang.CharSequence,int)> 
<android.support.v4.view.PagerAdapter: void startUpdate(android.view.View)> 
<org.apache.xpath.jaxp.XPathFactoryImpl: void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)> 
<org.jivesoftware.smackx.packet.VCard: void setField(java.lang.String,java.lang.String,boolean)> 
<android.widget.Spinner: void setPopupBackgroundDrawable(android.graphics.drawable.Drawable)> 
<org.apache.http.util.EntityUtils: void updateEntity(org.apache.http.HttpResponse,org.apache.http.HttpEntity)> 
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)> 
<android.widget.TextView: boolean setFrame(int,int,int,int)> 
<android.widget.GridView: void setVerticalSpacing(int)> 
<android.renderscript.RSSurfaceView: void setRenderScriptGL(android.renderscript.RenderScriptGL)> 
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setLongClickable(java.lang.Object,boolean)> 
<org.jivesoftware.smackx.packet.VCard: void setAvatar(byte[])> 
<android.view.Window: void setWindowAnimations(int)> 
<android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> 
<java.io.OutputStream: void write(byte[],int,int)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment)> 
<android.content.pm.ParceledListSlice: void setLastSlice(boolean)> 
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> 
<gov.nist.javax.sip.header.Challenge: void setScheme(java.lang.String)> 
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)> 
<android.webkit.WebViewClassic: void setJsFlags(java.lang.String)> 
<gov.nist.javax.sip.header.MediaRange: void setSubtype(java.lang.String)> 
<android.location.Criteria: void setVerticalAccuracy(int)> 
<org.apache.commons.io.input.CharSequenceReader: int read(char[],int,int)> 
<org.apache.xpath.functions.FuncSubstringBefore: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])> 
<gov.nist.javax.sip.header.SIPObjectList: java.lang.String debugDump(int)> 
<gov.nist.javax.sip.message.SIPMessage: void setTo(javax.sip.header.ToHeader)> 
<android.view.View: void setBackground(android.graphics.drawable.Drawable)> 
<org.apache.xml.utils.DOM2Helper: void setDocument(org.w3c.dom.Document)> 
<android.widget.Switch: void setTextOn(java.lang.CharSequence)> 
<org.jivesoftware.smack.packet.XMPPError: void setType(java.lang.String)> 
<android.net.wifi.WifiNative: boolean setWfdEnable(boolean)> 
<android.webkit.WebViewClassic: void sendKeyEvent(android.view.KeyEvent)> 
<org.apache.xpath.patterns.StepPattern: void setRelativePathPattern(org.apache.xpath.patterns.StepPattern)> 
<android.widget.ZoomButton: void setZoomSpeed(long)> 
<org.apache.james.mime4j.field.contenttype.parser.SimpleCharStream: void setTabSize(int)> 
<android.util.JsonWriter: void replaceTop(android.util.JsonScope)> 
<gov.nist.javax.sip.header.ErrorInfo: void setErrorMessage(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledProtocols(java.lang.String[])> 
<android.view.animation.AnimationSet: void setFillBefore(boolean)> 
<android.widget.AbsListView: void setVelocityScale(float)> 
<android.support.v4.app.Fragment: void setHasOptionsMenu(boolean)> 
<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)> 
<android.view.View: void setPressed(boolean)> 
<org.apache.http.cookie.params.CookieSpecParamBean: void setDatePatterns(java.util.Collection)> 
<android.widget.TextView: void setHighlightColor(int)> 
<android.media.audiofx.Virtualizer: void setStrength(short)> 
<android.widget.ZoomButtonsController: void setTouchTargetView(android.view.View)> 
<android.opengl.GLSurfaceView: void setGLWrapper(android.opengl.GLSurfaceView$GLWrapper)> 
<android.os.Handler: void dump(android.util.Printer,java.lang.String)> 
<java.security.Security: void setProperty(java.lang.String,java.lang.String)> 
<android.webkit.WebViewClassic: void removeJavascriptInterface(java.lang.String)> 
<org.apache.xml.serializer.ToStream: int writeUTF16Surrogate(char,char[],int,int)> 
<android.app.ContextImpl: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> 
<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: void setPersistentCache(org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)> 
<android.view.ViewGroup: void setClipChildren(boolean)> 
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> 
<android.widget.AutoCompleteTextView: void setOnClickListener(android.view.View$OnClickListener)> 
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> 
<org.apache.xalan.transformer.TransformerImpl: void executeFromSnapshot(org.apache.xalan.transformer.TransformSnapshot)> 
<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)> 
<org.apache.xml.serializer.ToXMLStream: void processingInstruction(java.lang.String,java.lang.String)> 
<android.text.PackedIntVector: void setValueInternal(int,int,int)> 
<org.apache.http.util.ByteArrayBuffer: void setLength(int)> 
<org.apache.xalan.templates.ElemText: void setDisableOutputEscaping(boolean)> 
<android.app.ActivityManagerProxy: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)> 
<android.widget.MultiAutoCompleteTextView: void replaceText(java.lang.CharSequence)> 
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> 
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])> 
<org.apache.http.protocol.UriPatternMatcher: void setObjects(java.util.Map)> 
<org.apache.xalan.processor.ProcessorInclude: void setHref(java.lang.String)> 
<android.net.BaseNetworkStateTracker: void setPolicyDataEnable(boolean)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)> 
<org.apache.xalan.templates.ElemTemplate: void setStylesheet(org.apache.xalan.templates.Stylesheet)> 
<android.webkit.WebSettingsClassic: void setMediaPlaybackRequiresUserGesture(boolean)> 
<android.net.rtp.AudioGroup: void sendDtmf(int)> 
<android.widget.CalendarView: void setWeekNumberColor(int)> 
<android.widget.Spinner: void setDropDownVerticalOffset(int)> 
<java.io.PrintWriter: void write(char[],int,int)> 
<javax.xml.parsers.DocumentBuilderFactory: void setXIncludeAware(boolean)> 
<android.graphics.drawable.AnimatedRotateDrawable: void setAlpha(int)> 
<android.net.wifi.p2p.WifiP2pGroup: void setInterface(java.lang.String)> 
<org.apache.xml.dtm.DTMException: void setLocator(javax.xml.transform.SourceLocator)> 
<android.view.animation.LayoutAnimationController: void setOrder(int)> 
<org.apache.xalan.processor.ProcessorCharacters: void setXslTextElement(org.apache.xalan.templates.ElemText)> 
<android.webkit.ZoomManager: void updateDefaultZoomDensity(float)> 
<android.renderscript.ScriptIntrinsicYuvToRGB: void setInput(android.renderscript.Allocation)> 
<gov.nist.javax.sip.message.SIPRequest: void setSIPVersion(java.lang.String)> 
<android.support.v4.view.PagerTitleStrip: void setTextSpacing(int)> 
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)> 
<libcore.net.http.AbstractHttpOutputStream: void write(int)> 
<android.media.audiofx.Visualizer: int setScalingMode(int)> 
<org.xml.sax.helpers.XMLFilterImpl: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setDigit(char)> 
<org.apache.xml.serializer.SerializerBase: void setDoctypePublic(java.lang.String)> 
<android.location.Criteria: void setCostAllowed(boolean)> 
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)> 
<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setEnableEmoticon(boolean)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setSystemId(java.lang.String)> 
<android.app.backup.WallpaperBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> 
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)> 
<org.apache.xpath.patterns.StepPattern: void setPredicates(org.apache.xpath.Expression[])> 
<org.jivesoftware.smackx.ServiceDiscoveryManager: void setIdentityName(java.lang.String)> 
<org.apache.xalan.templates.ElemTemplate: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.app.AlertDialog: void setTitle(java.lang.CharSequence)> 
<android.view.GLES20RecordingCanvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,int,android.graphics.Paint)> 
<android.webkit.WebViewClassic: void updateDoubleTapZoom(int)> 
<android.net.wifi.WifiInfo: void setRssi(int)> 
<android.support.v4.content.ModernAsyncTask: android.support.v4.content.ModernAsyncTask execute(java.lang.Object[])> 
<gov.nist.javax.sip.header.SIPObject: java.lang.String debugDump(int)> 
<org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> 
<android.app.ActivityThread: void setupGraphicsSupport(android.app.LoadedApk,java.io.File)> 
<org.apache.xml.serializer.ToStream: void setCdataSectionElements(java.util.Vector)> 
<android.content.pm.RegisteredServicesCache: void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)> 
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)> 
<android.speech.tts.TextToSpeech: java.lang.Object runActionNoReconnect(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String)> 
<org.apache.xalan.processor.TransformerFactoryImpl: void setFeature(java.lang.String,boolean)> 
<org.apache.xml.utils.BoolStack: void setTop(boolean)> 
<android.view.WindowInfo: void writeToParcel(android.os.Parcel,int)> 
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.TextView: void setMaxWidth(int)> 
<android.preference.PreferenceActivity: void setListFooter(android.view.View)> 
<libcore.net.http.ChunkedInputStream: int read(byte[],int,int)> 
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int)> 
<org.apache.xalan.templates.ElemTemplateElement: void addOrReplaceDecls(org.apache.xalan.templates.XMLNSDecl)> 
<org.apache.harmony.security.provider.cert.Cache: void put(long,byte[],java.lang.Object)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setSASLAuthenticationEnabled(boolean)> 
<android.telephony.SmsManager: boolean updateMessageOnIcc(int,int,byte[])> 
<java.text.DateFormat: void setNumberFormat(java.text.NumberFormat)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setAttribute(java.lang.String,java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setContentDescription(java.lang.Object,java.lang.CharSequence)> 
<android.preference.Preference: void setIntent(android.content.Intent)> 
<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)> 
<gov.nist.javax.sip.header.SIPIfMatch: void setValue(java.lang.String)> 
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)> 
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)> 
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)> 
<android.app.Activity: void setResult(int,android.content.Intent)> 
<android.bluetooth.BluetoothHeadset: void log(java.lang.String)> 
<libcore.io.Streams: java.lang.String readFully(java.io.Reader)> 
<org.apache.xalan.templates.Stylesheet: void setNamespaceAlias(org.apache.xalan.templates.NamespaceAlias)> 
<org.jivesoftware.smack.packet.LoginResponse: void setJid(java.lang.String)> 
<android.widget.TextView: void setError(java.lang.CharSequence)> 
<org.apache.xpath.axes.FilterExprWalker: void setInnerExpression(org.apache.xpath.Expression)> 
<android.graphics.Rect: void set(int,int,int,int)> 
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)> 
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)> 
<org.apache.harmony.security.PublicKeyImpl: void setAlgorithm(java.lang.String)> 
<android.widget.ActivityChooserModel: void setHistoryMaxSize(int)> 
<android.graphics.drawable.LayerDrawable: void setDither(boolean)> 
<android.sax.Element: void setTextElementListener(android.sax.TextElementListener)> 
<java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)> 
<gov.nist.javax.sip.header.StatusLine: void setMatchStatusClass(boolean)> 
<android.app.ActivityManagerProxy: void backupAgentCreated(java.lang.String,android.os.IBinder)> 
<android.widget.LinearLayout: void setBaselineAligned(boolean)> 
<android.service.dreams.DreamService: void setContentView(android.view.View)> 
<android.webkit.WebViewCore: void sendMessage(android.os.Message)> 
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> 
<android.webkit.CallbackProxy: void handleMessage(android.os.Message)> 
<android.graphics.Canvas: void setDensity(int)> 
<org.ccil.cowan.tagsoup.XMLWriter: void write(char)> 
<org.xml.sax.helpers.AttributesImpl: void setLocalName(int,java.lang.String)> 
<android.view.Surface: void setLayerStack(int)> 
<android.filterfw.core.FilterFunction: void setInputValue(java.lang.String,java.lang.Object)> 
<java.text.FieldPosition: void setEndIndex(int)> 
<org.apache.xml.utils.URI: void setUserinfo(java.lang.String)> 
<android.os.ServiceManagerProxy: void setPermissionController(android.os.IPermissionController)> 
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)> 
<android.telephony.ServiceState: void setCdmaDefaultRoamingIndicator(int)> 
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> 
<android.widget.PopupMenu: void setOnDismissListener(android.widget.PopupMenu$OnDismissListener)> 
<android.webkit.WebSettings: void setPluginsEnabled(boolean)> 
<android.app.ApplicationThreadProxy: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.util.List,android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,boolean,android.os.Bundle,android.app.IInstrumentationWatcher,int,boolean,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle)> 
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)> 
<org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)> 
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> 
<android.app.backup.SharedPreferencesBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: java.lang.String getUnparsedEntityURI(java.lang.String)> 
<android.net.wifi.WifiInfo: void setLinkSpeed(int)> 
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)> 
<java.nio.CharSequenceAdapter: java.nio.CharBuffer get(char[],int,int)> 
<gov.nist.javax.sip.stack.SIPDialog: void setRouteList(gov.nist.javax.sip.header.RouteList)> 
<android.graphics.drawable.Drawable: void setLayoutDirection(int)> 
<libcore.io.ForwardingOs: void setegid(int)> 
<android.webkit.CookieManagerClassic: void setAcceptCookie(boolean)> 
<android.os.ResultReceiver: void send(int,android.os.Bundle)> 
<org.jivesoftware.smack.packet.Packet: void setProperty(java.lang.String,double)> 
<android.widget.PopupWindow: void setFocusable(boolean)> 
<android.net.wifi.WifiStateMachine: boolean syncSaveConfig(com.android.internal.util.AsyncChannel)> 
<android.net.wifi.WifiNative: boolean setP2pSsidPostfix(java.lang.String)> 
<android.filterfw.core.MutableFrameFormat: void setObjectClass(java.lang.Class)> 
<java.text.MessageFormat: void setFormatsByArgumentIndex(java.text.Format[])> 
<android.net.wifi.WpsInfo: void writeToParcel(android.os.Parcel,int)> 
<android.database.sqlite.SQLiteSession: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,int,android.os.CancellationSignal)> 
<android.content.SyncManager: void dumpSyncState(java.io.PrintWriter)> 
<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: int setApproxPattern(int)> 
<android.os.Message: void setAsynchronous(boolean)> 
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> 
<org.apache.http.impl.client.RequestWrapper: void setMethod(java.lang.String)> 
<java.text.DecimalFormatSymbols: void setPercent(char)> 
<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)> 
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: void setTextContent(java.lang.String)> 
<android.webkit.WebViewClassic: void postUrl(java.lang.String,byte[])> 
<javax.xml.transform.TransformerException: void setLocator(javax.xml.transform.SourceLocator)> 
<org.apache.xalan.templates.ElemTemplateElement: void setLocaterInfo(javax.xml.transform.SourceLocator)> 
<org.apache.http.impl.client.RequestWrapper: void setProtocolVersion(org.apache.http.ProtocolVersion)> 
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<org.apache.james.mime4j.util.TempStorage: void setInstance(org.apache.james.mime4j.util.TempStorage)> 
<org.apache.xpath.XPathContext: void setSourceTreeManager(org.apache.xpath.SourceTreeManager)> 
<android.widget.TextView: void setTextScaleX(float)> 
<android.widget.AbsSpinner: void setSelectionInt(int,boolean)> 
<org.apache.harmony.security.asn1.ASN1Implicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.nfc.tech.NfcA: void setTimeout(int)> 
<android.nfc.tech.NfcF: void setTimeout(int)> 
<android.widget.AdapterViewFlipper: void setAdapter(android.widget.Adapter)> 
<android.media.videoeditor.MediaArtistNativeHelper: void setVideoCodec(int)> 
<android.app.Notification: void writeToParcel(android.os.Parcel,int)> 
<android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)> 
<org.xml.sax.InputSource: void setSystemId(java.lang.String)> 
<android.util.Property: void set(java.lang.Object,java.lang.Object)> 
<android.webkit.CallbackProxy: void onCloseWindow(android.webkit.WebViewClassic)> 
<android.webkit.WebViewCore: void updateTextfield(int,java.lang.String,int)> 
<android.media.AsyncPlayer: void setUsesWakeLock(android.content.Context)> 
<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)> 
<android.animation.AnimatorSet: void setStartDelay(long)> 
<android.widget.RemoteViews: void setDrawableParameters(int,boolean,int,int,android.graphics.PorterDuff$Mode,int)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> 
<android.drm.DrmManagerClient: void setOnErrorListener(android.drm.DrmManagerClient$OnErrorListener)> 
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)> 
<java.util.logging.Logger: void setUseParentHandlers(boolean)> 
<android.net.UrlQuerySanitizer: void setPreferFirstRepeatedParameter(boolean)> 
<android.webkit.WebViewClassic: void sendBatchableInputMessage(int,int,int,java.lang.Object)> 
<android.net.wifi.p2p.WifiP2pGroup: void setOwner(android.net.wifi.p2p.WifiP2pDevice)> 
<android.view.View: void setBackgroundColor(int)> 
<java.net.HttpCookie: void setDiscard(boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setVisibleToUser(java.lang.Object,boolean)> 
<android.webkit.WebViewClassic: void setMapTrackballToArrowKeys(boolean)> 
<android.database.sqlite.SQLiteConnection: void setJournalSizeLimit()> 
<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)> 
<android.appwidget.AppWidgetHostView: void updateAppWidgetOptions(android.os.Bundle)> 
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)> 
<android.filterfw.core.OutputPort: void setFrame(android.filterfw.core.Frame)> 
<android.webkit.WebViewCore: void access$4400(android.webkit.WebViewCore,int,int)> 
<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)> 
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)> 
<org.apache.xml.serializer.ToStream: void outputDocTypeDecl(java.lang.String,boolean)> 
<org.apache.james.mime4j.field.datetime.parser.DateTimeParserTokenManager: void setDebugStream(java.io.PrintStream)> 
<android.media.MediaPlayer: int setMetadataFilter(java.util.Set,java.util.Set)> 
<gov.nist.javax.sip.header.SIPDate: void setMonth(java.lang.String)> 
<android.graphics.Bitmap: void setDefaultDensity(int)> 
<android.webkit.WebViewClassic: void goBackOrForward(int,boolean)> 
<android.support.v4.app.FragmentStatePagerAdapter: void startUpdate(android.view.ViewGroup)> 
<android.webkit.WebViewClassic: void dumpDomTree(boolean)> 
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)> 
<android.graphics.drawable.DrawableContainer: void setColorFilter(android.graphics.ColorFilter)> 
<junit.textui.ResultPrinter: void printFooter(junit.framework.TestResult)> 
<android.text.format.Time: boolean parse3339(java.lang.String)> 
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> 
<junit.textui.ResultPrinter: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)> 
<org.apache.commons.io.output.ProxyWriter: void write(int)> 
<gov.nist.javax.sip.message.SIPMessage: void setApplicationData(java.lang.Object)> 
<java.io.EmulatedFieldsForDumping: void write(java.io.ObjectOutput)> 
<android.webkit.WebView: void setScrollBarStyle(int)> 
<java.util.concurrent.locks.AbstractQueuedLongSynchronizer: void setState(long)> 
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.graphics.drawable.ShapeDrawable: void setIntrinsicWidth(int)> 
<org.ccil.cowan.tagsoup.jaxp.SAXFactoryImpl: void setFeature(java.lang.String,boolean)> 
<android.location.Criteria: void setAltitudeRequired(boolean)> 
<org.apache.http.entity.FileEntity: void writeTo(java.io.OutputStream)> 
<android.content.SyncContext: void setStatusText(java.lang.String)> 
<android.webkit.WebView: void setBackgroundColor(int)> 
<android.content.ContentProviderProxy: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<android.webkit.CallbackProxy: void onProceededAfterSslError(android.net.http.SslError)> 
<android.content.SyncOperation: java.lang.String dump(boolean)> 
<org.apache.xpath.operations.UnaryOperation: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.stack.ServerLog: void setProperties(java.util.Properties)> 
<java.util.zip.Adler32: void update(int)> 
<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)> 
<android.webkit.WebSettingsClassic: void setAppCachePath(java.lang.String)> 
<org.apache.xalan.templates.ElemForEach: void setSelect(org.apache.xpath.XPath)> 
<android.opengl.GLSurfaceView: void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory)> 
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setViaHost(java.lang.String)> 
<org.apache.harmony.security.asn1.ASN1Integer: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<java.util.concurrent.atomic.AtomicInteger: void set(int)> 
<org.apache.xalan.templates.ElemTemplateElement: void setDOMBackPointer(org.w3c.dom.Node)> 
<android.view.GLES20RecordingCanvas: void setPooled(boolean)> 
<android.widget.ImageSwitcher: void setImageURI(android.net.Uri)> 
<android.webkit.WebSettingsClassic: void setBuiltInZoomControls(boolean)> 
<java.security.cert.PKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)> 
<org.apache.xpath.XPathContext: void setCurrentExpressionNodeStack(org.apache.xml.utils.IntStack)> 
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> 
<android.webkit.WebViewInputDispatcher: void setWebKitWantsTouchEvents(boolean)> 
<org.apache.xalan.processor.XSLTAttributeDef: boolean setAttrValue(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.xalan.templates.ElemTemplateElement)> 
<org.apache.commons.io.output.FileWriterWithEncoding: void write(char[],int,int)> 
<android.webkit.WebViewClassic: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> 
<android.support.v4.app.FragmentStatePagerAdapter: void finishUpdate(android.view.ViewGroup)> 
<gov.nist.javax.sip.header.ContentLanguage: void setContentLanguage(java.util.Locale)> 
<android.widget.TextView: void setInputExtras(int)> 
<android.inputmethodservice.Keyboard: void setKeyWidth(int)> 
<org.apache.xml.utils.StylesheetPIHandler: void setURIResolver(javax.xml.transform.URIResolver)> 
<org.apache.xalan.xslt.EnvironmentCheck: boolean checkEnvironment(java.io.PrintWriter)> 
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> 
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> 
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)> 
<android.view.inputmethod.BaseInputConnection: void replaceText(java.lang.CharSequence,int,boolean)> 
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> 
<android.widget.Gallery: void setSelectedPositionInt(int)> 
<android.graphics.drawable.DrawableContainer: void setExitFadeDuration(int)> 
<org.jivesoftware.smack.XMPPConnection: void dumpVerbose(java.io.PrintWriter)> 
<android.widget.TextView: void sendAccessibilityEvent(int)> 
<java.sql.Time: void setTime(long)> 
<android.media.AudioService: void setBluetoothA2dpOn(boolean)> 
<android.inputmethodservice.IInputMethodSessionWrapper: void updateSelection(int,int,int,int,int,int)> 
<android.widget.EditText: void setSelection(int)> 
<android.nfc.NfcActivityManager: void setNdefPushMessage(android.app.Activity,android.nfc.NdefMessage)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setForeignAttr(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.media.AudioManager: void setBluetoothScoOn(boolean)> 
<org.apache.commons.io.output.LockableFileWriter: void write(char[],int,int)> 
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)> 
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void setEntityResolver(org.xml.sax.EntityResolver)> 
<org.jivesoftware.smack.packet.StreamError: void setText(java.lang.String)> 
<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])> 
<android.view.Window: void setCloseOnTouchOutside(boolean)> 
<org.jivesoftware.smack.packet.Authentication: void setResource(java.lang.String)> 
<android.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)> 
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)> 
<android.view.GLES20DisplayList: void setAnimationMatrix(android.graphics.Matrix)> 
<android.net.wifi.WifiStateMachine: java.util.List syncGetConfiguredNetworks(com.android.internal.util.AsyncChannel)> 
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)> 
<org.apache.http.impl.cookie.RFC2965PortAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<android.gesture.GestureStore: void setOrientationStyle(int)> 
<android.animation.LayoutTransition: void setDuration(int,long)> 
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(byte[])> 
<android.webkit.GeolocationPermissionsClassic: void createHandler()> 
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)> 
<android.test.mock.MockContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<android.webkit.ViewStateSerializer: boolean serializeViewState(java.io.OutputStream,android.webkit.WebViewCore$DrawData)> 
<android.media.MediaPlayer: void setDataSource(java.lang.String)> 
<android.webkit.HTML5VideoView: void setVideoURI(java.lang.String,android.webkit.HTML5VideoViewProxy)> 
<android.support.v13.app.FragmentStatePagerAdapter: void startUpdate(android.view.ViewGroup)> 
<java.util.zip.ZipEntry: void setSize(long)> 
<org.jivesoftware.smack.GroupChat: void sendMessage(java.lang.String)> 
<gov.nist.javax.sip.header.Via: void setReceived(java.lang.String)> 
<android.net.sip.SipAudioCall: void sendDtmf(int)> 
<android.test.InstrumentationTestCase: void sendRepeatedKeys(int[])> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLetters(android.content.ComponentName,int)> 
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String)> 
<android.os.Message: void setTarget(android.os.Handler)> 
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionCacheSize(int)> 
<android.webkit.CallbackProxy: void onReceivedHttpAuthRequest(android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> 
<android.telephony.gsm.GsmCellLocation: void setPsc(int)> 
<org.apache.xalan.templates.Stylesheet: void setKey(org.apache.xalan.templates.KeyDeclaration)> 
<java.util.concurrent.ThreadLocalRandom: void setSeed(long)> 
<jp.co.omronsoft.openwnn.UserDictionaryToolsEdit: boolean addDictionary(java.lang.String,java.lang.String)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setAttribute(java.lang.String,java.lang.Object)> 
<gov.nist.javax.sip.header.extensions.Join: void setValue(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction)> 
<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)> 
<android.view.DisplayInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.serializer.SerializerBase: void setOutputPropertyDefault(java.lang.String,java.lang.String)> 
<android.graphics.drawable.GradientDrawable: void setCornerRadii(float[])> 
<org.apache.xpath.jaxp.XPathFactoryImpl: void setXPathVariableResolver(javax.xml.xpath.XPathVariableResolver)> 
<android.os.Debug: int setAllocationLimit(int)> 
<android.view.Window: void setCallback(android.view.Window$Callback)> 
<android.view.ViewRootImpl: void playSoundEffect(int)> 
<org.apache.xml.serializer.SerializerTraceWriter: void write(char[],int,int)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setDocumentBaseURI(java.lang.String)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)> 
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri,int)> 
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneNumber(java.lang.String)> 
<android.media.audiofx.PresetReverb: void setPreset(short)> 
<android.filterfw.core.MutableFrameFormat: void setTarget(int)> 
<android.widget.ListPopupWindow: void setModal(boolean)> 
<android.net.ConnectivityManager: void setDataDependency(int,boolean)> 
<gov.nist.javax.sip.header.ims.PChargingVector: void setICIDGeneratedAt(java.lang.String)> 
<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])> 
<java.sql.Date: void setHours(int)> 
<android.content.Intent: void setSelector(android.content.Intent)> 
<java.util.BitSet: void set(int,int,boolean)> 
<android.location.Address: void writeToParcel(android.os.Parcel,int)> 
<android.app.ActivityManagerProxy: void setLockScreenShown(boolean)> 
<android.nfc.Tag: void setConnectedTechnology(int)> 
<android.widget.GridLayout: void setOrientation(int)> 
<java.util.SimpleTimeZone: void setDSTSavings(int)> 
<org.apache.http.conn.scheme.SchemeRegistry: void setItems(java.util.Map)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCGI3GPP(java.lang.String)> 
<org.apache.http.params.HttpProtocolParams: void setHttpElementCharset(org.apache.http.params.HttpParams,java.lang.String)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)> 
<java.text.DecimalFormat: void setParseBigDecimal(boolean)> 
<android.media.AudioService: void dumpStreamStates(java.io.PrintWriter)> 
<org.jivesoftware.smack.packet.DefaultPacketExtension: void setAttributeValue(java.lang.String,java.lang.String)> 
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)> 
<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)> 
<android.widget.Chronometer: void setBase(long)> 
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)> 
<android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> 
<android.filterfw.core.MutableFrameFormat: void setBytesPerSample(int)> 
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)> 
<android.nfc.Tag: void writeBytesWithNull(android.os.Parcel,byte[])> 
<android.view.SurfaceView: void setWindowType(int)> 
<org.apache.xalan.templates.ElemSort: void setSelect(org.apache.xpath.XPath)> 
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])> 
<android.app.ApplicationPackageManager: int getApplicationEnabledSetting(java.lang.String)> 
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)> 
<android.widget.SimpleAdapter: void setViewText(android.widget.TextView,java.lang.String)> 
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)> 
<android.widget.PopupWindow: void setTouchModal(boolean)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeControlSettings(int,int)> 
<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)> 
<org.apache.xml.serializer.ToUnknownStream: void setDoctypeSystem(java.lang.String)> 
<android.widget.NumberPicker: void setWrapSelectorWheel(boolean)> 
<org.apache.http.conn.params.ConnPerRouteBean: void setMaxForRoutes(java.util.Map)> 
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setVersion(java.lang.String)> 
<android.net.NetworkStats: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smack.packet.Packet: void setRmqId(long)> 
<android.test.AndroidTestCase: void setContext(android.content.Context)> 
<android.net.UrlQuerySanitizer: void setAllowUnregisteredParamaters(boolean)> 
<android.widget.AdapterView: void setSelectedPositionInt(int)> 
<org.jivesoftware.smack.packet.Packet: void setLastStreamId(int)> 
<gov.nist.javax.sip.header.AcceptEncoding: void setEncoding(java.lang.String)> 
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int,java.math.BigDecimal)> 
<org.apache.xpath.functions.FuncNumber: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.header.extensions.SessionExpires: void setExpires(int)> 
<java.text.DecimalFormatSymbols: void setDecimalSeparator(char)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setLocalNameTable(org.apache.xml.dtm.ref.DTMStringPool)> 
<android.view.VolumePanel: void postMuteChanged(int,int)> 
<android.net.WebAddress: void setPath(java.lang.String)> 
<android.widget.AbsSpinner: void setSelection(int)> 
<org.apache.xalan.templates.ElemAttribute: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<gov.nist.javax.sip.address.Authority: void setPassword(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setDomStorageEnabled(boolean)> 
<java.net.HttpCookie: void setSecure(boolean)> 
<android.app.ApplicationThreadProxy: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)> 
<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)> 
<java.text.DecimalFormatSymbols: void setPatternSeparator(char)> 
<android.app.Instrumentation: void sendCharacterSync(int)> 
<android.media.effect.SingleFilterEffect: void setParameter(java.lang.String,java.lang.Object)> 
<android.inputmethodservice.SoftInputWindow: void setGravity(int)> 
<android.content.pm.ParceledListSlice: void writeToParcel(android.os.Parcel,int)> 
<org.apache.commons.io.EndianUtils: void writeSwappedFloat(byte[],int,float)> 
<android.net.wifi.WifiWatchdogStateMachine: void dump(java.io.PrintWriter)> 
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> 
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.dtm.ref.DTMDefaultBase: void dumpDTM(java.io.OutputStream)> 
<org.kxml2.io.KXmlSerializer: void cdsect(java.lang.String)> 
<libcore.net.http.RequestHeaders: void setHost(java.lang.String)> 
<org.ccil.cowan.tagsoup.XMLWriter: void comment(char[],int,int)> 
<android.graphics.Bitmap: void setNinePatchChunk(byte[])> 
<java.security.cert.X509CRLSelector: void setDateAndTime(java.util.Date)> 
<org.apache.xml.serializer.ToStream: int processDirty(char[],int,int,char,int,boolean)> 
<java.util.logging.LogRecord: void setMessage(java.lang.String)> 
<gov.nist.javax.sip.header.extensions.SessionExpires: void setRefresher(java.lang.String)> 
<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)> 
<android.view.View: void setFadingEdgeLength(int)> 
<android.app.ContextImpl: void setOuterContext(android.content.Context)> 
<android.graphics.RectF: void set(android.graphics.RectF)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(byte[],int,int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setNeedClientAuth(boolean)> 
<org.apache.james.mime4j.message.Multipart: void setPreamble(java.lang.String)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setNaN(java.lang.String)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)> 
<org.apache.xpath.functions.FuncSubstringAfter: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.speech.srec.WaveHeader: android.speech.srec.WaveHeader setNumChannels(short)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setChecked(java.lang.Object,boolean)> 
<android.content.SyncStorageEngine: void updateOrRemovePeriodicSync(android.accounts.Account,int,java.lang.String,android.os.Bundle,long,boolean)> 
<javax.xml.transform.stream.StreamResult: void setSystemId(java.lang.String)> 
<junit.runner.BaseTestRunner: void setLoading(boolean)> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void setDTDHandler(org.xml.sax.DTDHandler)> 
<libcore.net.http.RequestHeaders: void setUserAgent(java.lang.String)> 
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)> 
<android.database.BulkCursorProxy: void onMove(int)> 
<android.drm.DrmRights: void instantiate(java.io.File,java.lang.String)> 
<android.net.wifi.NetworkUpdateResult: void setProxyChanged(boolean)> 
<org.apache.harmony.xml.ExpatParser: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.content.ContentQueryMap: void setKeepUpdated(boolean)> 
<android.telephony.CellInfoCdma: void setCellSignalStrength(android.telephony.CellSignalStrengthCdma)> 
<android.widget.SimpleAdapter: void setDropDownViewResource(int)> 
<android.app.ApplicationPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)> 
<org.apache.http.protocol.HttpService: void handleRequest(org.apache.http.HttpServerConnection,org.apache.http.protocol.HttpContext)> 
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)> 
<org.apache.harmony.security.x509.CertificatePolicies: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<android.net.wifi.p2p.WifiP2pManager: void setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager$DnsSdTxtRecordListener)> 
<android.app.admin.DeviceAdminInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.serializer.ToUnknownStream: void setIndent(boolean)> 
<android.net.wifi.WifiStateMachine: void log(java.lang.String)> 
<android.filterfw.core.FilterGraph: void setDiscardUnconnectedOutputs(boolean)> 
<android.widget.ArrayAdapter: void setDropDownViewResource(int)> 
<android.webkit.UrlInterceptRegistry: boolean registerHandler(android.webkit.UrlInterceptHandler)> 
<android.widget.ImageView: void setImageLevel(int)> 
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setFromIndex(java.lang.Object,int)> 
<java.text.DateFormat: void setTimeZone(java.util.TimeZone)> 
<android.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)> 
<org.apache.http.protocol.HttpService: void setParams(org.apache.http.params.HttpParams)> 
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<android.widget.ActivityChooserView: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)> 
<android.app.ApplicationThreadProxy: void scheduleCrash(java.lang.String)> 
<org.apache.commons.io.filefilter.NameFileFilter: boolean accept(java.io.File,java.lang.String)> 
<android.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)> 
<java.util.BitSet: void set(int)> 
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)> 
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> 
<android.webkit.WebSettingsClassic: void setEnableSmoothTransition(boolean)> 
<android.webkit.CallbackProxy: android.net.Uri openFileChooser(java.lang.String,java.lang.String)> 
<org.kxml2.io.KXmlSerializer: void setProperty(java.lang.String,java.lang.Object)> 
<org.apache.xpath.patterns.UnionPattern: void setPatterns(org.apache.xpath.patterns.StepPattern[])> 
<android.telephony.SmsCbEtwsInfo: void writeToParcel(android.os.Parcel,int)> 
<android.bluetooth.BluetoothA2dp: boolean setPriority(android.bluetooth.BluetoothDevice,int)> 
<org.apache.xml.serializer.ToStream: void setWriterInternal(java.io.Writer,boolean)> 
<android.telephony.CellIdentityLte: void writeToParcel(android.os.Parcel,int)> 
<android.hardware.usb.UsbDevice: void writeToParcel(android.os.Parcel,int)> 
<android.preference.PreferenceActivity: void setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View$OnClickListener)> 
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> 
<org.apache.http.conn.params.ConnRouteParams: void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost)> 
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.apache.xalan.templates.ElemComment: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setWantClientAuth(boolean)> 
<android.animation.KeyframeSet: void setEvaluator(android.animation.TypeEvaluator)> 
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setChargingCollectionFunctionAddress(java.lang.String)> 
<android.webkit.CallbackProxy: void onUnhandledKeyEvent(android.view.KeyEvent)> 
<org.xml.sax.helpers.XMLFilterImpl: void setDocumentLocator(org.xml.sax.Locator)> 
<java.text.DecimalFormat: void setPositivePrefix(java.lang.String)> 
<android.content.res.Resources: void setCompatibilityInfo(android.content.res.CompatibilityInfo)> 
<gov.nist.javax.sip.address.SipUri: void setUserParam(java.lang.String)> 
<org.apache.http.params.HttpProtocolParams: void setMalformedInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction)> 
<javax.xml.validation.ValidatorHandler: void setProperty(java.lang.String,java.lang.Object)> 
<android.app.ApplicationPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)> 
<android.webkit.WebViewDatabaseClassic: void setFormData(java.lang.String,java.util.HashMap)> 
<android.media.AudioService: void dumpFocusStack(java.io.PrintWriter)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledCipherSuites(java.lang.String[])> 
<org.apache.xml.serializer.ToTextSAXHandler: void setOutputStream(java.io.OutputStream)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setNonce(java.lang.String)> 
<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)> 
<android.widget.AdapterViewAnimator: void setDisplayedChild(int)> 
<android.widget.NumberPicker: void setOnLongPressUpdateInterval(long)> 
<org.apache.xml.serializer.dom3.DOMOutputImpl: void setSystemId(java.lang.String)> 
<android.media.AudioTrack: void setState(int)> 
<android.view.SurfaceView: void setVisibility(int)> 
<org.apache.xml.utils.DOMHelper: java.lang.String getUnparsedEntityURI(java.lang.String,org.w3c.dom.Document)> 
<org.jivesoftware.smack.ProtoBufAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<android.preference.PreferenceManager: void setOnPreferenceTreeClickListener(android.preference.PreferenceManager$OnPreferenceTreeClickListener)> 
<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM,int)> 
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)> 
<android.net.BaseNetworkStateTracker: void setUserDataEnable(boolean)> 
<org.jivesoftware.smack.RosterEntry: void setName(java.lang.String)> 
<org.apache.xml.dtm.ref.DTMDefaultBase: void setShouldStripWhitespace(boolean)> 
<android.view.View: void setNextFocusForwardId(int)> 
<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)> 
<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)> 
<android.app.WallpaperInfo: void writeToParcel(android.os.Parcel,int)> 
<javax.xml.transform.sax.SAXResult: void setSystemId(java.lang.String)> 
<android.app.backup.WallpaperBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> 
<android.webkit.WebSettingsClassic: void setPluginsEnabled(boolean)> 
<org.apache.xml.serializer.ToStream: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.renderscript.RenderScriptGL: void setSurface(android.view.SurfaceHolder,int,int)> 
<org.apache.xml.serializer.ToUnknownStream: void setIndentAmount(int)> 
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> 
<android.widget.DatePicker: void setCurrentLocale(java.util.Locale)> 
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> 
<android.location.Address: void setUrl(java.lang.String)> 
<android.telephony.ServiceState: void setCdmaEriIconIndex(int)> 
<android.telephony.NeighboringCellInfo: void setCid(int)> 
<org.apache.xalan.templates.XUnresolvedVariable: void setVarStackContext(int)> 
<java.sql.Time: void setYear(int)> 
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> 
<android.filterfw.core.SerializedFrame: void setGenericObjectValue(java.lang.Object)> 
<android.view.GLES20TextureLayer: void setSurfaceTexture(android.graphics.SurfaceTexture)> 
<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)> 
<android.location.Location: void dump(android.util.Printer,java.lang.String)> 
<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> 
<org.apache.commons.logging.LogSource: void setLogImplementation(java.lang.Class)> 
<android.os.PerformanceCollector: void startTiming(java.lang.String)> 
<gov.nist.javax.sip.message.SIPResponse: void setStatusLine(gov.nist.javax.sip.header.StatusLine)> 
<android.location.LocationRequest: android.location.LocationRequest setProvider(java.lang.String)> 
<java.text.DecimalFormatSymbols: void setZeroDigit(char)> 
<android.view.MotionEvent: void setTainted(boolean)> 
<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)> 
<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.stack.SIPTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)> 
<android.content.res.Resources: void updateSystemConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)> 
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)> 
<org.apache.harmony.security.x509.DistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<android.test.InstrumentationTestCase: void sendKeys(int[])> 
<gov.nist.javax.sip.message.SIPRequest: java.lang.String debugDump()> 
<android.net.wifi.p2p.WifiP2pManager: void discoverPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.app.ActivityManagerProxy: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> 
<javax.crypto.Mac: void update(byte)> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)> 
<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)> 
<android.test.TouchUtils: void longClickView(android.test.InstrumentationTestCase,android.view.View)> 
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.WebSettingsClassic: void setProperty(java.lang.String,java.lang.String)> 
<javax.xml.parsers.SAXParserFactory: void setXIncludeAware(boolean)> 
<gov.nist.javax.sip.message.SIPMessage: void setHeader(javax.sip.header.Header)> 
<android.hardware.usb.UsbAccessory: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.SipProviderImpl: void sendRequest(javax.sip.message.Request)> 
<android.app.ActivityManagerProxy: boolean isUserRunning(int,boolean)> 
<gov.nist.javax.sip.address.AddressImpl: void setURI(javax.sip.address.URI)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setAlgorithm(java.lang.String)> 
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> 
<dalvik.system.profiler.HprofBinaryToAscii: void usage(java.lang.String)> 
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)> 
<dalvik.system.profiler.AsciiHprofWriter: void write(dalvik.system.profiler.HprofData,java.io.OutputStream)> 
<android.util.JsonReader: void replaceTop(android.util.JsonScope)> 
<android.view.animation.Animation: void setRepeatMode(int)> 
<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)> 
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)> 
<android.media.MediaPlayer: boolean setParameter(int,java.lang.String)> 
<android.media.AudioManager: void setRouting(int,int,int)> 
<gov.nist.javax.sip.header.Via: void setHost(gov.nist.core.Host)> 
<android.app.ActivityManagerProxy: android.content.ComponentName getActivityClassForToken(android.os.IBinder)> 
<android.app.admin.DevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean)> 
<gov.nist.javax.sip.ListeningPointImpl: void setSentBy(java.lang.String)> 
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> 
<android.app.ActivityManagerProxy: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setQName(int,java.lang.String)> 
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)> 
<android.view.inputmethod.InputConnectionWrapper: boolean sendKeyEvent(android.view.KeyEvent)> 
<org.jivesoftware.smack.XMPPException: void printStackTrace(java.io.PrintStream)> 
<org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[])> 
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)> 
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)> 
<android.media.videoeditor.MediaItem: void setBeginTransition(android.media.videoeditor.Transition)> 
<android.app.ProgressDialog: void setProgressStyle(int)> 
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setOutputProperty(java.lang.String,java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setCurrentItemIndex(java.lang.Object,int)> 
<junit.textui.ResultPrinter: void print(junit.framework.TestResult,long)> 
<gov.nist.javax.sip.stack.UDPMessageProcessor: void run()> 
<org.apache.xml.utils.DefaultErrorHandler: void warning(org.xml.sax.SAXParseException)> 
<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)> 
<libcore.net.http.HttpsURLConnectionImpl: void setChunkedStreamingMode(int)> 
<jp.co.omronsoft.openwnn.Keyboard: boolean setShifted(boolean)> 
<org.xml.sax.helpers.XMLReaderAdapter: void setDTDHandler(org.xml.sax.DTDHandler)> 
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> 
<android.app.ApplicationPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> 
<org.apache.xpath.objects.XStringForFSB: void dispatchCharactersEvents(org.xml.sax.ContentHandler)> 
<android.widget.AbsListView: void setTextFilterEnabled(boolean)> 
<android.net.http.SslCertificate: java.util.Date parseDate(java.lang.String)> 
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)> 
<org.apache.harmony.xml.dom.NodeImpl: void setNameNS(org.apache.harmony.xml.dom.NodeImpl,java.lang.String,java.lang.String)> 
<android.os.Parcel: void writeBundle(android.os.Bundle)> 
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> 
<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)> 
<android.app.AlarmManager: void setRepeating(int,long,long,android.app.PendingIntent)> 
<org.apache.xml.utils.UnImplNode: void setTextContent(java.lang.String)> 
<android.app.ActivityManagerProxy: void setFrontActivityScreenCompatMode(int)> 
<android.text.SpannableStringBuilder: void sendToSpanWatchers(int,int,int)> 
<android.animation.LayoutTransition: void setDuration(long)> 
<android.webkit.WebSettingsClassic: void setSansSerifFontFamily(java.lang.String)> 
<android.view.Window: void setFlags(int,int)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setTransition(int)> 
<android.widget.ImageView: void setImageAlpha(int)> 
<android.renderscript.ScriptGroup: void setInput(android.renderscript.Script$KernelID,android.renderscript.Allocation)> 
<org.apache.xpath.functions.FuncLocalPart: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)> 
<android.widget.RelativeLayout: void setHorizontalGravity(int)> 
<android.widget.TextView: void setFilters(android.text.InputFilter[])> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setAccessibilityFocused(boolean)> 
<android.database.sqlite.SQLiteDatabase: void dump(android.util.Printer,boolean)> 
<gov.nist.javax.sip.header.RSeq: void setSeqNumber(long)> 
<org.javia.arity.Function: void setDerivative(org.javia.arity.Function)> 
<org.apache.http.impl.auth.RFC2617Scheme: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)> 
<android.media.MediaExtractor: void setDataSource(java.lang.String)> 
<android.webkit.Plugin: void setPath(java.lang.String)> 
<android.appwidget.AppWidgetManager: void updateAppWidget(int[],android.widget.RemoteViews)> 
<org.apache.xpath.compiler.OpMap: void setOp(int,int)> 
<android.webkit.ZoomManager: void setInitialScaleInPercent(int)> 
<java.text.DecimalFormat: void setNegativeSuffix(java.lang.String)> 
<android.widget.AdapterView: void setEmptyView(android.view.View)> 
<android.os.Parcel: void writeFloatArray(float[])> 
<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)> 
<android.widget.TextClock: void setFormat24Hour(java.lang.CharSequence)> 
<android.inputmethodservice.Keyboard: void setKeyHeight(int)> 
<android.text.style.SubscriptSpan: void updateMeasureState(android.text.TextPaint)> 
<android.content.CursorLoader: void setProjection(java.lang.String[])> 
<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)> 
<android.filterfw.core.Filter: void setInputValue(java.lang.String,java.lang.Object)> 
<android.location.Address: void setSubAdminArea(java.lang.String)> 
<android.view.VolumePanel: void postVolumeChanged(int,int)> 
<libcore.net.url.JarURLConnectionImpl: void setDefaultUseCaches(boolean)> 
<java.util.concurrent.ForkJoinPool: void execute(java.util.concurrent.ForkJoinTask)> 
<android.os.BinderProxy: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> 
<org.apache.xalan.templates.ElemTemplateElement: void unexecuteNSDecls(org.apache.xalan.transformer.TransformerImpl,java.lang.String)> 
<android.webkit.WebViewClassic: void deleteSelection(int,int)> 
<android.os.PerformanceCollector: android.os.Bundle stopTiming(java.lang.String)> 
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> 
<libcore.icu.RuleBasedCollatorICU: void setStrength(int)> 
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(java.lang.String,java.lang.String,byte[])> 
<android.app.ActivityManagerProxy: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)> 
<android.os.CommonTimeConfig: int setMasterElectionPriority(byte)> 
<android.widget.SearchView: void setAppSearchData(android.os.Bundle)> 
<android.telephony.CellSignalStrengthCdma: void writeToParcel(android.os.Parcel,int)> 
<android.media.AudioTrack: int write(short[],int,int)> 
<android.os.CommonTimeConfig: int setMasterElectionGroupId(long)> 
<android.app.Dialog: void setCancelMessage(android.os.Message)> 
<org.xml.sax.helpers.ParserAdapter: void setFeature(java.lang.String,boolean)> 
<android.test.mock.MockIContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<org.apache.xml.dtm.ref.DTMNodeProxy: org.w3c.dom.Text replaceWholeText(java.lang.String)> 
<libcore.icu.CollationElementIteratorICU: void setText(java.lang.String)> 
<org.apache.xpath.XPathException: void setStylesheetNode(java.lang.Object)> 
<org.apache.xml.serializer.ToStream: void endElement(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setRecordProtocol(org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol)> 
<android.os.Parcel: void writeBinderList(java.util.List)> 
<android.net.SSLCertificateSocketFactory: void setKeyManagers(javax.net.ssl.KeyManager[])> 
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)> 
<android.webkit.WebStorageClassic: void getOrigins(android.webkit.ValueCallback)> 
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> 
<android.app.Service: void setForeground(boolean)> 
<java.util.Calendar: void setTimeZone(java.util.TimeZone)> 
<org.apache.harmony.xnet.provider.jsse.DigitalSignature: void update(byte[])> 
<org.apache.xpath.operations.Operation: void setLeftRight(org.apache.xpath.Expression,org.apache.xpath.Expression)> 
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)> 
<android.net.EthernetDataTracker: boolean setRadio(boolean)> 
<android.database.sqlite.SQLiteSession: void setTransactionSuccessful()> 
<libcore.io.Posix: int read(java.io.FileDescriptor,byte[],int,int)> 
<org.apache.xpath.NodeSetDTM: void setEnvironment(java.lang.Object)> 
<gov.nist.javax.sip.header.TimeStamp: void setTimeStamp(float)> 
<android.widget.AdapterViewAnimator: void setOutAnimation(android.animation.ObjectAnimator)> 
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> 
<org.apache.xalan.templates.ElemNumber: void setGroupingSize(org.apache.xalan.templates.AVT)> 
<android.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,int,java.lang.String)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setUseProtoBuf(boolean)> 
<android.graphics.drawable.PictureDrawable: void setDither(boolean)> 
<org.apache.xml.utils.UnImplNode: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xalan.templates.ElemTemplate: void setPriority(double)> 
<android.graphics.drawable.PictureDrawable: void setPicture(android.graphics.Picture)> 
<android.app.Fragment: void setRetainInstance(boolean)> 
<java.io.FileOutputStream: void write(byte[])> 
<org.xmlpull.v1.sax2.Driver: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<android.media.AudioManager: void setSpeakerphoneOn(boolean)> 
<android.widget.SearchView: void setIconifiedByDefault(boolean)> 
<android.view.LayoutInflater: void setPrivateFactory(android.view.LayoutInflater$Factory2)> 
<gov.nist.javax.sip.header.SIPDateHeader: void setDate(gov.nist.javax.sip.header.SIPDate)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setWantClientAuth(boolean)> 
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)> 
<org.apache.xml.serializer.AttributesImplSerializer: void setAttributes(org.xml.sax.Attributes)> 
<android.support.v4.view.ViewPager: void setScrollState(int)> 
<org.apache.xalan.templates.Stylesheet: void setAttributeSet(org.apache.xalan.templates.ElemAttributeSet)> 
<android.test.ActivityUnitTestCase: void setApplication(android.app.Application)> 
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)> 
<android.os.UserManager: void setUserName(int,java.lang.String)> 
<android.renderscript.RenderScript: void nScriptGroupExecute(int)> 
<android.graphics.Paint: void setShadowLayer(float,float,float,int)> 
<android.media.AudioService: void setStreamVolume(int,int,int)> 
<android.graphics.drawable.GradientDrawable: void setGradientType(int)> 
<android.app.DialogFragment: void setShowsDialog(boolean)> 
<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)> 
<org.jivesoftware.smackx.ServiceDiscoveryManager: org.jivesoftware.smackx.packet.DiscoverItems discoverItems(java.lang.String,java.lang.String)> 
<libcore.net.http.HttpsURLConnectionImpl: void setIfModifiedSince(long)> 
<org.apache.http.impl.client.AbstractHttpClient: void setCookieStore(org.apache.http.client.CookieStore)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoTimeout(int)> 
<org.apache.harmony.security.PrivateKeyImpl: void setEncoding(byte[])> 
<android.util.PrefixPrinter: void println(java.lang.String)> 
<org.apache.xpath.functions.FuncStringLength: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()> 
<android.test.AndroidTestRunner: void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)> 
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> 
<java.util.zip.CRC32: void update(int)> 
<android.net.http.RequestQueue: android.net.http.RequestHandle queueRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)> 
<android.content.Intent: void setSourceBounds(android.graphics.Rect)> 
<org.javia.arity.SimpleCodeGen: org.javia.arity.SimpleCodeGen setSymbols(org.javia.arity.Symbols)> 
<org.jivesoftware.smack.packet.Bind: void setJid(java.lang.String)> 
<libcore.io.ForwardingOs: java.net.InetAddress ioctlInetAddress(java.io.FileDescriptor,int,java.lang.String)> 
<android.bluetooth.BluetoothTetheringDataTracker: boolean setRadio(boolean)> 
<android.widget.ViewAnimator: void setDisplayedChild(int)> 
<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test)> 
<android.text.style.SuperscriptSpan: void updateDrawState(android.text.TextPaint)> 
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void setCoupledSinkSupportAtSource(boolean)> 
<javax.xml.transform.stream.StreamResult: void setWriter(java.io.Writer)> 
<org.apache.xml.utils.IntVector: void setElementAt(int,int)> 
<android.webkit.WebSettingsClassic: void setFixedFontFamily(java.lang.String)> 
<android.webkit.WebSettings: void setCacheMode(int)> 
<android.graphics.drawable.RotateDrawable: boolean setVisible(boolean,boolean)> 
<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)> 
<org.apache.xalan.templates.Stylesheet: void setVersion(java.lang.String)> 
<android.widget.GridView: void setNumColumns(int)> 
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> 
<android.inputmethodservice.IInputMethodSessionWrapper: void updateExtractedText(int,android.view.inputmethod.ExtractedText)> 
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)> 
<android.webkit.WebViewClassic: void pageSwapCallback(boolean)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setSource(java.lang.Object,android.view.View)> 
<libcore.io.Posix: int pread(java.io.FileDescriptor,byte[],int,int,long)> 
<android.preference.MultiCheckPreference: void setValue(int,boolean)> 
<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)> 
<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)> 
<org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<org.apache.james.mime4j.message.Multipart: void setEpilogue(java.lang.String)> 
<android.net.wifi.WifiConfigStore: android.net.wifi.NetworkUpdateResult saveNetwork(android.net.wifi.WifiConfiguration)> 
<android.text.style.TypefaceSpan: void updateMeasureState(android.text.TextPaint)> 
<android.net.http.Request: void setConnection(android.net.http.Connection)> 
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)> 
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])> 
<org.apache.xml.serializer.dom3.LSSerializerImpl: void setFilter(org.w3c.dom.ls.LSSerializerFilter)> 
<android.telephony.ServiceState: void setCdmaRoamingIndicator(int)> 
<org.apache.xml.utils.UnImplNode: void setValue(java.lang.String)> 
<android.app.ActivityManagerProxy: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> 
<org.apache.xpath.operations.Operation: void setExpression(org.apache.xpath.Expression)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSendBufferSize(int)> 
<android.webkit.WebViewClassic: void updateWebkitSelection(boolean)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setGroupingSeparator(char)> 
<android.view.ViewStub: void setLayoutResource(int)> 
<android.app.backup.FileBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> 
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> 
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)> 
<android.webkit.MockGeolocation: void setPermission(boolean)> 
<org.ccil.cowan.tagsoup.XMLWriter: void setOutputProperty(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> 
<java.util.Calendar: void set(int,int,int,int,int)> 
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)> 
<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setReceiveUdpBufferSize(int)> 
<android.webkit.ZoomManager: void updateZoomRange(android.webkit.WebViewCore$ViewState,int,int)> 
<java.net.PlainSocketImpl: void socksSendRequest(int,java.net.InetAddress,int)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeCpuSamples(int,java.util.Set)> 
<java.net.Authenticator: void setDefault(java.net.Authenticator)> 
<android.webkit.WebSettingsClassic: void setAllowFileAccessFromFileURLs(boolean)> 
<android.accounts.AccountManagerService: void dumpUser(android.accounts.AccountManagerService$UserAccounts,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)> 
<org.apache.xpath.axes.ChildTestIterator: void setRoot(int,java.lang.Object)> 
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)> 
<java.lang.StringToReal: float parseFloat(java.lang.String)> 
<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)> 
<android.app.ActivityManagerProxy: void unstableProviderDied(android.os.IBinder)> 
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)> 
<org.apache.xml.serializer.ToStream: void setDTDEntityExpansion(boolean)> 
<android.net.DummyDataStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.SIPDate: void setMinute(int)> 
<android.content.EventLogTags: void writeContentUpdateSample(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int)> 
<android.webkit.MockGeolocation: void setError(int,java.lang.String)> 
<android.filterfw.core.FilterPort: void setPortFormat(android.filterfw.core.FrameFormat)> 
<android.app.LauncherActivity: void setTitle(int)> 
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<android.speech.tts.TextToSpeech: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String)> 
<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)> 
<android.webkit.WebSettingsClassic: void setGeolocationEnabled(boolean)> 
<org.apache.commons.io.output.DeferredFileOutputStream: void writeTo(java.io.OutputStream)> 
<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)> 
<android.widget.LinearLayout: void setDividerPadding(int)> 
<android.view.ViewRootImpl: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> 
<android.webkit.WebSettingsClassic: void setUseWideViewPort(boolean)> 
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)> 
<android.app.SearchManager: void setOnDismissListener(android.app.SearchManager$OnDismissListener)> 
<android.filterfw.io.PatternScanner: void updateLineCount(int,int)> 
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)> 
<org.apache.xalan.transformer.TransformerImpl: void setDebug(boolean)> 
<android.widget.ArrayAdapter: void setNotifyOnChange(boolean)> 
<java.text.MessageFormat: void setFormatByArgumentIndex(int,java.text.Format)> 
<java.net.DatagramSocket: void setBroadcast(boolean)> 
<net.oauth.OAuthConsumer: void setProperty(java.lang.String,java.lang.Object)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setDebuggerEnabled(boolean)> 
<org.apache.xalan.templates.FuncDocument: int getDoc(org.apache.xpath.XPathContext,int,java.lang.String,java.lang.String)> 
<java.text.DecimalFormatSymbols: void setPerMill(char)> 
<org.apache.xpath.XPath: void error(org.apache.xpath.XPathContext,int,java.lang.String,java.lang.Object[])> 
<android.graphics.drawable.ClipDrawable: void setLayoutDirection(int)> 
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)> 
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)> 
<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)> 
<java.util.zip.ZipOutputStream: void setLevel(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setClassName(java.lang.Object,java.lang.CharSequence)> 
<android.preference.Preference: void setPersistent(boolean)> 
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)> 
<org.apache.xalan.templates.ElemExtensionScript: void setLang(java.lang.String)> 
<org.apache.xalan.templates.FuncKey: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.app.WallpaperManager: void setStream(java.io.InputStream)> 
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)> 
<android.renderscript.BaseObj: void setName(java.lang.String)> 
<android.location.Criteria: void setSpeedRequired(boolean)> 
<android.net.wifi.WifiNative: boolean setP2pGroupIdle(java.lang.String,int)> 
<android.widget.TextView: void sendOnTextChanged(java.lang.CharSequence,int,int,int)> 
<android.widget.TabWidget: void setTabSelectionListener(android.widget.TabWidget$OnTabSelectionChanged)> 
<java.text.CollationElementIterator: void setText(java.text.CharacterIterator)> 
<android.net.http.Headers: void setContentLength(long)> 
<java.net.HttpCookie: void setValue(java.lang.String)> 
<android.content.ContentProviderProxy: int delete(android.net.Uri,java.lang.String,java.lang.String[])> 
<gov.nist.javax.sip.message.SIPMessage: void setToTag(java.lang.String)> 
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)> 
<android.database.sqlite.SQLiteStatement: long executeInsert()> 
<gov.nist.javax.sip.header.HeaderFactoryImpl: void setPrettyEncoding(boolean)> 
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)> 
<android.support.v4.app.Fragment: void setMenuVisibility(boolean)> 
<android.os.WorkSource: void set(android.os.WorkSource)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setMovementGranularities(int)> 
<org.apache.http.impl.cookie.BasicExpiresHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)> 
<android.os.Parcel: void writeSerializable(java.io.Serializable)> 
<android.test.mock.MockPackageManager: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)> 
<android.app.ActivityManagerProxy: java.lang.String getProviderMimeType(android.net.Uri,int)> 
<org.apache.http.params.HttpConnectionParams: void setSoKeepalive(org.apache.http.params.HttpParams,boolean)> 
<android.location.Address: void setLocality(java.lang.String)> 
<org.apache.xpath.functions.FuncExtFunction: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.http.client.protocol.ClientContextConfigurer: void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry)> 
<android.support.v4.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<java.text.DecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)> 
<android.app.FragmentBreadCrumbs: void setMaxVisible(int)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.ims.Path: void setValue(java.lang.String)> 
<android.widget.CalendarView: void setCurrentLocale(java.util.Locale)> 
<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)> 
<org.apache.xml.serializer.ToStream: void setNewLine(char[])> 
<org.apache.xpath.compiler.OpMapVector: void setElementAt(int,int)> 
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> 
<java.text.DateFormat: void setLenient(boolean)> 
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> 
<org.apache.xalan.processor.TransformerFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> 
<org.apache.xalan.templates.ElemWithParam: void setSelect(org.apache.xpath.XPath)> 
<android.net.http.Headers: void setAcceptRanges(java.lang.String)> 
<java.util.logging.Handler: void setLevel(java.util.logging.Level)> 
<libcore.io.ForwardingOs: void seteuid(int)> 
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)> 
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)> 
<android.widget.AbsListView: void setItemChecked(int,boolean)> 
<android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> 
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.support.v4.view.ViewCompatJellybeanMr1: void setLabelFor(android.view.View,int)> 
<android.content.ContentProviderProxy: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> 
<android.renderscript.Script: void setVar(int,boolean)> 
<org.apache.xalan.templates.ElemTemplateElement: void setXmlSpace(int)> 
<libcore.io.DiskLruCache: void completeEdit(libcore.io.DiskLruCache$Editor,boolean)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setParameter(java.lang.String,java.lang.Object)> 
<android.webkit.WebSettingsClassic: void setPrivateBrowsingEnabled(boolean)> 
<android.nfc.TransceiveResult: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xpath.axes.LocPathIterator: void runTo(int)> 
<org.apache.harmony.security.asn1.ASN1StringType: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)> 
<org.apache.xpath.compiler.OpMapVector: void setToSize(int)> 
<android.widget.ExpandableListView: void setAdapter(android.widget.ListAdapter)> 
<android.filterfw.core.ShaderProgram: void setClearColor(float,float,float)> 
<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)> 
<java.security.cert.X509CertSelector: void setSubjectAlternativeNames(java.util.Collection)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void processingInstruction(java.lang.String,java.lang.String)> 
<javax.xml.parsers.DocumentBuilderFactory: void setSchema(javax.xml.validation.Schema)> 
<org.apache.xml.serializer.ToTextSAXHandler: void setOutputFormat(java.util.Properties)> 
<android.media.videoeditor.OverlayFrame: void setFilename(java.lang.String)> 
<libcore.io.IoBridge: int read(java.io.FileDescriptor,byte[],int,int)> 
<android.app.ActivityManagerProxy: boolean shutdown(int)> 
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> 
<android.webkit.WebViewClassic: void saveViewState(java.io.OutputStream,android.webkit.ValueCallback)> 
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> 
<gov.nist.javax.sip.message.ContentImpl: void setContentDispositionHeader(javax.sip.header.ContentDispositionHeader)> 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> 
<android.widget.GridLayout: void setColumnOrderPreserved(boolean)> 
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String)> 
<javax.obex.ServerSession: void sendResponse(int,byte[])> 
<android.support.v4.view.PagerAdapter: void finishUpdate(android.view.ViewGroup)> 
<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)> 
<android.view.ViewGroup: void setDescendantFocusability(int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setSource(android.view.View)> 
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> 
<android.app.ContextImpl: java.io.File getDir(java.lang.String,int)> 
<android.support.v13.app.FragmentStatePagerAdapter: void finishUpdate(android.view.ViewGroup)> 
<java.text.DateFormat: java.util.Date parse(java.lang.String)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setTruststorePassword(java.lang.String)> 
<libcore.util.ZoneInfo: void setRawOffset(int)> 
<java.text.CollationElementIterator: void setText(java.lang.String)> 
<android.media.audiofx.Visualizer: int setEnabled(boolean)> 
<org.apache.xalan.templates.TemplateSubPatternAssociation: void setNext(org.apache.xalan.templates.TemplateSubPatternAssociation)> 
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setOmitXmlDeclaration(boolean)> 
<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)> 
<org.apache.harmony.xml.dom.NodeImpl: void setTextContent(java.lang.String)> 
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.webkit.CallbackProxy: android.webkit.BrowserFrame createWindow(boolean,boolean)> 
<org.jivesoftware.smack.packet.Packet: void setProperty(java.lang.String,java.lang.Object)> 
<gov.nist.javax.sip.header.From: void setTag(java.lang.String)> 
<android.widget.RatingBar: void setMax(int)> 
<android.net.NetworkInfo: void setIsAvailable(boolean)> 
<android.view.ViewRootImpl: void dispatchAppVisibility(boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setData(java.lang.String)> 
<org.apache.xalan.templates.ElemElement: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)> 
<android.bluetooth.BluetoothInputDevice: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)> 
<java.lang.System: void setSecurityManager(java.lang.SecurityManager)> 
<android.accessibilityservice.UiTestAutomationBridge: android.view.accessibility.AccessibilityEvent executeCommandAndWaitForAccessibilityEvent(java.lang.Runnable,com.android.internal.util.Predicate,long)> 
<org.apache.xalan.templates.ElemExtensionDecl: void setPrefix(java.lang.String)> 
<android.webkit.HTML5VideoView: void setOnPreparedListener(android.webkit.HTML5VideoViewProxy)> 
<android.widget.Spinner: void setAdapter(android.widget.SpinnerAdapter)> 
<org.apache.xalan.templates.OutputProperties: void setBooleanProperty(java.lang.String,boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])> 
<android.widget.LinearLayout: void setGravity(int)> 
<gov.nist.core.Host: void setHostname(java.lang.String)> 
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> 
<android.content.pm.PackageParser: void setSeparateProcesses(java.lang.String[])> 
<android.webkit.SelectActionModeCallback: void setTextSelected(boolean)> 
<org.apache.xml.serializer.ToUnknownStream: void setDocumentLocator(org.xml.sax.Locator)> 
<android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)> 
<org.apache.xml.serializer.ToStream: boolean setLineSepUse(boolean)> 
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> 
<android.webkit.ZoomManager: boolean onNewPicture(android.webkit.WebViewCore$DrawData)> 
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)> 
<java.text.NumberFormat: void setParseIntegerOnly(boolean)> 
<android.filterfw.core.VertexFrame: void setBitmap(android.graphics.Bitmap)> 
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)> 
<gov.nist.javax.sip.header.ims.SecurityClient: void setValue(java.lang.String)> 
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.CSeq: void setSeqNumber(long)> 
<android.os.Message: void writeToParcel(android.os.Parcel,int)> 
<android.net.nsd.NsdManager: void resolveService(android.net.nsd.NsdServiceInfo,android.net.nsd.NsdManager$ResolveListener)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setSelfSignedCertificateEnabled(boolean)> 
<android.app.Fragment: void setArguments(android.os.Bundle)> 
<android.webkit.CallbackProxy: void onReceivedError(int,java.lang.String,java.lang.String)> 
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> 
<org.apache.http.impl.SocketHttpServerConnection: void setSocketTimeout(int)> 
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)> 
<android.support.v4.app.ActivityCompatHoneycomb: void dump(android.app.Activity,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<java.util.zip.Deflater: void setInput(byte[])> 
<android.webkit.WebViewCore: void access$400(android.webkit.WebViewCore,int,long)> 
<android.util.TypedValue: void setTo(android.util.TypedValue)> 
<org.apache.xalan.templates.NamespaceAlias: void setResultPrefix(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setAutoFillProfile(android.webkit.WebSettingsClassic$AutoFillProfile)> 
<android.webkit.WebViewClassic: void setLayoutParams(android.view.ViewGroup$LayoutParams)> 
<android.preference.PreferenceFragment: void setPreferenceScreen(android.preference.PreferenceScreen)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setExtensionAccessInfo(java.lang.Object)> 
<android.opengl.GLSurfaceView: void setDebugFlags(int)> 
<gov.nist.javax.sip.parser.StringMsgParser: void setParseExceptionListener(gov.nist.javax.sip.parser.ParseExceptionListener)> 
<dalvik.system.profiler.HprofData: void setStartMillis(long)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setCustomAnimations(int,int)> 
<dalvik.system.CloseGuard: void setReporter(dalvik.system.CloseGuard$Reporter)> 
<org.jivesoftware.smack.packet.Presence: void setStatus(java.lang.String)> 
<android.widget.TableLayout: void setShrinkAllColumns(boolean)> 
<android.view.GLES20Canvas: void setDrawFilter(android.graphics.DrawFilter)> 
<android.media.videoeditor.Transition: void setFilename(java.lang.String)> 
<android.net.wifi.p2p.WifiP2pManager: void addLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.app.ActivityThread: boolean releaseProvider(android.content.IContentProvider,boolean)> 
<android.webkit.UrlInterceptRegistry: boolean unregisterHandler(android.webkit.UrlInterceptHandler)> 
<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionTimeout(int)> 
<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])> 
<gov.nist.javax.sip.address.TelephoneNumber: void setGlobal(boolean)> 
<org.xml.sax.helpers.DefaultHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> 
<android.app.ActivityManagerProxy: void forceStopPackage(java.lang.String,int)> 
<android.app.AlertDialog: void setMessage(java.lang.CharSequence)> 
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setFullScreen(java.lang.Object,boolean)> 
<android.os.CommonTimeUtils: int transactSetString(int,java.lang.String)> 
<android.app.ActivityThread: void handleSendResult(android.app.ActivityThread$ResultData)> 
<android.webkit.WebViewClassic: void loadUrlImpl(java.lang.String,java.util.Map)> 
<gov.nist.javax.sip.header.ims.PCalledPartyID: void setValue(java.lang.String)> 
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.header.RAck: void setMethod(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setText(java.lang.Object,java.lang.CharSequence)> 
<gov.nist.javax.sip.stack.ServerLog: void setAuxInfo(java.lang.String)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: void setValue(java.lang.String)> 
<org.jivesoftware.smackx.packet.VCard: void setAvatarForUpload(byte[])> 
<org.jivesoftware.smackx.packet.VCard: void setAvatar(java.net.URL)> 
<android.app.backup.RestoreSet: void writeToParcel(android.os.Parcel,int)> 
<java.lang.Math: double log(double)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: void setPrefix(java.lang.String)> 
<android.os.WorkSource: void writeToParcel(android.os.Parcel,int)> 
<net.oauth.signature.OAuthSignatureMethod: void setConsumerSecret(java.lang.String)> 
<android.view.ViewRootImpl: void setStopped(boolean)> 
<android.media.AudioService: void updateRemoteControlDisplay_syncAfRcs(int)> 
<gov.nist.javax.sip.header.ims.Privacy: void setValue(java.lang.String)> 
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void handleEncodingResult(java.nio.charset.CoderResult)> 
<javax.obex.ClientOperation: void streamClosed(boolean)> 
<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)> 
<android.widget.TextView: void setAccessibilityCursorPosition(int)> 
<android.view.Choreographer: void setFrameDelay(long)> 
<org.apache.xpath.axes.FilterExprIterator: void setInnerExpression(org.apache.xpath.Expression)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInScreen(android.graphics.Rect)> 
<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)> 
<android.database.BulkCursorProxy: android.database.CursorWindow getWindow(int)> 
<org.jivesoftware.smackx.packet.MUCUser: void setPassword(java.lang.String)> 
<android.nfc.NdefRecord: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.utils.NodeVector: void setTail(int)> 
<gov.nist.javax.sip.header.Via: void setMAddr(java.lang.String)> 
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultUserAgentHeader(javax.sip.header.UserAgentHeader)> 
<android.widget.TextView: void setCompoundDrawablePadding(int)> 
<android.app.IntentService: void setIntentRedelivery(boolean)> 
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)> 
<android.widget.CalendarView: void setEnabled(boolean)> 
<org.ccil.cowan.tagsoup.PYXWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)> 
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)> 
<android.support.v4.app.FragmentManagerImpl: void setBackStackIndex(int,android.support.v4.app.BackStackRecord)> 
<org.apache.xml.serializer.SerializerBase: void setNamespaceMappings(org.apache.xml.serializer.NamespaceMappings)> 
<android.widget.SuggestionsAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> 
<org.apache.xpath.axes.LocPathIterator: void setShouldCacheNodes(boolean)> 
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])> 
<android.webkit.DeviceOrientationService: void maybeSendChange(double,double,double)> 
<android.telephony.gsm.SmsManager: boolean updateMessageOnSim(int,int,byte[])> 
<org.apache.xml.utils.UnImplNode: void setActualEncoding(java.lang.String)> 
<java.text.DecimalFormat: void setGroupingSize(int)> 
<android.location.Geofence: void writeToParcel(android.os.Parcel,int)> 
<java.util.zip.ZipEntry: void setExtra(byte[])> 
<android.telephony.CellIdentityCdma: void writeToParcel(android.os.Parcel,int)> 
<org.ccil.cowan.tagsoup.XMLWriter: void processingInstruction(java.lang.String,java.lang.String)> 
<org.apache.xpath.functions.FuncTrue: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.widget.ImageView: void setBaselineAlignBottom(boolean)> 
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> 
<android.renderscript.Script: void setVar(int,android.renderscript.BaseObj)> 
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)> 
<android.hardware.input.InputManager: void sendMessageToInputDeviceListenersLocked(int,int)> 
<android.widget.AutoCompleteTextView: void replaceText(java.lang.CharSequence)> 
<org.jivesoftware.smack.packet.Bind: void setResource(java.lang.String)> 
<android.widget.RelativeLayout: void setGravity(int)> 
<android.view.ViewStub: void setLayoutInflater(android.view.LayoutInflater)> 
<android.webkit.WebSettingsClassic: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> 
<org.apache.xml.serializer.ToUnknownStream: void setMediaType(java.lang.String)> 
<android.support.v4.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.apache.xml.serializer.SerializerBase: void setStandaloneInternal(java.lang.String)> 
<org.apache.harmony.security.asn1.ASN1Enumerated: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)> 
<android.filterfw.core.NativeFrame: void setDataFromFrame(android.filterfw.core.Frame)> 
<org.apache.james.mime4j.field.contenttype.parser.ContentTypeParserTokenManager: void setDebugStream(java.io.PrintStream)> 
<gov.nist.javax.sip.message.SIPMessage: void addUnparsed(java.lang.String)> 
<org.apache.xalan.templates.NamespaceAlias: void setStylesheetPrefix(java.lang.String)> 
<org.apache.james.mime4j.field.address.parser.AddressListParserTokenManager: void setDebugStream(java.io.PrintStream)> 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)> 
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)> 
<android.net.wifi.p2p.WifiP2pManager: void clearServiceRequests(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.widget.NumberPicker: void setValue(int)> 
<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)> 
<android.widget.AdapterViewFlipper: void setAutoStart(boolean)> 
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)> 
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)> 
<org.apache.xml.dtm.ref.DTMDefaultBase: void setFeature(java.lang.String,boolean)> 
<android.filterfw.core.MutableFrameFormat: void setMetaValue(java.lang.String,java.lang.Object)> 
<android.app.ActivityManagerProxy: void setPackageScreenCompatMode(java.lang.String,int)> 
<android.view.GLES20TextureLayer: void setTransform(android.graphics.Matrix)> 
<android.support.v4.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.ccil.cowan.tagsoup.XMLWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)> 
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)> 
<org.apache.xalan.templates.FuncDocument: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.webkit.WebViewClassic: void setInitialScale(int)> 
<android.test.mock.MockContext: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> 
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> 
<org.apache.xml.serializer.dom3.LSSerializerImpl: void setNewLine(java.lang.String)> 
<android.graphics.drawable.AnimationDrawable: boolean setVisible(boolean,boolean)> 
<android.test.mock.MockContext: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<android.media.AudioService: void setBluetoothScoOn(boolean)> 
<libcore.icu.NativeDecimalFormat: void setMaximumIntegerDigits(int)> 
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)> 
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)> 
<org.apache.harmony.security.PublicKeyImpl: void setEncoding(byte[])> 
<gov.nist.javax.sip.header.Warning: void setText(java.lang.String)> 
<android.test.mock.MockContext: void sendStickyBroadcast(android.content.Intent)> 
<org.apache.harmony.security.asn1.ASN1Boolean: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.app.admin.DevicePolicyManager: void setKeyguardDisabledFeatures(android.content.ComponentName,int)> 
<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)> 
<org.jivesoftware.smackx.packet.MUCUser: void setDecline(org.jivesoftware.smackx.packet.MUCUser$Decline)> 
<org.apache.xalan.templates.OutputProperties: void setBooleanProperty(org.apache.xml.utils.QName,boolean)> 
<org.apache.xml.utils.DefaultErrorHandler: void warning(javax.xml.transform.TransformerException)> 
<gov.nist.javax.sip.header.Contact: void setContactList(gov.nist.javax.sip.header.ContactList)> 
<org.apache.http.params.HttpProtocolParamBean: void setUseExpectContinue(boolean)> 
<android.widget.TimePicker: void setCurrentLocale(java.util.Locale)> 
<java.math.BigInt: void setSign(int)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setResponseInterface(gov.nist.javax.sip.stack.ServerResponseInterface)> 
<org.apache.xml.utils.UnImplNode: void setXmlVersion(java.lang.String)> 
<android.view.View: void setDrawingCacheBackgroundColor(int)> 
<gov.nist.javax.sip.header.ContentLanguage: void setLanguageTag(java.lang.String)> 
<org.apache.harmony.security.x509.NameConstraints: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<gov.nist.javax.sip.message.SIPMessage: void setExpires(javax.sip.header.ExpiresHeader)> 
<org.xml.sax.InputSource: void setPublicId(java.lang.String)> 
<java.security.cert.PKIXParameters: void setSigProvider(java.lang.String)> 
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setMAddrParam(java.lang.String)> 
<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)> 
<android.renderscript.BaseObj: void setID(int)> 
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> 
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)> 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception)> 
<android.widget.ImageView: void setMaxHeight(int)> 
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> 
<java.net.Socks4Message: void setIP(byte[])> 
<gov.nist.javax.sip.header.ContentDisposition: void setHandling(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setSecure(boolean)> 
<gov.nist.javax.sip.header.extensions.ReferredBy: void setValue(java.lang.String)> 
<android.renderscript.Allocation: void setSurfaceTexture(android.graphics.SurfaceTexture)> 
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)> 
<android.widget.Scroller: void setFinalY(int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setContentDescription(java.lang.Object,java.lang.CharSequence)> 
<android.widget.Scroller: void setFinalX(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setMaxScrollY(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setMaxScrollX(int)> 
<gov.nist.javax.sip.address.SipUri: void setParameter(java.lang.String,java.lang.String)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String)> 
<android.media.AudioService: void setRemoteSubmixOn(boolean,int)> 
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> 
<android.webkit.WebViewCore: void access$3500(android.webkit.WebViewCore,int,boolean)> 
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> 
<java.security.cert.PKIXParameters: void setExplicitPolicyRequired(boolean)> 
<java.lang.reflect.Field: void setLong(java.lang.Object,long)> 
<android.widget.ZoomButtonsController: void setVisible(boolean)> 
<android.os.TokenWatcher: void dump(java.io.PrintWriter)> 
<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)> 
<android.net.wifi.p2p.WifiP2pManager: void setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$UpnpServiceResponseListener)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setDocumentURI(java.lang.String)> 
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)> 
<org.apache.xml.serializer.ToUnknownStream: void setOutputStream(java.io.OutputStream)> 
<org.apache.commons.io.filefilter.OrFileFilter: boolean accept(java.io.File,java.lang.String)> 
<javax.net.ssl.SSLContext: void setDefault(javax.net.ssl.SSLContext)> 
<gov.nist.javax.sip.header.Warning: void setCode(int)> 
<android.graphics.PointF: void set(android.graphics.PointF)> 
<org.apache.xml.serializer.ToSAXHandler: void setTransformState(org.apache.xml.serializer.TransformStateSetter)> 
<org.xml.sax.helpers.ParserAdapter: void parse(java.lang.String)> 
<android.hardware.SerialPort: void sendBreak()> 
<gov.nist.javax.sip.header.MimeVersion: void setMajorVersion(int)> 
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)> 
<jp.co.omronsoft.openwnn.EN.OpenWnnEngineEN: boolean setSearchKey(java.lang.String)> 
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)> 
<android.content.Intent: android.content.Intent setAction(java.lang.String)> 
<android.widget.PopupWindow: void setLayoutInsetDecor(boolean)> 
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> 
<org.apache.xalan.templates.ElemVariable: void setIndex(int)> 
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> 
<org.apache.xml.serializer.ToStream: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.webkit.CallbackProxy: void onIndexChanged(android.webkit.WebHistoryItem,int)> 
<android.media.audiofx.Visualizer: int setDataCaptureListener(android.media.audiofx.Visualizer$OnDataCaptureListener,int,boolean,boolean)> 
<android.widget.AdapterViewAnimator: void setInAnimation(android.animation.ObjectAnimator)> 
<android.preference.SwitchPreference: void setSwitchTextOn(java.lang.CharSequence)> 
<android.filterpacks.imageproc.ColorTemperatureFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.apache.xml.serializer.utils.URI: void setPort(int)> 
<java.security.cert.X509CertSelector: void setNameConstraints(byte[])> 
<android.telephony.CellSignalStrengthCdma: void log(java.lang.String)> 
<android.webkit.CallbackProxy: void onReceivedTitle(java.lang.String)> 
<android.media.AudioService: void setMode(int,android.os.IBinder)> 
<android.text.TextLine: float handleReplacement(android.text.style.ReplacementSpan,android.text.TextPaint,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean)> 
<android.view.View: void setLayerType(int,android.graphics.Paint)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendReliableProvisionalResponse(javax.sip.message.Response)> 
<javax.obex.ClientOperation: boolean continueOperation(boolean,boolean)> 
<android.graphics.drawable.ShapeDrawable: void setPadding(android.graphics.Rect)> 
<android.bluetooth.BluetoothServerSocket: void setServiceName(java.lang.String)> 
<gov.nist.javax.sip.header.SIPHeaderList: void setMyClass(java.lang.Class)> 
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)> 
<org.apache.http.conn.params.ConnRouteParamBean: void setForcedRoute(org.apache.http.conn.routing.HttpRoute)> 
<org.apache.james.mime4j.message.BodyPart: void writeTo(java.io.OutputStream)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setMovementGranularities(java.lang.Object,int)> 
<android.widget.GridView: void setSelectionInt(int)> 
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)> 
<java.text.ChoiceFormat: void setChoices(double[],java.lang.String[])> 
<android.graphics.Matrix: void setSkew(float,float,float,float)> 
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)> 
<android.renderscript.Allocation: void setSurface(android.view.Surface)> 
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])> 
<org.apache.xpath.operations.Operation: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.nfc.NfcActivityManager: void setNdefPushContentUriCallback(android.app.Activity,android.nfc.NfcAdapter$CreateBeamUrisCallback)> 
<android.view.View: void sendAccessibilityHoverEvent(int)> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setPreferences(android.content.SharedPreferences)> 
<java.security.cert.X509CertSelector: void setSubjectPublicKeyAlgID(java.lang.String)> 
<android.filterfw.core.GLFrame: void setViewport(int,int,int,int)> 
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)> 
<android.webkit.AccessibilityInjectorFallback: void setCurrentAxis(int,boolean,java.lang.String)> 
<android.text.AndroidBidi: int bidi(int,char[],byte[],int,boolean)> 
<java.security.DigestOutputStream: void setMessageDigest(java.security.MessageDigest)> 
<android.preference.Preference: void setEnabled(boolean)> 
<org.jivesoftware.smack.packet.Packet: void setAccountId(long)> 
<org.xml.sax.helpers.XMLReaderAdapter: void setEntityResolver(org.xml.sax.EntityResolver)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttributes(org.xml.sax.Attributes)> 
<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)> 
<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)> 
<android.graphics.drawable.StateListDrawable: void setLayoutDirection(int)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setContentBuffer(org.apache.xml.utils.FastStringBuffer)> 
<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])> 
<gov.nist.javax.sip.message.MessageFactoryImpl: void setTest(boolean)> 
<android.webkit.ZoomManager: void onFirstLayout(android.webkit.WebViewCore$DrawData)> 
<org.apache.xpath.axes.PredicatedNodeTest: boolean executePredicates(int,org.apache.xpath.XPathContext)> 
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> 
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> 
<org.apache.xalan.templates.OutputProperties: void setQNameProperty(java.lang.String,org.apache.xml.utils.QName)> 
<java.util.Vector: java.lang.Object set(int,java.lang.Object)> 
<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> 
<java.text.DateFormatSymbols: void setZoneStrings(java.lang.String[][])> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setUseClientMode(boolean)> 
<android.app.ActivityManagerProxy: boolean refContentProvider(android.os.IBinder,int,int)> 
<gov.nist.javax.sip.address.NetObjectList: void setMyClass(java.lang.Class)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnableSessionCreation(boolean)> 
<android.widget.ListPopupWindow: void setHeight(int)> 
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)> 
<android.widget.SuggestionsAdapter: void setQueryRefinement(int)> 
<android.webkit.WebSettingsClassic: void setHardwareAccelSkiaEnabled(boolean)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setViaPort(int)> 
<org.apache.harmony.xml.parsers.SAXParserFactoryImpl: void setFeature(java.lang.String,boolean)> 
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void replaceData(int,int,java.lang.String)> 
<android.location.Criteria: void setBearingAccuracy(int)> 
<junit.framework.TestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)> 
<gov.nist.javax.sip.header.extensions.MinSE: void setValue(java.lang.String)> 
<android.filterfw.core.MutableFrameFormat: void setDimensionCount(int)> 
<org.apache.xalan.templates.ElemTemplateElement: void setPrefixes(org.xml.sax.helpers.NamespaceSupport)> 
<android.graphics.drawable.NinePatchDrawable: void setAlpha(int)> 
<android.app.ResultInfo: void writeToParcel(android.os.Parcel,int)> 
<android.widget.TextView: void setPaintFlags(int)> 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)> 
<org.apache.xalan.templates.ElemTemplateElement: void setEndLocaterInfo(javax.xml.transform.SourceLocator)> 
<org.apache.harmony.security.x509.AuthorityKeyIdentifier: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)> 
<android.widget.PopupWindow: void update(android.view.View,int,int)> 
<gov.nist.javax.sip.header.WWWAuthenticate: void setURI(javax.sip.address.URI)> 
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)> 
<android.content.pm.VerificationParams: void setInstallerUid(int)> 
<android.app.Activity: void setTitle(java.lang.CharSequence)> 
<android.support.v13.app.FragmentPagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> 
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> 
<android.media.AudioService: void dumpRingerMode(java.io.PrintWriter)> 
<gov.nist.javax.sip.stack.SIPDialog: void setEventHeader(javax.sip.header.EventHeader)> 
<org.apache.xalan.transformer.TrAXFilter: void setErrorListener(javax.xml.transform.ErrorListener)> 
<android.util.PrintStreamPrinter: void println(java.lang.String)> 
<android.telephony.CellInfoGsm: void writeToParcel(android.os.Parcel,int)> 
<android.app.ActivityManagerProxy: int startActivityWithConfig(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)> 
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)> 
<org.jivesoftware.smack.XMPPConnection: void setUseProtoBuf(boolean)> 
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener)> 
<android.os.Parcel: void writeBooleanArray(boolean[])> 
<android.widget.AdapterView: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> 
<android.widget.DatePicker: void updateDate(int,int,int)> 
<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)> 
<org.javia.arity.UnitTest: void main(java.lang.String[])> 
<android.net.wifi.WifiStateMachine: void handleSuccessfulIpConfiguration(android.net.DhcpInfoInternal)> 
<android.app.Dialog: void setContentView(int)> 
<android.test.mock.MockPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)> 
<org.apache.xml.serializer.ElemDesc: void setAttr(java.lang.String,int)> 
<android.view.GLES20RenderLayer: void setTransform(android.graphics.Matrix)> 
<android.graphics.RectF: void printShortString(java.io.PrintWriter)> 
<android.webkit.WebViewClassic: void setNetworkAvailable(boolean)> 
<org.xml.sax.helpers.ParserAdapter: void setProperty(java.lang.String,java.lang.Object)> 
<android.net.wifi.p2p.WifiP2pManager: void setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ServiceResponseListener)> 
<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)> 
<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)> 
<org.jivesoftware.smack.util.PacketParserUtils: org.jivesoftware.smack.packet.PacketExtension parsePacketExtension(java.lang.String,java.lang.String,org.xmlpull.v1.XmlPullParser,byte[])> 
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)> 
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)> 
<gov.nist.javax.sip.header.SubscriptionState: void setRetryAfter(int)> 
<org.apache.xml.utils.TreeWalker: void setContentHandler(org.xml.sax.ContentHandler)> 
<libcore.net.http.RawHeaders: void set(java.lang.String,java.lang.String)> 
<org.apache.xpath.axes.LocPathIterator: void setCurrentContextNode(int)> 
<android.webkit.CallbackProxy: void setWebChromeClient(android.webkit.WebChromeClient)> 
<java.net.HttpCookie: void setDomain(java.lang.String)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setTruststoreType(java.lang.String)> 
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)> 
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)> 
<gov.nist.javax.sip.message.SIPRequest: void setRequestURI(javax.sip.address.URI)> 
<org.apache.xalan.templates.OutputProperties: void setIntProperty(java.lang.String,int)> 
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)> 
<gov.nist.javax.sip.header.Via: void setProtocol(java.lang.String)> 
<android.text.style.BackgroundColorSpan: void updateDrawState(android.text.TextPaint)> 
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentLocator(org.xml.sax.Locator)> 
<gov.nist.javax.sip.header.ims.SecurityServer: void setValue(java.lang.String)> 
<android.content.SyncManager: void dumpSyncHistory(java.io.PrintWriter)> 
<org.apache.xpath.functions.Function: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.xalan.templates.Stylesheet: void setHref(java.lang.String)> 
<android.webkit.WebViewCore: void focusNodeChanged(int,android.webkit.WebViewCore$WebKitHitTest)> 
<android.telephony.CellIdentityLte: void log(java.lang.String)> 
<android.app.ApplicationThreadProxy: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean,int)> 
<gov.nist.javax.sip.message.SIPMessage: void setCallId(java.lang.String)> 
<android.text.TextUtils: float setPara(android.text.MeasuredText,android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)> 
<android.webkit.WebSettingsClassic: void setLoadWithOverviewMode(boolean)> 
<gov.nist.javax.sip.address.AddressImpl: void setAddess(javax.sip.address.URI)> 
<org.jivesoftware.smack.XMPPConnection: void setRmqManager(com.google.android.gsf.gtalkservice.rmq.RmqManager)> 
<org.apache.xpath.jaxp.XPathImpl: void setXPathFunctionResolver(javax.xml.xpath.XPathFunctionResolver)> 
<android.telephony.ServiceState: void setState(int)> 
<android.os.Parcel: void writeException(java.lang.Exception)> 
<android.text.HtmlToSpannedConverter: void setDocumentLocator(org.xml.sax.Locator)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setQop(java.lang.String)> 
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)> 
<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setAddedCount(java.lang.Object,int)> 
<android.support.v4.app.Fragment: void setIndex(int,android.support.v4.app.Fragment)> 
<android.view.View: void setScrollbarFadingEnabled(boolean)> 
<android.app.WallpaperManager: void setWallpaperOffsets(android.os.IBinder,float,float)> 
<android.filterfw.core.Filter: void setWaitsOnInputPort(java.lang.String,boolean)> 
<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)> 
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)> 
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)> 
<org.apache.xalan.processor.XSLTElementProcessor: void unparsedEntityDecl(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener)> 
<android.app.PendingIntent: void send(int)> 
<android.os.Parcel: void setDataSize(int)> 
<android.support.v4.view.ViewPager: boolean executeKeyEvent(android.view.KeyEvent)> 
<java.text.BreakIterator: void setText(java.lang.String)> 
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)> 
<android.widget.TextView: void setTypeface(android.graphics.Typeface)> 
<android.text.TextPaint: void setUnderlineText(int,float)> 
<org.apache.http.impl.entity.EntitySerializer: void serialize(org.apache.http.io.SessionOutputBuffer,org.apache.http.HttpMessage,org.apache.http.HttpEntity)> 
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)> 
<android.media.effect.Effect: void setUpdateListener(android.media.effect.EffectUpdateListener)> 
<android.net.BaseNetworkStateTracker: void setDependencyMet(boolean)> 
<android.speech.tts.TextToSpeech: int setEngineByPackageName(java.lang.String)> 
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)> 
<android.media.videoeditor.OverlayFrame: void setResizedRGBSize(int,int)> 
<org.apache.xpath.axes.WalkerFactory: void diagnoseIterator(java.lang.String,int,org.apache.xpath.compiler.Compiler)> 
<android.graphics.drawable.GradientDrawable: void setSize(int,int)> 
<org.apache.xalan.templates.ElemApplyTemplates: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.app.MediaRouteButton: void setCheatSheetEnabled(boolean)> 
<libcore.icu.NativeDecimalFormat: void setParseIntegerOnly(boolean)> 
<android.graphics.Matrix: void setSinCos(float,float,float,float)> 
<android.filterfw.core.FilterPort: void setChecksType(boolean)> 
<android.test.InstrumentationTestCase: void runMethod(java.lang.reflect.Method,int,boolean)> 
<android.view.Window: void setDefaultWindowFormat(int)> 
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)> 
<android.net.wifi.WifiStateMachine: void startScan(boolean)> 
<android.graphics.Paint: void setBidiFlags(int)> 
<android.renderscript.Script: void setVar(int,long)> 
<android.widget.Chronometer: void setStarted(boolean)> 
<org.apache.http.client.methods.HttpRequestBase: void setURI(java.net.URI)> 
<android.speech.tts.SynthesisRequest: void setPitch(int)> 
<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)> 
<android.app.ActivityManagerProxy: void moveTaskBackwards(int)> 
<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> 
<android.webkit.WebViewClassic: void setCertificate(android.net.http.SslCertificate)> 
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setParameter(java.lang.String,java.lang.Object)> 
<android.net.wifi.p2p.WifiP2pManager: void removeLocalService(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.net.wifi.WifiNative: boolean setP2pPowerSave(java.lang.String,boolean)> 
<gov.nist.javax.sip.header.Protocol: void setProtocol(java.lang.String)> 
<android.bluetooth.BluetoothA2dp: boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice)> 
<android.net.wifi.p2p.WifiP2pManager: void stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.webkit.WebViewClassic: void clearCache(boolean)> 
<android.widget.ImageView: void setImageURI(android.net.Uri)> 
<gov.nist.javax.sip.address.AddressImpl: void setAddressType(int)> 
<org.apache.xalan.templates.ElemFallback: void executeFallback(org.apache.xalan.transformer.TransformerImpl)> 
<org.apache.xml.serializer.ToXMLSAXHandler: void setOutputFormat(java.util.Properties)> 
<android.database.sqlite.SQLiteSession: void endTransactionUnchecked(android.os.CancellationSignal,boolean)> 
<org.xml.sax.HandlerBase: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)> 
<org.apache.xalan.templates.ElemUse: void setUseAttributeSets(java.util.Vector)> 
<android.support.v4.app.DialogFragment: void setCancelable(boolean)> 
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.helpers.DefaultHandler)> 
<java.net.URLConnection: void setDefaultUseCaches(boolean)> 
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> 
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceMode(int)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReceiveBufferSize(int)> 
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultServerHeader(javax.sip.header.ServerHeader)> 
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)> 
<org.ccil.cowan.tagsoup.ElementType: void setModel(int)> 
<gov.nist.javax.sip.parser.StringMsgParser: void setComputeContentLengthFromMessage(boolean)> 
<android.widget.AbsListView: boolean setFrame(int,int,int,int)> 
<android.renderscript.RenderScript: void setErrorHandler(android.renderscript.RenderScript$RSErrorHandler)> 
<android.support.v4.view.ViewPager: void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener)> 
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> 
<java.util.GregorianCalendar: void setGregorianChange(java.util.Date)> 
<android.widget.ZoomControls: void setZoomSpeed(long)> 
<android.test.TestRunner: void setPerformanceMode(int)> 
<org.apache.xalan.templates.ElemTemplateElement: void executeNSDecls(org.apache.xalan.transformer.TransformerImpl,java.lang.String)> 
<android.view.CompatibilityInfoHolder: void set(android.content.res.CompatibilityInfo)> 
<android.webkit.WebSettingsClassic: void setTextZoom(int)> 
<android.view.ViewDebug: void dump(android.view.View,java.io.OutputStream)> 
<android.gesture.GestureOverlayView: void setGestureColor(int)> 
<android.database.sqlite.SQLiteConnection: void setPageSize()> 
<org.apache.xml.serializer.ToStream: void setWriter(java.io.Writer)> 
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> 
<org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> 
<android.telephony.ServiceState: void setRadioTechnology(int)> 
<org.apache.xml.utils.ObjectVector: void setToSize(int)> 
<android.view.ViewRootImpl: void dispatchInvalidateDelayed(android.view.View,long)> 
<android.content.SyncManager: void dumpDayStatistic(java.io.PrintWriter,android.content.SyncStorageEngine$DayStats)> 
<org.javia.arity.Complex: org.javia.arity.Complex set(org.javia.arity.Complex)> 
<org.apache.harmony.xml.ExpatReader: void setEntityResolver(org.xml.sax.EntityResolver)> 
<org.apache.xalan.templates.ElemNumber: void setCount(org.apache.xpath.XPath)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setURI(int,java.lang.String)> 
<android.widget.TableLayout: void setStretchAllColumns(boolean)> 
<gov.nist.javax.sip.header.SubscriptionState: void setReasonCode(java.lang.String)> 
<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPDialog: void setSipProvider(gov.nist.javax.sip.SipProviderImpl)> 
<android.app.ActivityManagerProxy: void killApplicationWithAppId(java.lang.String,int)> 
<android.preference.Preference: void setOrder(int)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setLocalName(int,java.lang.String)> 
<android.graphics.drawable.GradientDrawable: void setCornerRadius(float)> 
<android.animation.ValueAnimator: void setRepeatCount(int)> 
<android.net.MobileDataStateTracker: int setEnableApn(java.lang.String,boolean)> 
<android.net.wifi.WifiStateMachine: void setFrequencyBand(int,boolean)> 
<android.webkit.CallbackProxy: void onPageStarted(java.lang.String,android.graphics.Bitmap)> 
<android.speech.srec.Recognizer: void setAcousticState(java.lang.String)> 
<org.apache.xpath.functions.FuncCount: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.http.params.HttpProtocolParams: void setVersion(org.apache.http.params.HttpParams,org.apache.http.ProtocolVersion)> 
<android.widget.CompoundButton: void setOnCheckedChangeWidgetListener(android.widget.CompoundButton$OnCheckedChangeListener)> 
<java.util.zip.ZipEntry: void setMethod(int)> 
<java.util.concurrent.FutureTask: void set(java.lang.Object)> 
<android.webkit.WebSettings: void setSaveFormData(boolean)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setUsername(java.lang.String)> 
<android.view.textservice.TextServicesManager: void setSpellCheckerEnabled(boolean)> 
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)> 
<java.nio.charset.CharsetEncoderICU: byte[] makeReplacement(java.lang.String,long)> 
<android.graphics.drawable.Drawable: boolean setLevel(int)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setParameter(java.lang.String,java.lang.String)> 
<android.graphics.Matrix: void setTranslate(float,float)> 
<android.app.ApplicationThreadProxy: void scheduleTrimMemory(int)> 
<org.apache.xml.serializer.ToUnknownStream: void setTransformer(javax.xml.transform.Transformer)> 
<org.apache.xalan.templates.ElemLiteralResult: void setVersion(java.lang.String)> 
<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM,int)> 
<org.apache.xalan.transformer.TransformerImpl: void setSourceTreeDocForThread(int)> 
<java.net.ServerSocket: void setReuseAddress(boolean)> 
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)> 
<java.io.RandomAccessFile: void write(byte[])> 
<android.app.ApplicationPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)> 
<android.widget.TextView: void setMinHeight(int)> 
<android.widget.Toast: void setView(android.view.View)> 
<android.nfc.NfcActivityManager: void setNdefPushContentUri(android.app.Activity,android.net.Uri[])> 
<org.apache.xalan.templates.ElemValueOf: void setDisableOutputEscaping(boolean)> 
<android.net.rtp.AudioStream: void setDtmfType(int)> 
<javax.xml.xpath.XPathFactoryFinder: javax.xml.xpath.XPathFactory createInstance(java.lang.String)> 
<org.ccil.cowan.tagsoup.Parser: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<android.media.AudioService: void setRemoteStreamVolume(int)> 
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)> 
<jp.co.omronsoft.openwnn.ComposingText: void replaceStrSegment0(int,jp.co.omronsoft.openwnn.StrSegment[],int,int)> 
<gov.nist.javax.sip.header.Reason: void setProtocol(java.lang.String)> 
<android.webkit.MimeTypeMap: java.lang.String remapGenericMimeType(java.lang.String,java.lang.String,java.lang.String)> 
<gov.nist.core.NameValue: java.lang.String setValue(java.lang.String)> 
<org.jivesoftware.smack.ServerTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)> 
<android.view.Window: void setGravity(int)> 
<org.apache.harmony.security.x509.CRLDistributionPoints: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<org.jivesoftware.smackx.ServiceDiscoveryManager: void publishItems(java.lang.String,java.lang.String,org.jivesoftware.smackx.packet.DiscoverItems)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setChecked(boolean)> 
<gov.nist.javax.sip.stack.SIPDialog: void setRemoteTarget(javax.sip.header.ContactHeader)> 
<android.webkit.HTML5VideoViewProxy: void setBaseLayer(int)> 
<android.graphics.drawable.NinePatchDrawable: void setDither(boolean)> 
<java.net.SocketUtils: void setCreated(java.net.Socket)> 
<android.widget.ListPopupWindow: void setContentWidth(int)> 
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])> 
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)> 
<org.apache.xalan.processor.ProcessorKey: void setPropertiesFromAttributes(org.apache.xalan.processor.StylesheetHandler,java.lang.String,org.xml.sax.Attributes,org.apache.xalan.templates.ElemTemplateElement)> 
<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)> 
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])> 
<android.widget.TextView: void setPaddingRelative(int,int,int,int)> 
<android.net.wifi.p2p.WifiP2pGroupList: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.io.HttpMessageParser createRequestParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpRequestFactory,org.apache.http.params.HttpParams)> 
<android.media.AudioService: void dispatchMediaKeyEvent(android.view.KeyEvent,boolean)> 
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)> 
<org.apache.xpath.VariableStack: void setLocalVariable(int,org.apache.xpath.objects.XObject,int)> 
<org.apache.xalan.transformer.TransformerImpl: void runTransformThread(int)> 
<android.text.PackedIntVector: void setValue(int,int,int)> 
<org.apache.http.params.HttpProtocolParamBean: void setVersion(org.apache.http.HttpVersion)> 
<android.webkit.CookieManagerClassic: void setCookie(java.lang.String,java.lang.String,boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInParent(java.lang.Object,android.graphics.Rect)> 
<android.preference.Preference: void setDefaultValue(java.lang.Object)> 
<org.jivesoftware.smack.util.ObservableWriter: void write(java.lang.String,int,int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setClickable(java.lang.Object,boolean)> 
<android.graphics.PointF: void writeToParcel(android.os.Parcel,int)> 
<android.net.wifi.WifiConfigStore: void log(java.lang.String)> 
<android.location.Address: void setLatitude(double)> 
<android.webkit.WebHistoryItemClassic: void setTouchIconUrl(java.lang.String,boolean)> 
<android.webkit.CallbackProxy: boolean shouldOverrideUrlLoading(java.lang.String)> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setFilter(jp.co.omronsoft.openwnn.CandidateFilter)> 
<android.support.v4.content.ModernAsyncTask: void setDefaultExecutor(java.util.concurrent.Executor)> 
<org.apache.harmony.xml.ExpatReader: void parse(java.io.InputStream,java.lang.String,java.lang.String,java.lang.String)> 
<android.support.v4.view.ViewPager: void setCurrentItem(int)> 
<android.telephony.CellSignalStrengthLte: void writeToParcel(android.os.Parcel,int)> 
<org.xml.sax.helpers.XMLFilterImpl: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.media.AudioManager: void setStreamSolo(int,boolean)> 
<android.widget.DialerFilter: void setLettersWatcher(android.text.TextWatcher)> 
<android.location.Address: void setPhone(java.lang.String)> 
<org.jivesoftware.smack.packet.Registration: void setInstructions(java.lang.String)> 
<java.net.DatagramSocket: void setReuseAddress(boolean)> 
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)> 
<org.apache.commons.io.FileUtils: void write(java.io.File,java.lang.CharSequence,java.lang.String)> 
<android.net.wifi.WifiConfigStore: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)> 
<gov.nist.javax.sip.header.AuthenticationInfo: void setQop(java.lang.String)> 
<libcore.io.Posix: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)> 
<junit.extensions.TestDecorator: void run(junit.framework.TestResult)> 
<android.net.LinkAddress: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smack.packet.DefaultPacketExtension: void setValue(java.lang.String,java.lang.String)> 
<android.database.sqlite.SqliteWrapper: int update(android.content.Context,android.content.ContentResolver,android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)> 
<android.filterpacks.imageproc.StraightenFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.jivesoftware.smackx.packet.MUCUser: void setDestroy(org.jivesoftware.smackx.packet.MUCUser$Destroy)> 
<org.apache.xalan.processor.XSLTElementDef: void setRequiredFound(java.lang.String,boolean)> 
<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)> 
<android.preference.MultiSelectListPreference: void setEntryValues(java.lang.CharSequence[])> 
<gov.nist.javax.sip.message.SIPRequest: void setRequestLine(gov.nist.javax.sip.header.RequestLine)> 
<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)> 
<android.app.ActivityManagerProxy: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher,int)> 
<android.graphics.drawable.DrawableContainer: void setAlpha(int)> 
<gov.nist.javax.sip.header.ims.PPreferredService: void setApplicationIdentifiers(java.lang.String)> 
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> 
<org.ccil.cowan.tagsoup.XMLWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<org.apache.xalan.templates.ElemTemplate: void setMode(org.apache.xml.utils.QName)> 
<android.app.BackStackState: void writeToParcel(android.os.Parcel,int)> 
<android.preference.Preference: void setIcon(android.graphics.drawable.Drawable)> 
<org.apache.harmony.security.x509.TBSCertList: void dumpValue(java.lang.StringBuilder)> 
<android.app.ActivityManagerProxy: int getTaskForActivity(android.os.IBinder,boolean)> 
<android.view.Surface: void setPosition(int,int)> 
<org.apache.harmony.security.x509.AlternativeName: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<org.jivesoftware.smackx.packet.VCard: void setPhoneWork(java.lang.String,java.lang.String)> 
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: void setWantClientAuth(boolean)> 
<org.apache.xml.serializer.SerializerBase: void setVersion(java.lang.String)> 
<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)> 
<android.os.Parcel: void writeStringArray(java.lang.String[])> 
<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: void setInUseState(boolean)> 
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> 
<android.telephony.CellInfoCdma: void setCellIdentity(android.telephony.CellIdentityCdma)> 
<org.apache.xpath.NodeSet: void setCurrentPos(int)> 
<android.webkit.WebStorageClassic: void setAppCacheMaximumSize(long)> 
<org.apache.harmony.xnet.provider.jsse.HelloRequest: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(byte[],boolean,int)> 
<android.filterpacks.imageproc.FillLightFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.filterfw.core.GLFrame: void setData(java.nio.ByteBuffer,int,int)> 
<android.media.MediaFormat: void setLong(java.lang.String,long)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setXmlEncoding(java.lang.String)> 
<java.util.Calendar: void setFirstDayOfWeek(int)> 
<org.apache.xalan.templates.OutputProperties: void setQNameProperties(org.apache.xml.utils.QName,java.util.Vector)> 
<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)> 
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setNotifyOnRetransmit(boolean)> 
<android.widget.ImageView: void setColorFilter(int)> 
<org.apache.xalan.transformer.TransformerImpl: void setURIResolver(javax.xml.transform.URIResolver)> 
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)> 
<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)> 
<org.apache.xpath.axes.LocPathIterator: void executeCharsToContentHandler(org.apache.xpath.XPathContext,org.xml.sax.ContentHandler)> 
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)> 
<org.xml.sax.ext.Attributes2Impl: void setSpecified(int,boolean)> 
<android.telephony.CellSignalStrengthCdma: void setCdmaEcio(int)> 
<android.webkit.WebSettings: void setUseWideViewPort(boolean)> 
<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)> 
<junit.textui.ResultPrinter: void printDefect(junit.framework.TestFailure,int)> 
<android.webkit.WebViewClassic: void setSelection(int,int)> 
<gov.nist.javax.sip.header.ims.PChargingVector: void setTerminatingIOI(java.lang.String)> 
<android.webkit.CallbackProxy: void onReceivedTouchIconUrl(java.lang.String,boolean)> 
<android.widget.TextSwitcher: void setText(java.lang.CharSequence)> 
<org.xml.sax.HandlerBase: void setDocumentLocator(org.xml.sax.Locator)> 
<android.widget.NumberPicker: void setDisplayedValues(java.lang.String[])> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void setProperty(java.lang.String,java.lang.Object)> 
<gov.nist.javax.sip.header.Subject: void setSubject(java.lang.String)> 
<android.text.TextLine: float handleRun(int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean)> 
<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)> 
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> 
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> 
<org.apache.http.conn.params.ConnPerRouteBean: void setDefaultMaxPerRoute(int)> 
<java.io.ObjectOutputStream: void write(byte[])> 
<org.apache.xalan.processor.StylesheetHandler: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.database.CursorWindow: void setStartPosition(int)> 
<libcore.icu.NativeConverter: void setCallbackDecode(long,java.nio.charset.CharsetDecoder)> 
<jp.co.omronsoft.openwnn.ComposingText: void replaceStrSegment(int,jp.co.omronsoft.openwnn.StrSegment[])> 
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase)> 
<gov.nist.javax.sip.address.Authority: void setPort(int)> 
<android.view.View: void setSystemUiVisibility(int)> 
<gov.nist.javax.sip.stack.SIPDialog: void setReInviteFlag(boolean)> 
<org.apache.xpath.functions.FuncExtElementAvailable: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)> 
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[])> 
<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)> 
<android.graphics.Region: boolean set(android.graphics.Rect)> 
<gov.nist.javax.sip.address.TelephoneNumber: void setIsdnSubaddress(java.lang.String)> 
<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)> 
<android.renderscript.AllocationAdapter: void setLOD(int)> 
<org.apache.harmony.security.x509.DistributionPointName: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<org.apache.http.params.HttpConnectionParamBean: void setStaleCheckingEnabled(boolean)> 
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void setSrcDevice(android.net.wifi.p2p.WifiP2pDevice)> 
<org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String,java.lang.String)> 
<java.text.ParsePosition: void setErrorIndex(int)> 
<android.graphics.Matrix: void setValues(float[])> 
<org.apache.xpath.axes.OneStepIterator: void setRoot(int,java.lang.Object)> 
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)> 
<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)> 
<android.media.AudioService: void sendStickyBroadcastToAll(android.content.Intent)> 
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,int,boolean)> 
<android.webkit.OverScrollGlow: void setOverScrollDeltas(int,int)> 
<android.telephony.ServiceState: void setCssIndicator(int)> 
<org.jivesoftware.smack.SASLAuthentication: void send(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setQheaders(gov.nist.core.NameValueList)> 
<android.support.v4.app.FragmentState: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.extensions.References: void setParameter(java.lang.String,java.lang.String)> 
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> 
<org.ccil.cowan.tagsoup.PYXWriter: void pcdata(char[],int,int)> 
<java.net.PlainSocketImpl: void sendUrgentData(int)> 
<android.preference.Preference: void setKey(java.lang.String)> 
<android.test.ClassPathPackageInfoSource: void setClassLoader(java.lang.ClassLoader)> 
<org.xmlpull.v1.XmlPullParserFactory: void setFeature(java.lang.String,boolean)> 
<org.apache.http.conn.params.ConnRouteParamBean: void setLocalAddress(java.net.InetAddress)> 
<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)> 
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)> 
<org.apache.harmony.xnet.provider.jsse.Finished: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<gov.nist.javax.sip.stack.SIPDialog: void setLastAckReceived(gov.nist.javax.sip.message.SIPRequest)> 
<java.util.concurrent.atomic.AtomicLongArray: void set(int,long)> 
<android.webkit.Plugin: void setFileName(java.lang.String)> 
<android.view.TextureView: void setOpaque(boolean)> 
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> 
<android.location.Address: void setPostalCode(java.lang.String)> 
<android.widget.RatingBar: void setNumStars(int)> 
<android.widget.GridView: void setRemoteViewsAdapter(android.content.Intent)> 
<android.media.RemoteControlClient: void setPlaybackState(int)> 
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)> 
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)> 
<org.apache.xalan.transformer.MsgMgr: void warn(javax.xml.transform.SourceLocator,org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String,java.lang.Object[])> 
<android.renderscript.ScriptIntrinsicLUT: void setAlpha(int,int)> 
<android.widget.HorizontalScrollView: void setSmoothScrollingEnabled(boolean)> 
<org.ccil.cowan.tagsoup.ElementType: void setFlags(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setToIndex(java.lang.Object,int)> 
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> 
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> 
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> 
<android.webkit.CallbackProxy: boolean onJsBeforeUnload(java.lang.String,java.lang.String)> 
<android.view.Surface: void setAlpha(float)> 
<android.filterfw.core.NativeFrame: void setFloats(float[])> 
<android.view.InputFilter: void sendInputEvent(android.view.InputEvent,int)> 
<org.apache.xml.serializer.ToUnknownStream: void setSourceLocator(javax.xml.transform.SourceLocator)> 
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)> 
<android.telephony.SignalStrength: void setGsm(boolean)> 
<android.widget.ZoomControls: void setOnZoomOutClickListener(android.view.View$OnClickListener)> 
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> 
<org.apache.xalan.templates.FuncDocument: void warn(org.apache.xpath.XPathContext,java.lang.String,java.lang.Object[])> 
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)> 
<java.security.cert.X509CertSelector: void setSubject(javax.security.auth.x500.X500Principal)> 
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)> 
<android.media.effect.effects.BackDropperEffect: void setParameter(java.lang.String,java.lang.Object)> 
<org.apache.xml.serializer.ToTextSAXHandler: void setWriter(java.io.Writer)> 
<org.jivesoftware.smackx.packet.VCard: void setAddressFieldHome(java.lang.String,java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setScrollable(java.lang.Object,boolean)> 
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)> 
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> 
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])> 
<android.webkit.CallbackProxy: void onPageFinished(java.lang.String)> 
<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)> 
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)> 
<gov.nist.core.NameValueList: void set(java.lang.String,java.lang.Object)> 
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> 
<android.graphics.drawable.ScaleDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(gov.nist.core.NameValue)> 
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: void setRedirectHandler(org.apache.http.client.RedirectHandler)> 
<org.apache.xml.utils.FastStringBuffer: void setLength(int)> 
<org.apache.harmony.xml.dom.NodeImpl: void setName(org.apache.harmony.xml.dom.NodeImpl,java.lang.String)> 
<android.widget.EditText: void setSelection(int,int)> 
<android.app.ActivityManagerProxy: boolean isImmersive(android.os.IBinder)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setOpaque(java.lang.String)> 
<android.appwidget.AppWidgetManager: void setBindAppWidgetPermission(java.lang.String,boolean)> 
<org.apache.xml.dtm.ref.DTMNamedNodeMap: org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)> 
<android.widget.PopupWindow: void setOutsideTouchable(boolean)> 
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)> 
<android.widget.DateTimeView: void setTime(long)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void startDTD(java.lang.String,java.lang.String,java.lang.String)> 
<android.opengl.GLSurfaceView: void setPreserveEGLContextOnPause(boolean)> 
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> 
<android.widget.Gallery: void setCallbackOnUnselectedItemClick(boolean)> 
<android.webkit.WebSettingsClassic: void setDoubleTapZoom(int)> 
<android.net.NetworkStatsHistory: void dump(com.android.internal.util.IndentingPrintWriter,boolean)> 
<org.jivesoftware.smack.SmackConfiguration: void setPacketReplyTimeout(int)> 
<android.filterfw.core.MutableFrameFormat: void setDimensions(int,int)> 
<android.animation.LayoutTransition: void setStagger(int,long)> 
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)> 
<android.os.Debug: void dumpHprofData(java.lang.String)> 
<android.webkit.WebViewClassic: boolean onKeyMultiple(int,int,android.view.KeyEvent)> 
<org.ccil.cowan.tagsoup.PYXWriter: void adup(char[],int,int)> 
<android.telephony.CellSignalStrengthLte: void log(java.lang.String)> 
<android.app.ActivityManagerProxy: void activityResumed(android.os.IBinder)> 
<org.apache.http.params.HttpConnectionParams: void setSoTimeout(org.apache.http.params.HttpParams,int)> 
<android.net.wifi.WifiNative: boolean setSuspendOptimizations(boolean)> 
<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)> 
<java.util.TimeZone: void setDefault(java.util.TimeZone)> 
<android.webkit.WebSettingsClassic: void setStandardFontFamily(java.lang.String)> 
<android.graphics.Rect: void set(android.graphics.Rect)> 
<android.net.http.Headers: void parseHeader(org.apache.http.util.CharArrayBuffer)> 
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setClassName(java.lang.Object,java.lang.CharSequence)> 
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> 
<android.net.http.HttpAuthHeader: void parseHeader(java.lang.String)> 
<android.os.Debug: void setFieldsOn(java.lang.Class,boolean)> 
<android.net.wifi.WifiInfo: void setMacAddress(java.lang.String)> 
<android.widget.GridLayout: void setUseDefaultMargins(boolean)> 
<org.jivesoftware.smackx.packet.VCard: void setMiddleName(java.lang.String)> 
<android.test.AndroidTestRunner: void setInstrumentation(android.app.Instrumentation)> 
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.HandlerBase)> 
<android.widget.RemoteViews: void setScrollPosition(int,int)> 
<android.support.v4.view.PagerAdapter: void startUpdate(android.view.ViewGroup)> 
<org.jivesoftware.smack.util.ObservableWriter: void write(java.lang.String)> 
<javax.xml.transform.dom.DOMSource: void setSystemId(java.lang.String)> 
<android.media.AudioService: void setMasterMute(boolean,int,android.os.IBinder)> 
<android.widget.ListPopupWindow: void setSoftInputMode(int)> 
<android.widget.QuickContactBadge: void setMode(int)> 
<android.graphics.drawable.AnimatedRotateDrawable: boolean setVisible(boolean,boolean)> 
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,int,java.lang.String)> 
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> 
<org.apache.xpath.axes.UnionPathIterator: void setRoot(int,java.lang.Object)> 
<android.webkit.WebViewCore: void setMockGeolocationPermission(boolean)> 
<android.content.AsyncQueryHandler: void startDelete(int,java.lang.Object,android.net.Uri,java.lang.String,java.lang.String[])> 
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setIntegrityProtected(java.lang.String)> 
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)> 
<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(gov.nist.core.NameValue)> 
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> 
<android.net.wifi.WifiStateMachine: void setWifiApState(int)> 
<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)> 
<android.app.ActivityManagerProxy: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)> 
<android.widget.AutoCompleteTextView: void setDropDownDismissedOnCompletion(boolean)> 
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> 
<android.webkit.WebViewCore: void access$4700(android.webkit.WebViewCore,int,java.lang.String)> 
<android.media.AudioService: void setStreamMute(int,boolean,android.os.IBinder)> 
<java.security.cert.PKIXParameters: void setTrustAnchors(java.util.Set)> 
<java.net.Socket: void setOOBInline(boolean)> 
<android.appwidget.AppWidgetManager: void updateAppWidget(int,android.widget.RemoteViews)> 
<net.oauth.signature.PLAINTEXT: void setConsumerSecret(java.lang.String)> 
<org.apache.xpath.XPathContext: void setVarStack(org.apache.xpath.VariableStack)> 
<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])> 
<org.kxml2.io.KXmlSerializer: void setPrefix(java.lang.String,java.lang.String)> 
<org.apache.xpath.functions.FuncStartsWith: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.view.animation.AnimationSet: void setRepeatMode(int)> 
<dalvik.system.VMRuntime: long setMinimumHeapSize(long)> 
<org.apache.xml.serializer.SerializerTraceWriter: void setBufferSize(int)> 
<org.apache.xalan.transformer.MsgMgr: void message(javax.xml.transform.SourceLocator,java.lang.String,boolean)> 
<dalvik.system.profiler.BinaryHprofWriter: int writeStackFrame(java.lang.StackTraceElement)> 
<android.content.ContentProviderProxy: java.lang.String getType(android.net.Uri)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setCheckable(java.lang.Object,boolean)> 
<android.gesture.Gesture: void setID(long)> 
<android.webkit.WebViewInputDispatcher: void updateStateTrackersLocked(android.webkit.WebViewInputDispatcher$DispatchEvent,android.view.MotionEvent)> 
<gov.nist.javax.sip.address.TelURLImpl: void setTelephoneNumber(gov.nist.javax.sip.address.TelephoneNumber)> 
<junit.framework.TestResult: void runProtected(junit.framework.Test,junit.framework.Protectable)> 
<java.net.MulticastSocket: void setLoopbackMode(boolean)> 
<android.widget.PopupWindow: void setHeight(int)> 
<org.apache.xml.serializer.utils.URI: void setPath(java.lang.String)> 
<android.webkit.HTML5VideoFullScreen: void setMediaController(android.widget.MediaController)> 
<android.content.pm.ContainerEncryptionParams: void writeToParcel(android.os.Parcel,int)> 
<android.app.backup.RestoreObserver: void onUpdate(int,java.lang.String)> 
<android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)> 
<android.widget.TextView: void setHorizontallyScrolling(boolean)> 
<org.apache.http.conn.ssl.SSLSocketFactory: void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)> 
<org.xml.sax.InputSource: void setByteStream(java.io.InputStream)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void warning(org.xml.sax.SAXParseException)> 
<java.util.BitSet: void set(int,int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setSource(android.view.View,int)> 
<android.app.ActivityManagerProxy: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)> 
<gov.nist.javax.sip.header.extensions.References: void setRel(java.lang.String)> 
<android.media.RingtoneManager: void setType(int)> 
<android.view.View: void setActivated(boolean)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setTruststorePath(java.lang.String)> 
<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)> 
<android.net.wifi.SupplicantState: void writeToParcel(android.os.Parcel,int)> 
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)> 
<gov.nist.javax.sip.header.extensions.Replaces: void setFromTag(java.lang.String)> 
<jp.co.omronsoft.openwnn.Keyboard: void setKeyHeight(int)> 
<org.jivesoftware.smack.GoogleExtensions: void setSupportExtendedContactAttribute(boolean)> 
<android.content.SyncManager: void updateRunningAccounts()> 
<libcore.io.ForwardingOs: java.net.InetAddress[] getaddrinfo(java.lang.String,libcore.io.StructAddrinfo)> 
<android.net.wifi.p2p.WifiP2pInfo: void writeToParcel(android.os.Parcel,int)> 
<android.view.inputmethod.InputConnectionWrapper: boolean setComposingRegion(int,int)> 
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)> 
<android.webkit.WebViewClassic: boolean setFrame(int,int,int,int)> 
<org.apache.xalan.templates.ElemCallTemplate: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<java.util.zip.Inflater: void setInput(byte[])> 
<android.app.ActivityManagerProxy: void setPackageAskScreenCompat(java.lang.String,boolean)> 
<org.ccil.cowan.tagsoup.XMLWriter: void writeName(java.lang.String,java.lang.String,java.lang.String,boolean)> 
<android.support.v13.app.FragmentCompat: void setMenuVisibility(android.app.Fragment,boolean)> 
<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)> 
<android.widget.RemoteViews: void setViewVisibility(int,int)> 
<android.app.StatusBarManager: void setIconVisibility(java.lang.String,boolean)> 
<org.jivesoftware.smack.packet.Authentication: void setPassword(java.lang.String)> 
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)> 
<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)> 
<android.webkit.WebViewClassic: void updateTextSelectionFromMessage(int,int,android.webkit.WebViewCore$TextSelectionData)> 
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<android.app.backup.AbsoluteFileBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> 
<android.text.TextLine: void drawTextRun(android.graphics.Canvas,android.text.TextPaint,int,int,int,int,boolean,float,int)> 
<org.apache.commons.io.filefilter.AndFileFilter: boolean accept(java.io.File,java.lang.String)> 
<java.util.logging.LogRecord: void setSourceMethodName(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setSupportZoom(boolean)> 
<java.net.MulticastSocket: void setTTL(byte)> 
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)> 
<android.webkit.AccessibilityInjector: boolean performAccessibilityAction(int,android.os.Bundle)> 
<android.graphics.drawable.Drawable: boolean setState(int[])> 
<android.support.v4.view.PagerTabStrip: void setBackgroundResource(int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setSoTimeout(int)> 
<dalvik.system.profiler.BinaryHprofWriter: int writeString(java.lang.String)> 
<org.apache.xalan.processor.StylesheetHandler: void setOriginatingNode(org.w3c.dom.Node)> 
<android.widget.TextView: void setLinksClickable(boolean)> 
<android.test.mock.MockContext: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> 
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> 
<android.app.ActivityManagerProxy: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean,int)> 
<org.apache.xml.serializer.CharInfo: void setASCIItextDirty(int)> 
<android.view.animation.GridLayoutAnimationController: void setDirection(int)> 
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)> 
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> 
<android.app.Activity: void setFeatureDrawableAlpha(int,int)> 
<java.security.cert.X509CRLSelector: void setMaxCRLNumber(java.math.BigInteger)> 
<android.widget.Gallery: void setGravity(int)> 
<android.widget.ActivityChooserView: void setInitialActivityCount(int)> 
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)> 
<gov.nist.javax.sip.stack.SIPDialog: void setRemoteSequenceNumber(long)> 
<org.apache.harmony.security.asn1.ASN1BitString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)> 
<android.telephony.CellInfo: void setTimeStampType(int)> 
<android.net.rtp.RtpStream: void setMode(int)> 
<gov.nist.core.NameValue: void setValueAsObject(java.lang.Object)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnableSessionCreation(boolean)> 
<android.view.View: void setLeft(int)> 
<android.webkit.WebSettingsClassic: void setWorkersEnabled(boolean)> 
<android.widget.TabWidget: void setRightStripDrawable(android.graphics.drawable.Drawable)> 
<org.apache.james.mime4j.MimeStreamParser: void parseBodyPart(java.io.InputStream)> 
<android.view.View: void setMinimumHeight(int)> 
<org.apache.xalan.processor.StylesheetHandler: void setDocumentLocator(org.xml.sax.Locator)> 
<java.security.cert.X509CertSelector: void setSubject(java.lang.String)> 
<android.media.AudioManager: void setWiredHeadsetOn(boolean)> 
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> 
<org.apache.commons.io.filefilter.NotFileFilter: boolean accept(java.io.File,java.lang.String)> 
<android.app.AlertDialog: void setView(android.view.View)> 
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: void setEnabledCipherSuites(java.lang.String[])> 
<android.media.videoeditor.MediaArtistNativeHelper: void setGeneratePreview(boolean)> 
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])> 
<android.support.v4.view.PagerTitleStrip: void setTextColor(int)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setMessageFactory(gov.nist.javax.sip.stack.StackMessageFactory)> 
<java.util.zip.Deflater: void setDictionary(byte[])> 
<android.text.TextPaint: void set(android.text.TextPaint)> 
<android.webkit.HTML5VideoView: void prepareDataCommon(android.webkit.HTML5VideoViewProxy)> 
<org.apache.xpath.axes.NodeSequence: void setCurrentPos(int)> 
<android.graphics.drawable.DrawableContainer: void setEnterFadeDuration(int)> 
<gov.nist.javax.sip.address.TelURLImpl: void setParameter(java.lang.String,java.lang.String)> 
<android.renderscript.ScriptIntrinsicConvolve5x5: void setInput(android.renderscript.Allocation)> 
<android.webkit.WebViewClassic: boolean selectText(int,int)> 
<java.security.cert.X509CertSelector: void setMatchAllSubjectAltNames(boolean)> 
<android.hardware.usb.UsbRequest: void setClientData(java.lang.Object)> 
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)> 
<org.apache.harmony.security.PrivateKeyImpl: void setAlgorithm(java.lang.String)> 
<android.app.ActivityManagerProxy: void serviceDoneExecuting(android.os.IBinder,int,int,int)> 
<android.media.audiofx.AudioEffect: int setParameter(byte[],byte[])> 
<android.inputmethodservice.InputMethodService: void setExtractViewShown(boolean)> 
<org.apache.xml.utils.StylesheetPIHandler: void setBaseId(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setCacheMode(int)> 
<android.opengl.GLLogWrapper: void log(java.lang.String)> 
<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)> 
<java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.HandlerBase,java.lang.String)> 
<java.net.HttpCookie: void setPortlist(java.lang.String)> 
<org.apache.xpath.functions.FuncFloor: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.xml.serializer.ToSAXHandler: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.view.GLES20DisplayList: void setRotationY(float)> 
<android.view.GLES20DisplayList: void setRotationX(float)> 
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])> 
<javax.obex.ClientSession: javax.obex.HeaderSet setPath(javax.obex.HeaderSet,boolean,boolean)> 
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> 
<android.view.Window: void setContainer(android.view.Window)> 
<org.apache.xml.serializer.SerializerBase: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xml.utils.Context2: void setParent(org.apache.xml.utils.Context2)> 
<org.jivesoftware.smackx.packet.VCard: void setOrganization(java.lang.String)> 
<android.support.v4.app.DialogFragment: void setStyle(int,int)> 
<org.apache.xml.utils.ObjectVector: void setElementAt(java.lang.Object,int)> 
<org.apache.xml.serializer.ToStream: void setIndentAmount(int)> 
<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)> 
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)> 
<gov.nist.javax.sip.DialogFilter: void sendCallOrTransactionDoesNotExistResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)> 
<java.nio.charset.CharsetEncoderICU: void setPosition(java.nio.CharBuffer)> 
<org.apache.xalan.templates.ElemApplyTemplates: void setIsDefaultTemplate(boolean)> 
<android.webkit.WebViewCore: void sendStaticMessage(int,java.lang.Object)> 
<android.support.v4.view.PagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> 
<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)> 
<org.apache.xalan.transformer.TransformerImpl: void setStylesheet(org.apache.xalan.templates.StylesheetRoot)> 
<android.net.wifi.p2p.WifiP2pGroup: void setPassphrase(java.lang.String)> 
<android.media.AudioService: int abandonAudioFocus(android.media.IAudioFocusDispatcher,java.lang.String)> 
<android.app.TabActivity: void setDefaultTab(java.lang.String)> 
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int)> 
<org.apache.xpath.NodeSetDTM: void runTo(int)> 
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer)> 
<junit.framework.TestCase: void run(junit.framework.TestResult)> 
<android.app.MediaRouteButton: void setRouteTypes(int)> 
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)> 
<android.support.v4.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter)> 
<gov.nist.javax.sip.header.ParametersHeader: void setQuotedParameter(java.lang.String,java.lang.String)> 
<org.apache.xml.serializer.ToTextStream: void charactersRaw(char[],int,int)> 
<android.webkit.AutoCompletePopup: void setIsAutoFillProfileSet(boolean)> 
<android.filterfw.core.FilterGraph: void setTypeCheckMode(int)> 
<android.test.mock.MockContext: void setWallpaper(java.io.InputStream)> 
<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)> 
<org.apache.xml.utils.UnImplNode: void setData(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> 
<android.net.SSLCertificateSocketFactory: void setTrustManagers(javax.net.ssl.TrustManager[])> 
<java.io.Writer: void write(char[])> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])> 
<org.apache.xpath.axes.NodeSequence: void setItem(int,int)> 
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> 
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)> 
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,java.lang.String,boolean)> 
<android.service.dreams.DreamService: void setDebug(boolean)> 
<android.net.http.Request: void sendRequest(android.net.http.AndroidHttpClientConnection)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)> 
<org.xml.sax.helpers.AttributesImpl: void setQName(int,java.lang.String)> 
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)> 
<android.graphics.drawable.LayerDrawable: void setLayoutDirection(int)> 
<android.inputmethodservice.ExtractEditText: void setCursorPosition_internal(int,int)> 
<dalvik.system.TemporaryDirectory: void setUpDirectory(java.lang.String)> 
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.ElemVariablePsuedo: void setSelect(org.apache.xpath.XPath)> 
<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)> 
<gov.nist.javax.sip.header.Server: void setProduct(java.util.List)> 
<java.util.SimpleTimeZone: void setStartRule(int,int,int)> 
<org.apache.xml.serializer.ToUnknownStream: void setDoctype(java.lang.String,java.lang.String)> 
<android.support.v4.view.ViewCompatJB: void setImportantForAccessibility(android.view.View,int)> 
<android.filterpacks.imageproc.BitmapSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.app.ApplicationThreadProxy: void scheduleRegisteredReceiver(android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> 
<android.app.ActivityManagerProxy: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)> 
<android.media.MediaFormat: void setInteger(java.lang.String,int)> 
<org.apache.xalan.templates.ElemFallback: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)> 
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)> 
<android.view.VelocityTracker: void setPooled(boolean)> 
<android.view.accessibility.AccessibilityInteractionClient: void setSameThreadMessage(android.os.Message)> 
<android.webkit.WebViewClassic: boolean onKeyUp(int,android.view.KeyEvent)> 
<java.util.concurrent.ConcurrentHashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)> 
<android.widget.PopupWindow: void setAllowScrollingAnchorParent(boolean)> 
<gov.nist.javax.sip.SipStackImpl: void setEnabledProtocols(java.lang.String[])> 
<android.renderscript.ScriptIntrinsicConvolve3x3: void setInput(android.renderscript.Allocation)> 
<javax.obex.PrivateOutputStream: void write(byte[],int,int)> 
<org.apache.xml.serializer.SerializerTraceWriter: void write(int)> 
<android.net.ProxyProperties: void setExclusionList(java.lang.String)> 
<android.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)> 
<gov.nist.core.DuplicateNameValueList: void setSeparator(java.lang.String)> 
<org.apache.http.client.params.ClientParamBean: void setDefaultHost(org.apache.http.HttpHost)> 
<org.apache.http.impl.client.AbstractHttpClient: void setRedirectStrategy(org.apache.http.client.RedirectStrategy)> 
<android.view.ViewRootImpl: void dispatchMoved(int,int)> 
<org.apache.http.impl.cookie.BasicCommentHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)> 
<gov.nist.javax.sip.header.TimeStamp: void setTime(long)> 
<android.support.v4.view.ViewCompatGingerbread: void setOverScrollMode(android.view.View,int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setLongClickable(boolean)> 
<android.media.AudioService: void sendBroadcastToAll(android.content.Intent)> 
<android.graphics.drawable.AnimationDrawable: void setFrame(int,boolean,boolean)> 
<android.text.style.ForegroundColorSpan: void writeToParcel(android.os.Parcel,int)> 
<android.support.v4.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)> 
<android.widget.EdgeEffect: void setPosition(int,int)> 
<android.net.nsd.NsdManager: void stopServiceDiscovery(android.net.nsd.NsdManager$DiscoveryListener)> 
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)> 
<android.webkit.WebViewClassic: void setBackgroundColor(int)> 
<android.net.LinkSocket: boolean setNeededCapabilities(android.net.LinkCapabilities)> 
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> 
<android.view.Surface: void setDisplayProjection(android.os.IBinder,int,android.graphics.Rect,android.graphics.Rect)> 
<android.graphics.drawable.ScaleDrawable: boolean setVisible(boolean,boolean)> 
<gov.nist.javax.sip.header.SIPDate: void setSecond(int)> 
<gov.nist.javax.sip.stack.SIPTransaction: void setState(javax.sip.TransactionState)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setComment(java.lang.String)> 
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> 
<org.apache.http.impl.cookie.RFC2109DomainHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<gov.nist.javax.sip.header.ims.PAssertedService: void setValue(java.lang.String)> 
<java.net.URLConnection: void setDoInput(boolean)> 
<org.apache.xpath.functions.FuncConcat: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.webkit.CookieManagerClassic: void setCookie(java.lang.String,java.lang.String)> 
<android.app.ActivityManagerProxy: void cancelIntentSender(android.content.IIntentSender)> 
<android.widget.DialerFilter: void setDigitsWatcher(android.text.TextWatcher)> 
<android.net.InterfaceConfiguration: void setHardwareAddress(java.lang.String)> 
<android.app.Fragment: void setUserVisibleHint(boolean)> 
<org.apache.xml.serializer.SerializerBase: void setDTDEntityExpansion(boolean)> 
<android.widget.CursorTreeAdapter: void setGroupCursor(android.database.Cursor)> 
<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection,java.lang.String)> 
<org.jivesoftware.smack.util.Base64: byte[] decode(byte[],int,int)> 
<android.appwidget.AppWidgetManager: void updateAppWidget(android.content.ComponentName,android.widget.RemoteViews)> 
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setValue(java.lang.String)> 
<android.app.ActivityManagerProxy: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)> 
<libcore.net.http.HttpConnection: void setSoTimeout(int)> 
<android.database.sqlite.SQLiteConnection: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> 
<android.view.MotionEvent: void setSource(int)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setOOBInline(boolean)> 
<android.graphics.drawable.GradientDrawable: void setAlpha(int)> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnEngineJAJP: void setKeyboardType(int)> 
<org.ccil.cowan.tagsoup.PYXWriter: void etag(char[],int,int)> 
<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)> 
<java.util.Locale: void setDefault(java.util.Locale)> 
<org.apache.xml.serializer.ToUnknownStream: void setEncoding(java.lang.String)> 
<org.apache.http.params.HttpProtocolParams: void setContentCharset(org.apache.http.params.HttpParams,java.lang.String)> 
<org.apache.http.client.params.ClientParamBean: void setVirtualHost(org.apache.http.HttpHost)> 
<android.widget.AbsListView: void setOverScrollMode(int)> 
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)> 
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)> 
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)> 
<android.media.AudioService: void setPlaybackInfoForRcc(int,int,int)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void endPrefixMapping(java.lang.String)> 
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)> 
<java.util.Calendar: void set(int,int,int,int,int,int)> 
<android.app.ActivityManagerProxy: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> 
<android.view.Surface: void writeToParcel(android.os.Parcel,int)> 
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)> 
<org.apache.harmony.security.x509.IssuingDistributionPoint: void setIndirectCRL(boolean)> 
<org.apache.xalan.templates.NamespaceAlias: void setStylesheetNamespace(java.lang.String)> 
<java.net.Socket: void setSoLinger(boolean,int)> 
<org.apache.http.client.params.HttpClientParams: void setRedirecting(org.apache.http.params.HttpParams,boolean)> 
<android.graphics.Matrix: void setRotate(float,float,float)> 
<android.telephony.NeighboringCellInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)> 
<org.apache.xml.serializer.ToSAXHandler: void setShouldOutputNSAttr(boolean)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: javax.sip.Dialog getReplacesDialog(gov.nist.javax.sip.header.extensions.ReplacesHeader)> 
<org.jivesoftware.smack.packet.DataMessage: void setRegId(java.lang.String)> 
<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> 
<android.content.IntentFilter: void setPriority(int)> 
<libcore.net.http.UnknownLengthHttpInputStream: int read(byte[],int,int)> 
<android.webkit.WebViewCore: boolean isUpdatePicturePaused(android.webkit.WebViewCore)> 
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)> 
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)> 
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)> 
<android.widget.ExpandableListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> 
<gov.nist.javax.sip.header.ims.PChargingVector: void setICID(java.lang.String)> 
<android.view.View: void setNextFocusRightId(int)> 
<android.support.v4.app.ListFragment: void setListShownNoAnimation(boolean)> 
<android.widget.GridView: void setHorizontalSpacing(int)> 
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int,int)> 
<android.app.ActivityManagerProxy: android.os.IBinder peekService(android.content.Intent,java.lang.String)> 
<org.jivesoftware.smackx.provider.DiscoverItemsProvider: org.jivesoftware.smack.packet.IQ parseIQ(com.google.common.io.protocol.ProtoBuf)> 
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)> 
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> 
<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)> 
<android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<android.widget.ProgressBar: void setProgressDrawable(android.graphics.drawable.Drawable)> 
<android.text.style.AbsoluteSizeSpan: void writeToParcel(android.os.Parcel,int)> 
<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)> 
<org.apache.xml.serializer.ToHTMLStream: void setOmitMetaTag(boolean)> 
<org.xml.sax.helpers.ParserAdapter: void setEntityResolver(org.xml.sax.EntityResolver)> 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void setIgnoreElementContentWhitespace(boolean)> 
<android.widget.ImageView: void setCropToPadding(boolean)> 
<android.app.ActivityManagerProxy: int getLaunchedFromUid(android.os.IBinder)> 
<android.widget.AutoCompleteTextView: void setCompletionHint(java.lang.CharSequence)> 
<org.apache.xpath.NodeSetDTM: void setLast(int)> 
<android.app.ActivityManagerProxy: void killApplicationProcess(java.lang.String,int)> 
<org.apache.http.protocol.HttpService: void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)> 
<javax.xml.validation.Validator: void setProperty(java.lang.String,java.lang.Object)> 
<org.jivesoftware.smack.provider.RawXmlIQProvider: org.jivesoftware.smack.packet.IQ parseIQ(com.google.common.io.protocol.ProtoBuf)> 
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)> 
<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)> 
<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.ZoomManager: void setZoomCenter(float,float)> 
<libcore.io.IoBridge: void setSocketOptionErrno(java.io.FileDescriptor,int,java.lang.Object)> 
<org.apache.xpath.NodeSetDTM: void setShouldCacheNodes(boolean)> 
<java.io.PrintWriter: void write(char[])> 
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> 
<android.widget.ListView: void setCacheColorHint(int)> 
<org.apache.commons.io.input.TeeInputStream: int read(byte[])> 
<android.animation.ValueAnimator: void setFrameDelay(long)> 
<gov.nist.core.GenericObject: java.lang.String debugDump()> 
<android.app.ActivityManagerProxy: boolean startNextMatchingActivity(android.os.IBinder,android.content.Intent,android.os.Bundle)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setWantClientAuth(boolean)> 
<android.app.ActivityManagerProxy: android.content.ComponentName getCallingActivity(android.os.IBinder)> 
<android.location.Location: void setTime(long)> 
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)> 
<gov.nist.javax.sip.header.SIPHeaderList: java.lang.String debugDump(int)> 
<org.jivesoftware.smack.PacketReader: void dumpListener(java.util.List,java.io.PrintWriter)> 
<android.widget.DatePicker: void setEnabled(boolean)> 
<android.widget.ActivityChooserView: void setProvider(android.view.ActionProvider)> 
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> 
<android.view.SurfaceView: void setSecure(boolean)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setDocumentLocator(org.xml.sax.Locator)> 
<org.apache.xml.serializer.ToHTMLStream: void addUniqueAttribute(java.lang.String,java.lang.String,int)> 
<android.view.ViewRootImpl: void dispatchDragEvent(android.view.DragEvent)> 
<android.test.ActivityInstrumentationTestCase2: void setActivityIntent(android.content.Intent)> 
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> 
<android.webkit.WebSettingsClassic: void setDisplayZoomControls(boolean)> 
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.xml.sax.helpers.AttributesImpl: void setURI(int,java.lang.String)> 
<android.renderscript.Script: void setTimeZone(java.lang.String)> 
<org.apache.xml.serializer.ToStream: int accumDefaultEscape(java.io.Writer,char,int,char[],int,boolean,boolean)> 
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)> 
<android.util.PrintWriterPrinter: void println(java.lang.String)> 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: void parseForConstructor(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.Class[])> 
<java.text.NumberFormat: void setMinimumFractionDigits(int)> 
<android.filterfw.core.GLFrame: void setTextureParameter(int,int)> 
<java.lang.StringToReal: double parseDouble(java.lang.String)> 
<android.webkit.WebBackForwardListClassic: void setCurrentIndex(int)> 
<android.widget.ActivityChooserView: void setExpandActivityOverflowButtonDrawable(android.graphics.drawable.Drawable)> 
<android.inputmethodservice.Keyboard: void loadKeyboard(android.content.Context,android.content.res.XmlResourceParser)> 
<android.widget.FrameLayout: void setForegroundGravity(int)> 
<org.apache.commons.io.filefilter.SuffixFileFilter: boolean accept(java.io.File,java.lang.String)> 
<android.widget.ListView: void setDividerHeight(int)> 
<org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)> 
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)> 
<android.webkit.WebViewClassic: void onScrollChanged(int,int,int,int)> 
<org.apache.xml.utils.UnImplNode: void error(java.lang.String,java.lang.Object[])> 
<org.kxml2.io.KXmlSerializer: void comment(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setBoundsInParent(android.graphics.Rect)> 
<org.apache.xpath.axes.LocPathIterator: void setEnvironment(java.lang.Object)> 
<android.text.style.LocaleSpan: void updateMeasureState(android.text.TextPaint)> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactoryClassName(java.lang.String)> 
<org.apache.xpath.SourceTreeManager: void setURIResolver(javax.xml.transform.URIResolver)> 
<android.content.SyncStorageEngine: void setMasterSyncAutomatically(boolean,int)> 
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])> 
<org.jivesoftware.smackx.ServiceDiscoveryManager: void setIdentityType(java.lang.String)> 
<org.apache.james.mime4j.field.address.parser.SimpleCharStream: void setTabSize(int)> 
<android.content.SyncAdaptersCache: android.content.SyncAdapterType parseServiceAttributes(android.content.res.Resources,java.lang.String,android.util.AttributeSet)> 
<java.text.DateFormatSymbols: void setMonths(java.lang.String[])> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setSoWriteTimeout(int)> 
<org.jivesoftware.smack.packet.Packet: void setError(org.jivesoftware.smack.packet.XMPPError)> 
<org.apache.xml.utils.UnImplNode: void setIdAttributeNode(org.w3c.dom.Attr,boolean)> 
<gov.nist.javax.sip.address.UserInfo: void setUserType(int)> 
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> 
<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smack.util.PacketParserUtils: long parseRmqIdFromString(java.lang.String)> 
<org.apache.xpath.axes.PredicatedNodeTest: void setPredicateCount(int)> 
<android.webkit.WebSettingsClassic: void setSupportMultipleWindows(boolean)> 
<android.widget.TextClock: void setTimeZone(java.lang.String)> 
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)> 
<org.apache.xalan.templates.FuncDocument: void error(org.apache.xpath.XPathContext,java.lang.String,java.lang.Object[])> 
<android.widget.ViewFlipper: void setFlipInterval(int)> 
<android.webkit.WebViewClassic: void setWebChromeClient(android.webkit.WebChromeClient)> 
<android.graphics.drawable.AnimatedRotateDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.webkit.WebViewClassic: boolean requestFocus(int,android.graphics.Rect)> 
<android.widget.GridView: void setGravity(int)> 
<android.app.ActivityManagerProxy: void activityPaused(android.os.IBinder)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void sendUrgentData(int)> 
<android.webkit.ZoomManager: void setZoomOverviewWidth(int)> 
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesDuration(int)> 
<org.apache.xalan.templates.OutputProperties: void setMethodDefaults(java.lang.String)> 
<android.appwidget.AppWidgetHost: void updateAppWidgetView(int,android.widget.RemoteViews)> 
<org.apache.xml.utils.UnImplNode: void replaceData(int,int,java.lang.String)> 
<android.support.v4.widget.SimpleCursorAdapter: void setViewBinder(android.support.v4.widget.SimpleCursorAdapter$ViewBinder)> 
<org.apache.xpath.XPathContext: void setSecureProcessing(boolean)> 
<android.media.AudioTrack: int setAuxEffectSendLevel(float)> 
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: void writeToParcel(android.os.Parcel,int)> 
<android.widget.FastScroller: void setState(int)> 
<android.app.ActivityThread: void handleDestroyBackupAgent(android.app.ActivityThread$CreateBackupAgentData)> 
<android.webkit.WebSettings: void setAllowFileAccess(boolean)> 
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)> 
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)> 
<android.app.ActivityManagerProxy: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> 
<android.net.NetworkPolicyManager: void dumpPolicy(java.io.PrintWriter,int)> 
<android.view.ViewRootImpl: void die(boolean)> 
<android.net.Proxy: void validate(java.lang.String,java.lang.String,java.lang.String)> 
<android.test.InstrumentationTestCase: void runMethod(java.lang.reflect.Method,int)> 
<org.apache.commons.io.output.TeeOutputStream: void write(byte[],int,int)> 
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> 
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> 
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)> 
<org.jivesoftware.smack.XMPPConnection: void setAuthenticated(boolean)> 
<org.apache.james.mime4j.field.DelegatingFieldParser: org.apache.james.mime4j.field.FieldParser getParser(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoLinger(boolean,int)> 
<java.security.MessageDigest: void update(byte[],int,int)> 
<android.media.MiniThumbFile: void saveMiniThumbToFile(byte[],long,long)> 
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)> 
<libcore.net.http.RequestHeaders: void setAcceptEncoding(java.lang.String)> 
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner)> 
<org.apache.xpath.XPathContext: void setCurrentNodeStack(org.apache.xml.utils.IntStack)> 
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],boolean)> 
<android.animation.ValueAnimator: void setRepeatMode(int)> 
<android.webkit.CallbackProxy: void onReceivedIcon(android.graphics.Bitmap)> 
<org.jivesoftware.smack.XMPPConnection: void setLocalConnectionId(int)> 
<android.os.Message: void setData(android.os.Bundle)> 
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])> 
<libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)> 
<android.view.View: void setPivotY(float)> 
<android.view.View: void setPivotX(float)> 
<android.view.animation.Animation: void setStartOffset(long)> 
<org.kxml2.io.KXmlSerializer: void setOutput(java.io.Writer)> 
<gov.nist.core.LogWriter: void setStackProperties(java.util.Properties)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void setDefaultMaxPerRoute(int)> 
<org.apache.xml.dtm.DTMManager: void setIncremental(boolean)> 
<android.widget.ToggleButton: void setChecked(boolean)> 
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)> 
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)> 
<android.widget.TextView: void setText(char[],int,int)> 
<org.apache.harmony.xml.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)> 
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)> 
<android.app.ActivityManagerProxy: void moveTaskToBack(int)> 
<android.content.SyncManager: void dumpSyncAdapters(com.android.internal.util.IndentingPrintWriter)> 
<org.apache.harmony.xml.ExpatParser: void parseDocument(java.io.Reader)> 
<android.widget.TextView: void setMaxHeight(int)> 
<android.net.wifi.WifiNative: boolean setSerialNumber(java.lang.String)> 
<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)> 
<org.apache.xml.serializer.ToUnknownStream: void setVersion(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setChecked(boolean)> 
<android.webkit.WebIconDatabaseClassic: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> 
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromData(byte[],java.lang.String)> 
<org.apache.xml.serializer.ToHTMLStream: void processAttribute(java.io.Writer,java.lang.String,java.lang.String,org.apache.xml.serializer.ElemDesc)> 
<org.xml.sax.helpers.XMLReaderAdapter: void setDocumentHandler(org.xml.sax.DocumentHandler)> 
<android.app.Activity: void setImmersive(boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setSelected(boolean)> 
<android.os.CancellationSignal: void setRemote(android.os.ICancellationSignal)> 
<android.content.pm.PackageStats: void writeToParcel(android.os.Parcel,int)> 
<android.text.SpannableStringBuilder: void drawTextRun(android.graphics.Canvas,int,int,int,int,float,float,int,android.graphics.Paint)> 
<org.ccil.cowan.tagsoup.Schema: void setPrefix(java.lang.String)> 
<android.net.wifi.WifiInfo: void setNetworkId(int)> 
<org.jivesoftware.smack.packet.Packet: void setProperty(java.lang.String,int)> 
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> 
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)> 
<org.apache.commons.io.EndianUtils: void writeSwappedShort(java.io.OutputStream,short)> 
<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)> 
<android.net.wifi.WifiNative: boolean setNetworkVariable(int,java.lang.String,java.lang.String)> 
<android.webkit.JWebCoreJavaBridge: void handleMessage(android.os.Message)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void setControlPort(int)> 
<android.speech.srec.WaveHeader: android.speech.srec.WaveHeader setBitsPerSample(short)> 
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> 
<android.location.LocationRequest: android.location.LocationRequest setQuality(int)> 
<org.apache.harmony.security.x509.TBSCertificate: void dumpValue(java.lang.StringBuilder)> 
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)> 
<android.graphics.drawable.GradientDrawable: void setUseLevel(boolean)> 
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> 
<android.view.View: void setNextFocusLeftId(int)> 
<android.net.NetworkPolicyManager: void dumpRules(java.io.PrintWriter,int)> 
<org.apache.xml.dtm.ref.DTMStringPool: void main(java.lang.String[])> 
<android.net.DnsPinger: void sendResponse(int,int,int)> 
<android.widget.ListPopupWindow: void setWidth(int)> 
<gov.nist.javax.sip.header.MimeVersion: void setMinorVersion(int)> 
<android.content.CursorLoader: void setSelectionArgs(java.lang.String[])> 
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)> 
<android.test.ActivityTestCase: void setActivity(android.app.Activity)> 
<gov.nist.javax.sip.stack.ServerLog: void logMessage(java.lang.String)> 
<org.apache.harmony.xml.parsers.SAXParserFactoryImpl: void setValidating(boolean)> 
<org.apache.xml.utils.UnImplNode: void setStrictErrorChecking(boolean)> 
<android.view.GLES20RecordingCanvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)> 
<org.jivesoftware.smackx.packet.VCard: void setAddressFieldWork(java.lang.String,java.lang.String)> 
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)> 
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> 
<android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)> 
<org.javia.arity.Util: java.lang.String sizeTruncate(java.lang.String,int)> 
<android.os.Message: void sendToTarget()> 
<android.net.wifi.NetworkUpdateResult: void setIsNewNetwork(boolean)> 
<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)> 
<org.apache.xpath.XPathContext: void setContextNodeListsStack(java.util.Stack)> 
<android.view.GLES20TextureLayer: void setOpaque(boolean)> 
<org.apache.harmony.crypto.internal.NullCipherSpi: byte[] engineUpdate(byte[],int,int)> 
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)> 
<android.webkit.WebViewClassic: void setMockGeolocationPermission(boolean)> 
<android.test.AndroidTestRunner: void setSkipExecution(boolean)> 
<android.widget.CursorTreeAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)> 
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)> 
<org.jivesoftware.smack.packet.Presence: void setAvatarHash(java.lang.String)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void startPrefixMapping(java.lang.String,java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setWantClientAuth(boolean)> 
<android.webkit.CallbackProxy: void onReceivedCertificate(android.net.http.SslCertificate)> 
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)> 
<org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> 
<org.apache.xalan.processor.XSLTElementDef: void setType(int)> 
<android.support.v4.app.Fragment: void setTargetFragment(android.support.v4.app.Fragment,int)> 
<java.net.MulticastSocket: void setTimeToLive(int)> 
<android.widget.TextView: void setMaxLines(int)> 
<android.renderscript.Script: void setVar(int,int)> 
<org.apache.xalan.templates.ElemExtensionDecl: void setElements(org.apache.xml.utils.StringVector)> 
<android.widget.TabHost: void sendAccessibilityEvent(int)> 
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)> 
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> 
<java.util.zip.ZipEntry: void setTime(long)> 
<org.apache.xalan.templates.Stylesheet: void setImport(org.apache.xalan.templates.StylesheetComposed)> 
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parsePackage(java.io.File,java.lang.String,android.util.DisplayMetrics,int)> 
<org.apache.xml.serializer.dom3.DOMOutputImpl: void setByteStream(java.io.OutputStream)> 
<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.util.Collection)> 
<org.apache.harmony.xnet.provider.jsse.ClientHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<android.net.WebAddress: void setAuthInfo(java.lang.String)> 
<org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> 
<android.widget.TextSwitcher: void setCurrentText(java.lang.CharSequence)> 
<android.webkit.DeviceMotionService: void stopSendingUpdates()> 
<android.webkit.WebSettingsClassic: void setSerifFontFamily(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLCipherRSA: int engineUpdate(byte[],int,int,byte[],int)> 
<java.util.Calendar: void setTime(java.util.Date)> 
<android.view.GLES20Canvas: void setViewport(int,int)> 
<org.apache.http.impl.client.AbstractHttpClient: void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<android.preference.Preference: void setFragment(java.lang.String)> 
<android.graphics.RectF: void set(android.graphics.Rect)> 
<android.view.GLES20Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,int,android.graphics.Paint)> 
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> 
<jp.co.omronsoft.openwnn.OpenWnn: void setCandidatesViewShown(boolean)> 
<android.database.BulkCursorDescriptor: void writeToParcel(android.os.Parcel,int)> 
<javax.xml.validation.SchemaFactory: void setProperty(java.lang.String,java.lang.Object)> 
<org.jivesoftware.smackx.packet.VCard: void setModified(boolean)> 
<android.util.JsonWriter: android.util.JsonWriter value(long)> 
<org.apache.http.client.params.ClientParamBean: void setMaxRedirects(int)> 
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> 
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)> 
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)> 
<android.app.ActivityManagerProxy: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> 
<android.webkit.WebViewCore: void setupViewport(boolean)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setState(javax.sip.TransactionState)> 
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)> 
<android.filterfw.core.SimpleFrame: void setFloats(float[])> 
<android.preference.MultiCheckPreference: void setSummary(java.lang.CharSequence)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setNsNameTable(org.apache.xml.dtm.ref.DTMStringPool)> 
<android.view.View: void setVerticalScrollbarPosition(int)> 
<android.widget.CalendarView: void setSelectedWeekBackgroundColor(int)> 
<gov.nist.javax.sip.address.SipUri: void setMethodParam(java.lang.String)> 
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,float[],int)> 
<android.view.animation.Animation: void setListenerHandler(android.os.Handler)> 
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> 
<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> 
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)> 
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)> 
<android.net.WebAddress: void setScheme(java.lang.String)> 
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)> 
<android.support.v4.view.AccessibilityDelegateCompatIcs: void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent)> 
<gov.nist.javax.sip.stack.UDPMessageChannel: void handleException(java.text.ParseException,gov.nist.javax.sip.message.SIPMessage,java.lang.Class,java.lang.String,java.lang.String)> 
<android.widget.TextView: void setLines(int)> 
<java.net.Socket: void setPerformancePreferences(int,int,int)> 
<java.text.DecimalFormat: void setCurrency(java.util.Currency)> 
<org.apache.xml.serializer.ToTextSAXHandler: void setIndent(boolean)> 
<org.apache.xml.utils.DOMBuilder: void setIDAttribute(java.lang.String,org.w3c.dom.Element)> 
<org.jivesoftware.smack.packet.HttpResponse: void setData(byte[])> 
<java.lang.System: void setIn(java.io.InputStream)> 
<android.database.BulkCursorProxy: android.os.Bundle respond(android.os.Bundle)> 
<android.app.ActivityManagerProxy: int stopUser(int,android.app.IStopUserCallback)> 
<android.view.View: void setPadding(int,int,int,int)> 
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setExpiredCertificatesCheckEnabled(boolean)> 
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)> 
<android.content.DefaultDataHandler: void insert(android.content.ContentResolver,java.io.InputStream)> 
<java.lang.reflect.Field: void setChar(java.lang.Object,char)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: void setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource)> 
<org.jivesoftware.smack.XMPPConnection: java.lang.String bindAccount(java.lang.String,java.lang.String,java.lang.String,long)> 
<android.drm.DrmSupportInfo: void setDescription(java.lang.String)> 
<android.net.ConnectivityManager: boolean setRadios(boolean)> 
<dalvik.system.profiler.HprofData: void setFlags(int)> 
<android.widget.ImageView: void setBaseline(int)> 
<android.view.animation.Transformation: void setAlpha(float)> 
<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> 
<java.util.zip.ZipEntry: void setCompressedSize(long)> 
<android.graphics.drawable.GradientDrawable: void setGradientCenter(float,float)> 
<android.support.v4.content.CursorLoader: void setUri(android.net.Uri)> 
<java.util.SimpleTimeZone: void setEndRule(int,int,int,int)> 
<android.net.wifi.WifiInfo: void setMeteredHint(boolean)> 
<android.filterfw.core.ShaderProgram: void setHostValue(java.lang.String,java.lang.Object)> 
<android.widget.SearchView: void setQuery(java.lang.CharSequence)> 
<android.service.wallpaper.WallpaperService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.ExpandableListConnector: void setMaxExpGroupCount(int)> 
<org.apache.http.conn.params.ConnConnectionParamBean: void setMaxStatusLineGarbage(int)> 
<android.media.AudioService: void sendMasterMuteUpdate(boolean,int)> 
<android.widget.ListView: void setHeaderDividersEnabled(boolean)> 
<android.widget.TextView: void setHintTextColor(int)> 
<org.apache.xpath.axes.AxesWalker: void setExpression(org.apache.xpath.Expression)> 
<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String)> 
<android.media.AudioTrack: int setPlaybackRate(int)> 
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)> 
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Provider parseProvider(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])> 
<org.apache.xpath.axes.WalkingIterator: void setExpression(org.apache.xpath.Expression)> 
<android.filterfw.core.FrameFormat: boolean isReplaceableBy(android.filterfw.core.FrameFormat)> 
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)> 
<android.inputmethodservice.ExtractEditText: void setExtractedText(android.view.inputmethod.ExtractedText)> 
<android.net.http.Headers: void setEtag(java.lang.String)> 
<android.location.Location: void setExtras(android.os.Bundle)> 
<android.filterpacks.videosink.MediaEncoderFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<libcore.icu.NativeDecimalFormat: void setParseBigDecimal(boolean)> 
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)> 
<java.nio.SelectorImpl: void setPollFd(int,java.io.FileDescriptor,int,java.lang.Object)> 
<java.net.Socks4Message: void setString(int,int,java.lang.String)> 
<gov.nist.javax.sip.message.SIPRequest: void setTransaction(java.lang.Object)> 
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeStackTrace(dalvik.system.profiler.HprofData$StackTrace)> 
<gov.nist.javax.sip.stack.SIPDialog: void setLastAckSent(gov.nist.javax.sip.message.SIPRequest)> 
<android.support.v13.app.FragmentTabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setNodeValue(java.lang.String)> 
<android.widget.LinearLayout: void setVerticalGravity(int)> 
<android.content.pm.VerificationParams: void writeToParcel(android.os.Parcel,int)> 
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)> 
<org.jivesoftware.smack.GroupChat: void sendMessage(org.jivesoftware.smack.packet.Message)> 
<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)> 
<android.telephony.SmsCbMessage: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.ElemTemplate: void setName(org.apache.xml.utils.QName)> 
<android.net.nsd.DnsSdTxtRecord: void set(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.address.NetObjectList: java.lang.String debugDump(int)> 
<android.gesture.GestureOverlayView: void setGestureStrokeSquarenessTreshold(float)> 
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> 
<org.apache.xalan.templates.ElemAttributeSet: void setName(org.apache.xml.utils.QName)> 
<android.content.ContentService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.media.AudioService: void setMasterVolume(int,int)> 
<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)> 
<android.inputmethodservice.IInputMethodWrapper: void executeMessage(android.os.Message)> 
<android.app.Fragment: void setHasOptionsMenu(boolean)> 
<org.jivesoftware.smack.PacketReader: org.jivesoftware.smack.packet.IQ handleUnsupportedIqPacket(java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.IQ$Type,long)> 
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)> 
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.Spinner: void setOnItemClickListenerInt(android.widget.AdapterView$OnItemClickListener)> 
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)> 
<android.filterfw.geometry.Point: void set(float,float)> 
<org.apache.http.params.HttpConnectionParams: void setSoReuseaddr(org.apache.http.params.HttpParams,boolean)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void elementDecl(java.lang.String,java.lang.String)> 
<android.webkit.CallbackProxy: void onScaleChanged(float,float)> 
<android.view.View: void setVerticalScrollBarEnabled(boolean)> 
<org.jivesoftware.smack.PacketReader: void handleProtoBuf(com.google.common.io.protocol.ProtoBuf,long)> 
<android.opengl.EGLLogWrapper: void log(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setAccesibilityFocused(java.lang.Object,boolean)> 
<android.view.animation.AnimationSet: void setStartOffset(long)> 
<android.os.Parcel: void writeList(java.util.List)> 
<java.util.concurrent.ForkJoinTask: void writeObject(java.io.ObjectOutputStream)> 
<java.sql.SQLWarning: void setNextWarning(java.sql.SQLWarning)> 
<android.widget.TextView: void setEnabled(boolean)> 
<android.telephony.ServiceState: void setIsManualSelection(boolean)> 
<android.os.Parcel: void setDataCapacity(int)> 
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)> 
<javax.xml.datatype.XMLGregorianCalendar: void setTime(int,int,int,int)> 
<org.apache.xalan.processor.XSLTElementDef: void setElements(org.apache.xalan.processor.XSLTElementDef[])> 
<android.widget.OverScroller: void setInterpolator(android.view.animation.Interpolator)> 
<android.util.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<jp.co.omronsoft.openwnn.UserDictionaryToolsListFocus: void setPairView(android.widget.TextView)> 
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)> 
<android.widget.AbsSpinner: void setSelection(int,boolean)> 
<java.net.DatagramPacket: void setLength(int)> 
<org.apache.commons.io.filefilter.AbstractFileFilter: boolean accept(java.io.File,java.lang.String)> 
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> 
<org.apache.xml.serializer.ToUnknownStream: void setDoctypePublic(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setToIndex(int)> 
<org.apache.harmony.xml.dom.DocumentImpl: void setXmlStandalone(boolean)> 
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int,android.widget.RemoteViews)> 
<android.view.ViewGroup: boolean updateLocalSystemUiVisibility(int,int)> 
<org.apache.xalan.templates.StylesheetRoot: java.lang.String setExtensionHandlerClass(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTrafficClass(int)> 
<android.content.res.CompatibilityInfo: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.CallbackProxy: void onNewHistoryItem(android.webkit.WebHistoryItem)> 
<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> 
<android.telephony.NeighboringCellInfo: void setRssi(int)> 
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> 
<java.net.Socket: void setTcpNoDelay(boolean)> 
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.webkit.WebViewCore: void pauseUpdatePicture(android.webkit.WebViewCore)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setEnabled(boolean)> 
<libcore.icu.NativeDecimalFormat: void setNegativePrefix(java.lang.String)> 
<android.view.ViewRootImpl: void pushHardwareLayerUpdate(android.view.HardwareLayer)> 
<android.webkit.WebSettingsClassic: void setDatabasePath(java.lang.String)> 
<gov.nist.core.NameValueList: void setSeparator(java.lang.String)> 
<android.view.HardwareRenderer: void setRequested(boolean)> 
<android.graphics.PointF: void set(float,float)> 
<org.apache.xml.serializer.ToStream: void elementDecl(java.lang.String,java.lang.String)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setMediaType(java.lang.String)> 
<android.widget.ImageView: void setImageState(int[],boolean)> 
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)> 
<android.widget.Spinner: void setDropDownHorizontalOffset(int)> 
<org.jivesoftware.smack.XMPPConnection: void setWakeLock(android.os.PowerManager$WakeLock)> 
<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)> 
<org.apache.xml.serializer.ToSAXHandler: void setLexHandler(org.xml.sax.ext.LexicalHandler)> 
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)> 
<org.apache.xml.utils.URI: void setQueryString(java.lang.String)> 
<gov.nist.core.Host: void setHostAddress(java.lang.String)> 
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)> 
<android.media.audiofx.Visualizer: int setServerDiedListener(android.media.audiofx.Visualizer$OnServerDiedListener)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setXmlVersion(java.lang.String)> 
<org.jivesoftware.smack.PacketWriter: void sendHeartbeatAck()> 
<android.text.method.AllCapsTransformationMethod: void setLengthChangesAllowed(boolean)> 
<android.graphics.Paint: void setCompatibilityScaling(float)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setFromIndex(int)> 
<gov.nist.javax.sip.address.SipUri: void setUriParameter(gov.nist.core.NameValue)> 
<android.preference.Preference: void setWidgetLayoutResource(int)> 
<android.hardware.input.InputManager: void setPointerSpeed(android.content.Context,int)> 
<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setAutoHide(boolean)> 
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> 
<org.apache.xml.dtm.ref.DTMTreeWalker: void setDTM(org.apache.xml.dtm.DTM)> 
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)> 
<android.app.SearchDialog: void setListSelection(int)> 
<android.webkit.WebSettings: void setSupportZoom(boolean)> 
<android.webkit.WebViewClassic: void saveWebArchiveImpl(java.lang.String,boolean,android.webkit.ValueCallback)> 
<android.telephony.ServiceState: void setOperatorAlphaLong(java.lang.String)> 
<org.apache.commons.io.CopyUtils: void copy(byte[],java.io.OutputStream)> 
<java.lang.Thread: void setPriority(int)> 
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)> 
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)> 
<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])> 
<android.opengl.GLSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)> 
<gov.nist.core.LogWriter: void setBuildTimeStamp(java.lang.String)> 
<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> 
<android.filterfw.core.GLEnvironment: void setSurfaceTimestamp(long)> 
<android.nfc.NfcActivityManager: void setNdefPushMessageCallback(android.app.Activity,android.nfc.NfcAdapter$CreateNdefMessageCallback)> 
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)> 
<android.view.View: void setRotationY(float)> 
<android.view.View: void setRotationX(float)> 
<org.apache.http.params.HttpConnectionParamBean: void setTcpNoDelay(boolean)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int)> 
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)> 
<android.net.http.Request: void setBodyProvider(java.io.InputStream,int)> 
<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)> 
<org.apache.xml.serializer.SerializerBase: void setStandalone(java.lang.String)> 
<android.text.DynamicLayout: void setBlocksDataForTest(int[],int[],int)> 
<org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> 
<java.io.RandomAccessFile: void write(byte[],int,int)> 
<org.jivesoftware.smackx.packet.VCard: void setOrganizationUnit(java.lang.String)> 
<gov.nist.javax.sip.header.Protocol: void setProtocolName(java.lang.String)> 
<android.net.wifi.WifiNative: boolean setConfigMethods(java.lang.String)> 
<org.apache.xml.serializer.ToStream: int processLineFeed(char[],int,int,java.io.Writer)> 
<org.jivesoftware.smack.provider.RawXmlExtensionProvider: org.jivesoftware.smack.packet.PacketExtension parseExtension(com.google.common.io.protocol.ProtoBuf)> 
<org.apache.xpath.NodeSetDTM: void setElementAt(int,int)> 
<org.apache.james.mime4j.field.Field: org.apache.james.mime4j.field.Field parse(java.lang.String)> 
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> 
<org.apache.xml.utils.UnImplNode: void setIdAttribute(java.lang.String,boolean)> 
<android.graphics.drawable.ShapeDrawable: void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory)> 
<android.widget.TextView: void setSelected(boolean)> 
<android.content.SyncStorageEngine: void setOnSyncRequestListener(android.content.SyncStorageEngine$OnSyncRequestListener)> 
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> 
<android.widget.CalendarView: void setMaxDate(long)> 
<android.test.ActivityInstrumentationTestCase2: void setActivityInitialTouchMode(boolean)> 
<android.filterfw.core.ShaderProgram: void setSourceRect(float,float,float,float)> 
<android.widget.ZoomButtonsController: void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener)> 
<org.apache.http.impl.AbstractHttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)> 
<org.apache.xalan.templates.ElemTemplateElement: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<org.jivesoftware.smack.packet.Message: void setIsIncoming(boolean)> 
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)> 
<javax.crypto.Cipher: byte[] update(byte[],int,int)> 
<android.test.ClassPathPackageInfoSource: void setApkPaths(java.lang.String[])> 
<org.apache.xalan.templates.ElemLiteralResult: void setNamespace(java.lang.String)> 
<libcore.io.Posix: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)> 
<android.app.ActivityThread: void queueOrSendMessage(int,java.lang.Object,int,int)> 
<android.view.View: void sendAccessibilityEventInternal(int)> 
<org.apache.xpath.patterns.NodeTest: void setNamespace(java.lang.String)> 
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,int)> 
<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])> 
<gov.nist.javax.sip.header.Via: void setPort(int)> 
<gov.nist.javax.sip.header.HeaderFactoryImpl: gov.nist.javax.sip.header.extensions.ReplacesHeader createReplacesHeader(java.lang.String,java.lang.String,java.lang.String)> 
<android.text.style.QuoteSpan: void writeToParcel(android.os.Parcel,int)> 
<junit.textui.TestRunner: junit.framework.TestResult start(java.lang.String[])> 
<org.xml.sax.helpers.ParserAdapter: void setDocumentLocator(org.xml.sax.Locator)> 
<org.apache.harmony.xml.dom.AttrImpl: void setValue(java.lang.String)> 
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> 
<org.ccil.cowan.tagsoup.PYXWriter: void aval(char[],int,int)> 
<java.lang.System: void setProperties(java.util.Properties)> 
<java.net.DatagramSocket: void setSoTimeout(int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setOOBInline(boolean)> 
<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.graphics.drawable.Drawable: void setDither(boolean)> 
<android.app.DatePickerDialog: void updateDate(int,int,int)> 
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> 
<android.net.wifi.WifiNative: void setPowerSave(boolean)> 
<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)> 
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> 
<org.apache.xml.serializer.ToStream: void characters(char[],int,int)> 
<gov.nist.javax.sip.header.AlertInfo: void setAlertInfo(java.lang.String)> 
<android.widget.RemoteViewsAdapter: void setVisibleRangeHint(int,int)> 
<android.widget.ProgressBar: void setProgress(int,boolean)> 
<android.view.GLES20RenderLayer: void setOpaque(boolean)> 
<java.nio.charset.CharsetEncoderICU: void implReplaceWith(byte[])> 
<android.support.v4.view.MenuItemCompatHoneycomb: void setShowAsAction(android.view.MenuItem,int)> 
<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)> 
<java.net.DatagramPacket: void setPort(int)> 
<org.apache.xalan.processor.XSLTElementProcessor: org.xml.sax.Attributes setPropertiesFromAttributes(org.apache.xalan.processor.StylesheetHandler,java.lang.String,org.xml.sax.Attributes,org.apache.xalan.templates.ElemTemplateElement,boolean)> 
<org.apache.xpath.jaxp.XPathImpl: void setNamespaceContext(javax.xml.namespace.NamespaceContext)> 
<gov.nist.javax.sip.SipStackImpl: void setIsBackToBackUserAgent(boolean)> 
<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)> 
<javax.obex.ClientSession: void setConnectionID(long)> 
<android.widget.NumberPicker: void setOnScrollListener(android.widget.NumberPicker$OnScrollListener)> 
<android.widget.OverScroller: void setFriction(float)> 
<android.media.AudioService: void sendVolumeUpdate(int,int,int,int)> 
<org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(java.net.URI,java.lang.String)> 
<android.filterpacks.imageproc.FisheyeFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> 
<android.test.AndroidTestRunner: void setTestClassName(java.lang.String,java.lang.String)> 
<android.preference.TwoStatePreference: void setSummaryOff(java.lang.CharSequence)> 
<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int)> 
<android.content.ContextWrapper: void setTheme(int)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setTLSEnabled(boolean)> 
<android.os.Messenger: void send(android.os.Message)> 
<android.webkit.WebSettingsClassic: void setAllowFileAccess(boolean)> 
<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)> 
<android.webkit.WebViewClassic: void setUseMockGeolocation()> 
<android.webkit.WebSettingsClassic: void setLoadsImagesAutomatically(boolean)> 
<android.database.sqlite.SQLiteConnection: void collectDbStats(java.util.ArrayList)> 
<android.widget.AlphabetIndexer: void setCursor(android.database.Cursor)> 
<gov.nist.javax.sip.header.SIPDate: void setYear(int)> 
<libcore.net.http.HttpEngine: void setResponse(libcore.net.http.ResponseHeaders,java.io.InputStream)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setIdAttribute(boolean)> 
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setIndent(boolean)> 
<android.ddm.DdmHandleAppName: void setAppName(java.lang.String,int)> 
<android.util.IntProperty: void set(java.lang.Object,java.lang.Integer)> 
<android.database.sqlite.SQLiteConnectionPool: void dump(android.util.Printer,boolean)> 
<android.os.BatteryStats: void dumpLine(java.io.PrintWriter,int,java.lang.String,java.lang.String,java.lang.Object[])> 
<android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> 
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)> 
<android.accounts.AuthenticatorDescription: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.core.InternalErrorHandler: void handleException(java.lang.String)> 
<android.graphics.ColorMatrix: void setScale(float,float,float,float)> 
<android.webkit.WebViewCore: void webkitDraw(android.webkit.WebViewCore$DrawData)> 
<android.preference.Preference: void setShouldDisableView(boolean)> 
<java.security.cert.X509CRLSelector: void setMinCRLNumber(java.math.BigInteger)> 
<java.net.DatagramSocket: void setSendBufferSize(int)> 
<gov.nist.javax.sip.parser.StringMsgParser: void setStrict(boolean)> 
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<android.widget.PopupWindow: void setAnimationStyle(int)> 
<javax.net.ssl.HttpsURLConnection: void setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)> 
<libcore.io.ForwardingOs: void setuid(int)> 
<android.gesture.GestureLibrary: void setSequenceType(int)> 
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)> 
<android.content.pm.PackageParser: boolean parseAllMetaData(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String,android.content.pm.PackageParser$Component,java.lang.String[])> 
<android.webkit.WebSettingsClassic: void setDefaultFixedFontSize(int)> 
<android.os.UserManager: boolean isUserRunningOrStopping(android.os.UserHandle)> 
<android.view.View: void setNextFocusUpId(int)> 
<android.media.MediaSyncEvent: android.media.MediaSyncEvent setAudioSessionId(int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setParent(android.view.View,int)> 
<org.jivesoftware.smack.packet.Message: void setIsRead(boolean)> 
<android.text.method.QwertyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> 
<org.apache.harmony.security.x509.CertificateIssuer: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<net.oauth.http.HttpMessageDecoder: void dump(java.util.Map)> 
<android.accounts.AccountManagerService: void setPasswordInternal(android.accounts.AccountManagerService$UserAccounts,android.accounts.Account,java.lang.String)> 
<gov.nist.javax.sip.address.NetObject: java.lang.String debugDump(int)> 
<android.filterfw.core.FrameManager: void setContext(android.filterfw.core.FilterContext)> 
<gov.nist.core.Host: void setHost(java.lang.String,int)> 
<java.sql.Timestamp: void setNanos(int)> 
<org.kxml2.io.KXmlParser: void setFeature(java.lang.String,boolean)> 
<android.filterfw.core.ShaderProgram: void setBlendEnabled(boolean)> 
<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)> 
<java.net.HttpURLConnection: void setFollowRedirects(boolean)> 
<org.apache.commons.io.output.NullWriter: void write(char[])> 
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)> 
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)> 
<android.filterfw.core.SimpleFrame: void setInts(int[])> 
<android.location.Location: void setAltitude(double)> 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: void setEnabledProtocols(java.lang.String[])> 
<gov.nist.javax.sip.stack.SIPDialog: void setStack(gov.nist.javax.sip.stack.SIPTransactionStack)> 
<android.app.FragmentState: void writeToParcel(android.os.Parcel,int)> 
<android.net.wifi.WifiNative: boolean setCountryCode(java.lang.String)> 
<java.security.cert.X509CertSelector: void setBasicConstraints(int)> 
<android.net.MobileDataStateTracker: void setUserDataEnable(boolean)> 
<org.jivesoftware.smack.packet.BindAccountResponse: void setJid(java.lang.String)> 
<org.apache.xalan.templates.ElemNumber: void setFormat(org.apache.xalan.templates.AVT)> 
<org.ccil.cowan.tagsoup.Parser: void pitarget(char[],int,int)> 
<java.math.BigDecimal: java.math.BigDecimal setScale(int)> 
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)> 
<gov.nist.javax.sip.stack.SIPStackTimerTask: void run()> 
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> 
<android.app.Activity: void setResult(int)> 
<android.widget.CalendarView: void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener)> 
<org.apache.http.impl.cookie.BestMatchSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)> 
<java.text.FieldPosition: void setBeginIndex(int)> 
<android.widget.CalendarView: void setDate(long)> 
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> 
<android.media.AudioService: void doSetMasterVolume(float,int)> 
<android.location.Address: void setCountryCode(java.lang.String)> 
<gov.nist.javax.sip.header.extensions.SessionExpires: void setValue(java.lang.String)> 
<android.hardware.SerialPort: void write(java.nio.ByteBuffer,int)> 
<org.apache.xml.serializer.ToTextStream: void ignorableWhitespace(char[],int,int)> 
<org.jivesoftware.smack.XMPPConnection: void setRmq2Manager(com.google.android.gsf.gtalkservice.rmq.Rmq2Manager)> 
<android.net.wifi.WifiNative: void setScanInterval(int)> 
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)> 
<org.apache.xml.utils.UnImplNode: org.w3c.dom.Text replaceWholeText(java.lang.String)> 
<android.app.ActivityManagerProxy: boolean willActivityBeVisible(android.os.IBinder)> 
<android.webkit.WebSettingsClassic: void setDefaultTextEncodingName(java.lang.String)> 
<android.widget.PopupWindow: void setLayoutInScreenEnabled(boolean)> 
<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)> 
<org.apache.harmony.xnet.provider.jsse.PinFailureLogger: void log(java.lang.String,boolean,boolean,java.util.List)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTcpNoDelay(boolean)> 
<gov.nist.javax.sip.stack.SIPDialog: void setDialogId(java.lang.String)> 
<java.text.MessageFormat: void setLocale(java.util.Locale)> 
<org.apache.commons.io.output.ByteArrayOutputStream: int write(java.io.InputStream)> 
<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] decrypt(byte,byte[],int,int)> 
<org.apache.xml.serializer.ToStream: void outputEntityDecl(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)> 
<android.widget.SimpleCursorTreeAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> 
<java.io.FilterOutputStream: void write(byte[],int,int)> 
<android.text.style.RelativeSizeSpan: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.WebSettingsClassic: void setMinimumLogicalFontSize(int)> 
<android.telephony.CellIdentityGsm: void writeToParcel(android.os.Parcel,int)> 
<android.app.SearchManager: void setOnCancelListener(android.app.SearchManager$OnCancelListener)> 
<android.widget.Spinner: void setPrompt(java.lang.CharSequence)> 
<android.content.ContentProviderProxy: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> 
<junit.textui.ResultPrinter: void startTest(junit.framework.Test)> 
<android.graphics.drawable.InsetDrawable: void setAlpha(int)> 
<gov.nist.javax.sip.message.SIPMessage: void setFrom(javax.sip.header.FromHeader)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setContentDescription(java.lang.CharSequence)> 
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)> 
<android.app.Instrumentation: boolean invokeContextMenuAction(android.app.Activity,int,int)> 
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)> 
<android.support.v13.app.FragmentTabHost: void setup(android.content.Context,android.app.FragmentManager,int)> 
<java.sql.DriverManager: void setLogWriter(java.io.PrintWriter)> 
<android.app.ActivityManagerProxy: void setServiceForeground(android.content.ComponentName,android.os.IBinder,int,android.app.Notification,boolean)> 
<android.database.sqlite.SQLiteSession: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<android.widget.PopupWindow: void setWindowLayoutType(int)> 
<android.filterpacks.imageproc.VignetteFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.apache.xml.serializer.ToSAXHandler: void setCdataSectionElements(java.util.Vector)> 
<org.xml.sax.ext.Attributes2Impl: void setAttributes(org.xml.sax.Attributes)> 
<org.apache.http.params.HttpProtocolParams: void setUnmappableInputAction(org.apache.http.params.HttpParams,java.nio.charset.CodingErrorAction)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setClickable(boolean)> 
<org.apache.xalan.transformer.TransformerImpl: java.util.Vector processSortKeys(org.apache.xalan.templates.ElemForEach,int)> 
<android.net.wifi.p2p.WifiP2pManager: void setWFDInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pWfdInfo,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<java.net.HttpCookie: void setVersion(int)> 
<android.webkit.CallbackProxy: void setDownloadListener(android.webkit.DownloadListener)> 
<gov.nist.javax.sip.header.Via: void setProtocolVersion(java.lang.String)> 
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setNon2XXAckPassedToListener(boolean)> 
<android.app.ActivityManagerProxy: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)> 
<org.jivesoftware.smack.util.ObservableWriter: void write(char[])> 
<org.apache.xpath.objects.XStringForFSB: void dispatchAsComment(org.xml.sax.ext.LexicalHandler)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setKeepAlive(boolean)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)> 
<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,int,android.graphics.Paint)> 
<android.widget.SearchView: void setSubmitButtonEnabled(boolean)> 
<android.app.FragmentBreadCrumbs: void setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View$OnClickListener)> 
<java.lang.StringBuffer: void setCharAt(int,char)> 
<java.net.HttpCookie: void setCommentURL(java.lang.String)> 
<android.filterfw.core.SerializedFrame: void setBitmap(android.graphics.Bitmap)> 
<android.preference.DialogPreference: void setPositiveButtonText(java.lang.CharSequence)> 
<android.view.GLES20DisplayList: void setPivotY(float)> 
<android.view.GLES20DisplayList: void setPivotX(float)> 
<android.media.AudioRecord: int setPositionNotificationPeriod(int)> 
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> 
<android.util.DayOfMonthCursor: void setSelectedRowColumn(int,int)> 
<org.apache.http.client.methods.HttpRequestBase: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)> 
<android.util.LocalLog: void log(java.lang.String)> 
<android.graphics.Canvas: void setViewport(int,int)> 
<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)> 
<org.jivesoftware.smack.PacketWriter: void write(java.lang.String)> 
<javax.xml.transform.stream.StreamSource: void setPublicId(java.lang.String)> 
<android.preference.TwoStatePreference: void setDisableDependentsState(boolean)> 
<gov.nist.javax.sip.header.ContentType: void setMediaRange(gov.nist.javax.sip.header.MediaRange)> 
<android.webkit.WebViewClassic: void externalRepresentation(android.os.Message)> 
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter)> 
<android.widget.Switch: void setChecked(boolean)> 
<android.view.GLES20Canvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)> 
<android.widget.Chronometer: void updateRunning()> 
<android.widget.AbsListView: void setVisibleRangeHint(int,int)> 
<android.support.v4.view.PagerTabStrip: void setBackgroundDrawable(android.graphics.drawable.Drawable)> 
<org.apache.http.impl.io.HttpTransportMetricsImpl: void setBytesTransferred(long)> 
<android.app.ListFragment: void setListShown(boolean)> 
<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)> 
<android.webkit.ZoomManager: boolean setupZoomOverviewWidth(android.webkit.WebViewCore$DrawData,int)> 
<org.apache.http.client.params.ClientParamBean: void setCookiePolicy(java.lang.String)> 
<android.net.LocalSocket: void setSendBufferSize(int)> 
<org.apache.http.impl.io.HttpRequestWriter: void writeHeadLine(org.apache.http.HttpMessage)> 
<android.net.MobileDataStateTracker: void setDependencyMet(boolean)> 
<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)> 
<android.widget.AdapterViewFlipper: void setFlipInterval(int)> 
<android.database.sqlite.SQLiteQueryBuilder: void setStrict(boolean)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)> 
<android.graphics.drawable.GradientDrawable: void setGradientRadius(float)> 
<android.widget.AbsListView: void setVerticalScrollbarPosition(int)> 
<android.text.MeasuredText: void setPos(int)> 
<android.app.ActivityManagerProxy: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)> 
<gov.nist.javax.sip.message.SIPDuplicateHeaderException: void setSIPHeader(gov.nist.javax.sip.header.SIPHeader)> 
<gov.nist.core.DuplicateNameValueList: void set(gov.nist.core.NameValue)> 
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> 
<java.text.DecimalFormat: void setMaximumFractionDigits(int)> 
<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] decrypt(byte,byte[],int,int)> 
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> 
<org.apache.xml.utils.ObjectStack: void setTop(java.lang.Object)> 
<org.apache.xpath.patterns.StepPattern: void setAxis(int)> 
<android.view.View: void setContentDescription(java.lang.CharSequence)> 
<org.apache.http.impl.conn.AbstractPoolEntry: void setState(java.lang.Object)> 
<android.support.v4.view.PagerTabStrip: void setDrawFullUnderline(boolean)> 
<android.webkit.WebViewClassic: void setPictureListener(android.webkit.WebView$PictureListener)> 
<android.support.v4.app.Fragment: void setRetainInstance(boolean)> 
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Activity parseActivityAlias(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])> 
<java.text.MessageFormat: void setFormat(int,java.text.Format)> 
<android.location.LocationRequest: android.location.LocationRequest setExpireAt(long)> 
<android.webkit.WebSettingsClassic: void setLightTouchEnabled(boolean)> 
<android.preference.DialogPreference: void setDialogIcon(android.graphics.drawable.Drawable)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setResponse(java.lang.String)> 
<android.media.MediaExtractor: void setDataSource(java.lang.String,java.util.Map)> 
<android.widget.ListPopupWindow: void setListItemExpandMax(int)> 
<org.apache.xml.serializer.ToStream: void setOutputStream(java.io.OutputStream)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setResult(javax.xml.transform.Result)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setDecimalSeparator(char)> 
<net.oauth.signature.HMAC_SHA1: void setConsumerSecret(java.lang.String)> 
<org.jivesoftware.smack.packet.DataMessage: void log(java.lang.String)> 
<java.util.concurrent.atomic.AtomicIntegerArray: void set(int,int)> 
<android.content.Intent: android.content.Intent setType(java.lang.String)> 
<android.speech.tts.TtsEngines: java.lang.String getLocalePrefForEngine(java.lang.String)> 
<android.support.v4.view.AccessibilityDelegateCompat: void sendAccessibilityEvent(android.view.View,int)> 
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)> 
<android.net.wifi.WifiStateMachine: void sendNetworkStateChangeBroadcast(java.lang.String)> 
<org.apache.xml.serializer.utils.URI: void setScheme(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setRenderPriority(android.webkit.WebSettings$RenderPriority)> 
<gov.nist.javax.sip.stack.SIPClientTransaction: void setNextHop(javax.sip.address.Hop)> 
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)> 
<org.apache.xalan.templates.ElemUnknown: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(byte[],java.net.InetAddress,int,boolean)> 
<org.apache.xalan.transformer.TransformerImpl: void setErrorListener(javax.xml.transform.ErrorListener)> 
<org.jivesoftware.smack.packet.XMPPError: void setMessage(java.lang.String)> 
<gov.nist.javax.sip.header.ErrorInfo: void setErrorInfo(javax.sip.address.URI)> 
<android.widget.TextView: void setExtracting(android.view.inputmethod.ExtractedTextRequest)> 
<android.webkit.JWebCoreJavaBridge: void setCookies(java.lang.String,java.lang.String)> 
<android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],android.database.CursorWindow,int,int,boolean,android.os.CancellationSignal)> 
<android.webkit.PluginFullScreenHolder: void setContentView(android.view.View)> 
<android.net.LinkSocket: void log(java.lang.String)> 
<android.media.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)> 
<android.net.wifi.WifiStateMachine: void updateBatteryWorkSource(android.os.WorkSource)> 
<org.apache.http.client.protocol.ClientContextConfigurer: void setAuthSchemePref(java.util.List)> 
<android.database.sqlite.SQLiteDatabase: void dumpAll(android.util.Printer,boolean)> 
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)> 
<android.gesture.GestureStore: void setSequenceType(int)> 
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)> 
<android.widget.TabWidget: void setDividerDrawable(android.graphics.drawable.Drawable)> 
<org.apache.james.mime4j.message.TempFileBinaryBody: void setParent(org.apache.james.mime4j.message.Entity)> 
<org.ccil.cowan.tagsoup.PYXWriter: void pitarget(char[],int,int)> 
<android.renderscript.ScriptIntrinsicLUT: void setRed(int,int)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setIdAttribute(java.lang.String,boolean)> 
<android.graphics.drawable.PictureDrawable: void setFilterBitmap(boolean)> 
<org.apache.http.impl.io.IdentityOutputStream: void write(int)> 
<android.view.View: void setScrollBarSize(int)> 
<android.widget.Switch: void setSwitchPadding(int)> 
<org.jivesoftware.smack.XMPPException: void printStackTrace(java.io.PrintWriter)> 
<org.jivesoftware.smack.packet.PresenceCapability: void setExtension(java.lang.String)> 
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> 
<org.apache.xml.serializer.ToUnknownStream: void setWriter(java.io.Writer)> 
<java.text.NumberFormat: void setCurrency(java.util.Currency)> 
<android.view.GLES20TextureLayer: void update(int,int,boolean)> 
<android.test.ServiceTestCase: void setApplication(android.app.Application)> 
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])> 
<org.apache.xpath.XPathContext: void setAxesIteratorStackStacks(java.util.Stack)> 
<android.view.MotionEvent: void setDownTime(long)> 
<gov.nist.core.DuplicateNameValueList: void set(java.lang.String,java.lang.Object)> 
<android.webkit.WebSettingsClassic: void setUserAgent(int)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> 
<org.jivesoftware.smackx.packet.VCard: void setField(java.lang.String,java.lang.String)> 
<org.apache.http.client.protocol.ClientContextConfigurer: void setCookieStore(org.apache.http.client.CookieStore)> 
<gov.nist.javax.sip.header.Require: void setOptionTag(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setAddressResolver(gov.nist.core.net.AddressResolver)> 
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)> 
<org.ccil.cowan.tagsoup.PYXWriter: void processingInstruction(java.lang.String,java.lang.String)> 
<java.lang.AbstractStringBuilder: void setLength(int)> 
<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)> 
<android.bluetooth.BluetoothInputDevice: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setClassName(java.lang.CharSequence)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setEnabled(java.lang.Object,boolean)> 
<android.renderscript.ScriptIntrinsicBlur: void setRadius(float)> 
<org.apache.xalan.templates.OutputProperties: void setQNameProperty(org.apache.xml.utils.QName,org.apache.xml.utils.QName)> 
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)> 
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSendBufferSize(int)> 
<gov.nist.javax.sip.message.ContentImpl: void setContentTypeHeader(javax.sip.header.ContentTypeHeader)> 
<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)> 
<org.apache.xpath.compiler.Compiler: void setNamespaceContext(org.apache.xml.utils.PrefixResolver)> 
<org.apache.http.impl.cookie.BrowserCompatSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)> 
<android.widget.Spinner: void setDropDownWidth(int)> 
<android.content.DefaultDataHandler: void setDocumentLocator(org.xml.sax.Locator)> 
<org.apache.xalan.transformer.TransformerImpl: void setShouldReset(boolean)> 
<android.view.View: void setHovered(boolean)> 
<java.util.logging.Handler: void setFilter(java.util.logging.Filter)> 
<android.app.ActivityManagerProxy: boolean isIntentSenderAnActivity(android.content.IIntentSender)> 
<android.view.View: void setNextFocusDownId(int)> 
<java.util.zip.CRC32: void update(byte[],int,int)> 
<android.telephony.CellSignalStrengthGsm: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.ElemTemplate: void setLocaterInfo(javax.xml.transform.SourceLocator)> 
<android.graphics.drawable.RotateDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)> 
<android.webkit.AccessibilityInjector: void updateJavaScriptEnabled(boolean)> 
<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> 
<org.jivesoftware.smack.packet.Message: void setSubject(java.lang.String)> 
<android.webkit.BrowserFrame: void documentAsText(android.os.Message)> 
<android.animation.ValueAnimator: void setStartDelay(long)> 
<android.telephony.CellBroadcastMessage: void setIsRead(boolean)> 
<android.test.mock.MockPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)> 
<org.apache.harmony.xnet.provider.jsse.SSLParametersImpl: void setUseClientMode(boolean)> 
<org.apache.xpath.objects.XObject: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.filterfw.core.Frame: void setTimestamp(long)> 
<android.net.DnsPinger: int pingDnsAsync(java.net.InetAddress,int,int)> 
<org.apache.xpath.NodeSetDTM: void setRoot(int,java.lang.Object)> 
<android.filterfw.io.TextGraphReader: android.filterfw.core.FilterGraph readGraphString(java.lang.String)> 
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)> 
<android.webkit.CallbackProxy: boolean onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)> 
<libcore.icu.NativeDecimalFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: void setProtocol(java.lang.String)> 
<org.apache.xalan.Version: void main(java.lang.String[])> 
<android.app.NativeActivity: void setWindowFormat(int)> 
<android.media.videoeditor.MediaImageItem: void setDuration(long)> 
<android.inputmethodservice.IInputMethodSessionWrapper: void updateCursor(android.graphics.Rect)> 
<android.app.admin.DevicePolicyManager: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.net.Proxy,java.util.List)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setHandshakeTimeout(int)> 
<org.apache.xalan.templates.AVT: void setRawName(java.lang.String)> 
<android.app.Dialog: void setContentView(android.view.View)> 
<android.widget.TableLayout: void setColumnCollapsed(int,boolean)> 
<android.widget.SimpleAdapter: void setViewImage(android.widget.ImageView,int)> 
<android.app.ActivityManagerProxy: boolean removeTask(int,int)> 
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)> 
<gov.nist.javax.sip.header.SIPDate: void setHour(int)> 
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)> 
<android.widget.TextView: void setInputType(int)> 
<android.widget.SlidingDrawer: void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener)> 
<org.ccil.cowan.tagsoup.XMLWriter: void characters(char[],int,int)> 
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler)> 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: void installCertificate(java.security.cert.X509Certificate)> 
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)> 
<gov.nist.javax.sip.header.AcceptLanguage: void setAcceptLanguage(java.util.Locale)> 
<gov.nist.javax.sip.header.Protocol: void setTransport(java.lang.String)> 
<jp.co.omronsoft.openwnn.OpenWnnJAJP: void setDictionary(int)> 
<android.location.Criteria: void setAccuracy(int)> 
<java.io.Console: int setEcho(boolean,int)> 
<java.util.logging.LogRecord: void setLoggerName(java.lang.String)> 
<android.nfc.TechListParcel: void writeToParcel(android.os.Parcel,int)> 
<java.text.SimpleDateFormat: void setDateFormatSymbols(java.text.DateFormatSymbols)> 
<android.os.storage.StorageVolume: void setStorageId(int)> 
<android.media.AudioTrack: int setPositionNotificationPeriod(int)> 
<android.net.MobileDataStateTracker: void setTeardownRequested(boolean)> 
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> 
<gov.nist.javax.sip.stack.SIPDialog: void setServerTransactionFlag(boolean)> 
<android.webkit.WebSettings: void setTextZoom(int)> 
<org.apache.xalan.templates.ElemTemplateElement: void executeNSDecls(org.apache.xalan.transformer.TransformerImpl)> 
<android.webkit.WebSettingsClassic: void setSaveFormData(boolean)> 
<android.widget.TextView: void setCursorVisible(boolean)> 
<android.preference.PreferenceGroup: void setEnabled(boolean)> 
<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypeSystem(java.lang.String)> 
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> 
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smack.packet.Packet: void setProperty(java.lang.String,float)> 
<java.util.zip.ZipOutputStream: void setComment(java.lang.String)> 
<android.widget.AdapterViewFlipper: void updateRunning(boolean)> 
<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setPercent(char)> 
<android.webkit.CallbackProxy: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> 
<org.apache.xml.serializer.utils.URI: void setFragment(java.lang.String)> 
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)> 
<android.webkit.WebSettingsClassic: void setAutoFillEnabled(boolean)> 
<android.widget.ActivityChooserModel: void setOnChooseActivityListener(android.widget.ActivityChooserModel$OnChooseActivityListener)> 
<android.os.RemoteCallback: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.transformer.TransformerImpl: void setOutputFormat(org.apache.xalan.templates.OutputProperties)> 
<org.apache.xpath.functions.FuncLang: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.http.entity.BasicHttpEntity: void setContent(java.io.InputStream)> 
<android.inputmethodservice.InputMethodService: void sendDownUpKeyEvents(int)> 
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledProtocols(int,java.lang.String[])> 
<org.apache.http.conn.params.ConnManagerParamBean: void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean)> 
<gov.nist.javax.sip.address.SipUri: void setScheme(java.lang.String)> 
<android.widget.RemoteViews: void setImageViewResource(int,int)> 
<org.apache.xpath.NodeSet: void setElementAt(org.w3c.dom.Node,int)> 
<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)> 
<org.apache.http.impl.client.AbstractHttpClient: void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler)> 
<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setTransitionStyle(int)> 
<org.apache.xml.utils.UnImplNode: void setXmlEncoding(java.lang.String)> 
<org.javia.arity.Symbol: org.javia.arity.Symbol setKey(java.lang.String,int)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setPatternSeparator(char)> 
<org.apache.xpath.compiler.XPathParser: void warn(java.lang.String,java.lang.Object[])> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setVisibleToUser(boolean)> 
<android.graphics.drawable.LayerDrawable: void setOpacity(int)> 
<android.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)> 
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> 
<android.widget.LinearLayout: void setShowDividers(int)> 
<android.widget.QuickContactBadge: void setExcludeMimes(java.lang.String[])> 
<org.apache.xpath.patterns.ContextMatchStepPattern: org.apache.xpath.objects.XObject executeRelativePathPattern(org.apache.xpath.XPathContext,org.apache.xpath.patterns.StepPattern)> 
<gov.nist.javax.sip.header.SIPHeader: void setHeaderName(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setMaximumDecodedImageSize(long)> 
<android.app.ActivityManagerProxy: boolean clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnableSessionCreation(boolean)> 
<android.app.LauncherActivity: void setTitle(java.lang.CharSequence)> 
<android.filterfw.core.AsyncRunner: void setException(java.lang.Exception)> 
<org.jivesoftware.smack.packet.DataMessage: void setUserSerialNumber(long)> 
<android.location.GeocoderParams: void writeToParcel(android.os.Parcel,int)> 
<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)> 
<org.apache.xml.utils.UnImplNode: void setPrefix(java.lang.String)> 
<android.text.style.ScaleXSpan: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xpath.XPathException: void printStackTrace(java.io.PrintStream)> 
<java.util.Random: void setSeed(long)> 
<android.view.WindowManagerGlobal: void dumpGfxInfo(java.io.FileDescriptor)> 
<org.apache.james.mime4j.MimeStreamParser: void setContentHandler(org.apache.james.mime4j.ContentHandler)> 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)> 
<android.app.ActivityManagerProxy: int getUidForIntentSender(android.content.IIntentSender)> 
<org.jivesoftware.smack.packet.Registration: void setAttributes(java.util.Map)> 
<android.filterfw.core.FieldPort: void setFieldFrame(android.filterfw.core.Frame,boolean)> 
<android.test.mock.MockContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> 
<android.app.ContextImpl: void setWallpaper(java.io.InputStream)> 
<gov.nist.javax.sip.header.AddressParametersHeader: void setAddress(javax.sip.address.Address)> 
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)> 
<org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)> 
<android.net.ConnectivityManager: void setNetworkPreference(int)> 
<org.ccil.cowan.tagsoup.XMLWriter: void emptyElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<android.os.Handler: boolean sendMessage(android.os.Message)> 
<android.os.Parcel: void writeMap(java.util.Map)> 
<android.test.InstrumentationTestCase: void runTestOnUiThread(java.lang.Runnable)> 
<android.filterfw.core.ShaderProgram: void setClearsOutput(boolean)> 
<android.os.Parcel: void writeCharSequenceArray(java.lang.CharSequence[])> 
<org.javia.arity.Complex: org.javia.arity.Complex set(double,double)> 
<javax.xml.parsers.SAXParser: void parse(java.io.InputStream,org.xml.sax.helpers.DefaultHandler,java.lang.String)> 
<java.util.zip.Inflater: void setInput(byte[],int,int)> 
<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)> 
<java.net.DatagramSocket: void setTrafficClass(int)> 
<android.widget.SlidingDrawer: void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener)> 
<org.jivesoftware.smack.util.Base64: byte[] decodeFromFile(java.lang.String)> 
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)> 
<javax.obex.ClientOperation: boolean sendRequest(int)> 
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> 
<android.graphics.Matrix: void setSkew(float,float)> 
<org.apache.xpath.functions.FuncLast: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)> 
<gov.nist.javax.sip.message.SIPRequest: void setInviteTransaction(java.lang.Object)> 
<org.apache.xalan.templates.Stylesheet: void setNonXslTopLevel(org.apache.xml.utils.QName,java.lang.Object)> 
<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<org.apache.harmony.security.x509.ExtendedKeyUsage: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<android.graphics.drawable.ClipDrawable: void setAlpha(int)> 
<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.xml.sax.ContentHandler)> 
<android.location.LocationRequest: android.location.LocationRequest setNumUpdates(int)> 
<org.apache.xml.serializer.ToStream: void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)> 
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType,boolean,int)> 
<android.net.http.Headers: void setConnectionType(org.apache.http.util.CharArrayBuffer,int)> 
<android.telephony.CellInfoGsm: void setCellSignalStrength(android.telephony.CellSignalStrengthGsm)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void sendUrgentData(int)> 
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<android.net.http.Headers: void setContentType(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)> 
<dalvik.system.VMDebug: int setAllocationLimit(int)> 
<android.webkit.WebViewClassic: void setBaseLayer(int,boolean,boolean)> 
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)> 
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.jivesoftware.smackx.ServiceDiscoveryManager: org.jivesoftware.smackx.packet.DiscoverInfo discoverInfo(java.lang.String,java.lang.String)> 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> 
<android.widget.PopupWindow: void setWidth(int)> 
<libcore.net.http.HttpsURLConnectionImpl: void setInstanceFollowRedirects(boolean)> 
<android.net.wifi.WifiSsid: void writeToParcel(android.os.Parcel,int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: void engineUpdate(byte[],int,int)> 
<org.apache.http.entity.InputStreamEntity: void writeTo(java.io.OutputStream)> 
<gov.nist.javax.sip.stack.ServerLog: void setTraceLevel(int)> 
<android.widget.Spinner: void setEnabled(boolean)> 
<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(org.apache.http.Header)> 
<android.filterfw.core.ShaderProgram: void setAttributeValues(java.lang.String,android.filterfw.core.VertexFrame,int,int,int,int,boolean)> 
<org.apache.xalan.templates.ElemExtensionCall: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)> 
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)> 
<android.view.View: void setScrollBarFadeDuration(int)> 
<android.widget.TextView: void setIncludeFontPadding(boolean)> 
<java.lang.System: void setErr(java.io.PrintStream)> 
<gov.nist.javax.sip.stack.MessageProcessor: void setListeningPoint(gov.nist.javax.sip.ListeningPointImpl)> 
<android.filterfw.core.ShaderProgram: void setMaximumTileSize(int)> 
<android.speech.tts.SynthesisRequest: void setLanguage(java.lang.String,java.lang.String,java.lang.String)> 
<android.support.v4.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> 
<org.apache.http.client.params.HttpClientParams: void setCookiePolicy(org.apache.http.params.HttpParams,java.lang.String)> 
<android.app.FragmentBreadCrumbs: void setOnBreadCrumbClickListener(android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener)> 
<java.net.HttpCookie: void setPath(java.lang.String)> 
<libcore.icu.NativeDecimalFormat: void setCurrency(java.util.Currency)> 
<android.view.GLES20DisplayList: void setScaleY(float)> 
<android.view.GLES20DisplayList: void setScaleX(float)> 
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void send(org.apache.harmony.xnet.provider.jsse.Message)> 
<android.webkit.AccessibilityInjectorFallback: void onSelectionStringChange(java.lang.String)> 
<android.media.JetPlayer: boolean setMuteArray(boolean[],boolean)> 
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setFocused(boolean)> 
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setBoundsInScreen(java.lang.Object,android.graphics.Rect)> 
<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)> 
<android.app.Activity: void setDefaultKeyMode(int)> 
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)> 
<android.gesture.Gesture: void writeToParcel(android.os.Parcel,int)> 
<android.animation.LayoutTransition: void setStartDelay(int,long)> 
<org.apache.http.conn.params.ConnPerRouteBean: void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int)> 
<android.net.wifi.WifiStateMachine: boolean syncPingSupplicant(com.android.internal.util.AsyncChannel)> 
<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)> 
<org.apache.xpath.patterns.StepPattern: boolean executePredicates(org.apache.xpath.XPathContext,org.apache.xml.dtm.DTM,int)> 
<android.webkit.WebViewClassic: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)> 
<android.content.CursorLoader: void setSortOrder(java.lang.String)> 
<org.apache.xpath.axes.WalkingIterator: void setRoot(int,java.lang.Object)> 
<android.app.Activity: void dumpInner(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.RelativeLayout: void setIgnoreGravity(int)> 
<android.media.AudioSystem: void setErrorCallback(android.media.AudioSystem$ErrorCallback)> 
<android.appwidget.AppWidgetManager: void updateAppWidgetOptions(int,android.os.Bundle)> 
<android.app.ActivityManagerProxy: void revokeUriPermission(android.app.IApplicationThread,android.net.Uri,int)> 
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)> 
<android.app.ActivityManagerProxy: void activityDestroyed(android.os.IBinder)> 
<android.animation.ValueAnimator: void setIntValues(int[])> 
<android.content.pm.RegisteredServicesCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int)> 
<java.net.DatagramSocket: void setReceiveBufferSize(int)> 
<android.widget.Toast: void setMargin(float,float)> 
<org.apache.xpath.axes.MatchPatternIterator: void setRoot(int,java.lang.Object)> 
<android.content.res.Configuration: void setTo(android.content.res.Configuration)> 
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)> 
<gov.nist.javax.sip.address.Authority: void setHost(gov.nist.core.Host)> 
<org.apache.xalan.templates.XUnresolvedVariable: void setVarStackPos(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setScrollable(java.lang.Object,boolean)> 
<android.preference.Preference: void setSummary(java.lang.CharSequence)> 
<android.view.Window: void setDimAmount(float)> 
<android.support.v4.view.GestureDetectorCompat: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)> 
<android.os.RemoteCallback: void sendResult(android.os.Bundle)> 
<gov.nist.javax.sip.stack.SIPDialog: void setRemoteTag(java.lang.String)> 
<org.apache.xalan.transformer.TransformerImpl: void setOutputProperty(java.lang.String,java.lang.String)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void skippedEntity(java.lang.String)> 
<org.ccil.cowan.tagsoup.jaxp.SAXParserImpl: void setProperty(java.lang.String,java.lang.Object)> 
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)> 
<android.widget.NumberPicker: void setFormatter(android.widget.NumberPicker$Formatter)> 
<org.apache.james.mime4j.message.MemoryBinaryBody: void setParent(org.apache.james.mime4j.message.Entity)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Permission parsePermission(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])> 
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void setWfdEnabled(boolean)> 
<android.net.http.Headers: void setContentDisposition(java.lang.String)> 
<org.apache.http.util.CharArrayBuffer: void setLength(int)> 
<android.view.animation.Animation: void setFillEnabled(boolean)> 
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer$OnJetEventListener)> 
<junit.textui.ResultPrinter: void printDefectTrace(junit.framework.TestFailure)> 
<org.apache.http.protocol.SyncBasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)> 
<android.bluetooth.BluetoothHealth: void log(java.lang.String)> 
<android.media.AudioService: void setBluetoothA2dpOnInt(boolean)> 
<javax.xml.parsers.SAXParser: void parse(java.io.File,org.xml.sax.HandlerBase)> 
<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)> 
<android.widget.CalendarView: void setDate(long,boolean,boolean)> 
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)> 
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)> 
<android.location.Location: void setBearing(float)> 
<jp.co.omronsoft.openwnn.OpenWnnDictionaryImpl: int setApproxPattern(java.lang.String,java.lang.String)> 
<android.view.View: void setScrollY(int)> 
<android.view.View: void setScrollX(int)> 
<android.view.ViewRootImpl: void setLayoutParams(android.view.WindowManager$LayoutParams,boolean)> 
<android.filterfw.io.TextGraphReader: void executeCommands()> 
<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)> 
<javax.obex.ServerRequestHandler: void updateStatus(java.lang.String)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Instrumentation parseInstrumentation(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])> 
<android.webkit.WebSettingsClassic: void setAppCacheMaxSize(long)> 
<gov.nist.javax.sip.header.StatusLine: void setSipVersion(java.lang.String)> 
<org.jivesoftware.smack.XMPPConnection: void sendPacket(org.jivesoftware.smack.packet.Packet)> 
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> 
<android.view.inputmethod.InputMethodManager: void setFullscreenMode(boolean)> 
<android.telephony.ServiceState: void setCdmaEriIconMode(int)> 
<org.apache.xalan.templates.ElemExsltFuncResult: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<org.jivesoftware.smack.packet.RosterPacket: void setNotModified(java.lang.Boolean)> 
<jp.co.omronsoft.openwnn.OpenWnnJAJP: void onUpdateSelection(int,int,int,int,int,int)> 
<android.media.AudioRoutesInfo: void writeToParcel(android.os.Parcel,int)> 
<android.widget.ActivityChooserModel: void setDefaultActivity(int)> 
<javax.obex.ClientSession: void setAuthenticator(javax.obex.Authenticator)> 
<org.apache.xml.serializer.WriterToUTF8Buffered: void write(java.lang.String)> 
<android.webkit.WebViewCore: void access$3200(android.webkit.WebViewCore,int,int,int,java.lang.String,int,int,int)> 
<android.animation.Keyframe: void setFraction(float)> 
<android.app.ProgressDialog: void setProgressDrawable(android.graphics.drawable.Drawable)> 
<android.app.ActivityManagerProxy: void setRequestedOrientation(android.os.IBinder,int)> 
<android.app.FragmentBreadCrumbs: void setTitle(java.lang.CharSequence,java.lang.CharSequence)> 
<android.preference.DialogPreference: void setDialogLayoutResource(int)> 
<android.drm.DrmManagerClient: void setOnInfoListener(android.drm.DrmManagerClient$OnInfoListener)> 
<android.bluetooth.BluetoothDevice: boolean setDeviceOutOfBandData(byte[],byte[])> 
<junit.extensions.ActiveTestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)> 
<android.filterfw.core.NativeFrame: void setData(java.nio.ByteBuffer,int,int)> 
<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setParent(java.lang.Object,android.view.View)> 
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> 
<android.view.Window: void setUiOptions(int)> 
<org.xml.sax.helpers.XMLFilterImpl: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<android.widget.ActivityChooserModel: void setIntent(android.content.Intent)> 
<java.security.cert.PKIXParameters: void setPolicyQualifiersRejected(boolean)> 
<android.inputmethodservice.InputMethodService: void onUpdateExtractedText(int,android.view.inputmethod.ExtractedText)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setNeedClientAuth(boolean)> 
<android.filterfw.core.FieldPort: void setFrame(android.filterfw.core.Frame)> 
<android.filterpacks.ui.SurfaceRenderFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.webkit.WebSettings: void setUserAgent(int)> 
<android.util.JsonWriter: void setIndent(java.lang.String)> 
<android.support.v4.app.ListFragment: void setEmptyText(java.lang.CharSequence)> 
<android.location.LocationRequest: android.location.LocationRequest setExpireIn(long)> 
<android.webkit.WebView: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)> 
<android.view.animation.LayoutAnimationController: void setDelay(float)> 
<org.jivesoftware.smack.packet.Packet: void setProperty(java.lang.String,long)> 
<org.apache.xalan.transformer.TransformerImpl: void setQuietConflictWarnings(boolean)> 
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)> 
<gov.nist.javax.sip.address.AddressImpl: void setUser(java.lang.String)> 
<org.apache.http.impl.AbstractHttpServerConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> 
<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultContentEncodingCharset(java.lang.String)> 
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)> 
<android.net.wifi.WifiNative: boolean setScanMode(boolean)> 
<android.net.sip.SipProfile: void setCallingUid(int)> 
<java.util.Calendar: void setTimeInMillis(long)> 
<java.text.DecimalFormatSymbols: void setNaN(java.lang.String)> 
<java.text.CollationElementIterator: void setOffset(int)> 
<org.jivesoftware.smack.util.Base64: java.lang.String encodeBytes(byte[],int,int,int)> 
<android.filterpacks.imageproc.FlipFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.jivesoftware.smackx.packet.VCard: void setEmailHome(java.lang.String)> 
<org.apache.xml.utils.UnImplNode: void setInputEncoding(java.lang.String)> 
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)> 
<android.app.admin.DevicePolicyManager: void setActivePasswordState(int,int,int,int,int,int,int,int,int)> 
<android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)> 
<android.widget.ZoomControls: void setIsZoomInEnabled(boolean)> 
<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)> 
<android.filterfw.core.Filter: void notifyFieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.view.MotionEvent: int axisFromString(java.lang.String)> 
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)> 
<org.apache.commons.io.input.TeeInputStream: int read(byte[],int,int)> 
<android.widget.SimpleCursorAdapter: void setViewImage(android.widget.ImageView,java.lang.String)> 
<dalvik.system.profiler.PortableThreadSampler: void setDepth(int)> 
<android.widget.TextView: void handleTextChanged(java.lang.CharSequence,int,int,int)> 
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)> 
<net.oauth.http.HttpMessage: void dump(java.util.Map)> 
<android.webkit.WebViewCore: void setMockDeviceOrientation(boolean,double,boolean,double,boolean,double)> 
<gov.nist.javax.sip.stack.SIPDialog: void setLocalTag(java.lang.String)> 
<libcore.net.http.HttpsURLConnectionImpl: void setFixedLengthStreamingMode(int)> 
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)> 
<android.graphics.Region: boolean set(android.graphics.Region)> 
<android.webkit.WebSettingsClassic: void setDatabaseEnabled(boolean)> 
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Float)> 
<org.apache.http.impl.client.AbstractHttpClient: void setReuseStrategy(org.apache.http.ConnectionReuseStrategy)> 
<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)> 
<android.preference.MultiSelectListPreference: void setValues(java.util.Set)> 
<org.apache.http.impl.cookie.RFC2109VersionHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void setSystemId(java.lang.String)> 
<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)> 
<libcore.icu.CollationElementIteratorICU: void setOffset(int)> 
<android.webkit.CallbackProxy: void onProgressChanged(int)> 
<android.os.CommonTimeConfig: int setPanicThreshold(int)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setSource(android.view.View)> 
<org.apache.xml.utils.UnImplNode: void setDocumentURI(java.lang.String)> 
<org.apache.xalan.templates.ElemCopy: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<javax.xml.transform.stream.StreamResult: void setSystemId(java.io.File)> 
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)> 
<android.renderscript.ScriptIntrinsicBlur: void setInput(android.renderscript.Allocation)> 
<org.ccil.cowan.tagsoup.PYXWriter: void pi(char[],int,int)> 
<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setValue(java.lang.String)> 
<android.location.Address: void setPremises(java.lang.String)> 
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)> 
<android.view.ViewRootImpl: void enqueueDisplayList(android.view.DisplayList)> 
<junit.textui.TestRunner: junit.framework.TestResult runSingleMethod(java.lang.String,java.lang.String,boolean)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setOutputProperties(java.util.Properties)> 
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> 
<android.support.v4.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)> 
<gov.nist.javax.sip.header.SIPHeaderList: void setPrettyEncode(boolean)> 
<org.apache.http.impl.HttpConnectionMetricsImpl: void setMetric(java.lang.String,java.lang.Object)> 
<java.util.zip.InflaterOutputStream: void write(byte[],int,int)> 
<android.telephony.PhoneNumberUtils: java.lang.String replaceUnicodeDigits(java.lang.String)> 
<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)> 
<java.util.concurrent.RecursiveTask: void setRawResult(java.lang.Object)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void setMaxTotalConnections(int)> 
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> 
<org.xml.sax.helpers.ParserAdapter: void setContentHandler(org.xml.sax.ContentHandler)> 
<org.apache.xml.utils.IntVector: void setSize(int)> 
<org.apache.xml.dtm.DTMManager: void setXMLStringFactory(org.apache.xml.utils.XMLStringFactory)> 
<org.apache.xml.utils.FastStringBuffer: void sendSAXComment(org.xml.sax.ext.LexicalHandler,int,int)> 
<android.filterfw.core.InputPort: void setSourcePort(android.filterfw.core.OutputPort)> 
<gov.nist.javax.sip.stack.ServerLog: void setLogFileName(java.lang.String)> 
<org.apache.harmony.security.asn1.BitString: void setBit(int,boolean)> 
<org.apache.xpath.XPathContext: void setURIResolver(javax.xml.transform.URIResolver)> 
<android.telephony.CellInfoGsm: void setCellIdentity(android.telephony.CellIdentityGsm)> 
<android.filterpacks.imageproc.TintFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.apache.xpath.axes.FilterExprIteratorSimple: void setInnerExpression(org.apache.xpath.Expression)> 
<org.apache.xalan.templates.StylesheetRoot: void setSecureProcessing(boolean)> 
<org.apache.xml.serializer.ToStream: void charactersRaw(char[],int,int)> 
<android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()> 
<org.jivesoftware.smack.packet.Presence: void setCapabilityFlag(int)> 
<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)> 
<android.webkit.WebSettingsClassic: void setPageCacheCapacity(int)> 
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)> 
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.RadioGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> 
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)> 
<org.xml.sax.helpers.ParserAdapter: void setDTDHandler(org.xml.sax.DTDHandler)> 
<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener)> 
<libcore.icu.NativeDecimalFormat: void setMultiplier(int)> 
<org.ccil.cowan.tagsoup.PYXWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)> 
<gov.nist.core.ThreadAuditor: void setPingIntervalInMillisecs(long)> 
<android.widget.AbsListView: void setOverScrollEffectPadding(int,int)> 
<jp.co.omronsoft.openwnn.SymbolList: boolean setDictionary(java.lang.String)> 
<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader set(int,gov.nist.javax.sip.header.SIPHeader)> 
<org.apache.harmony.security.asn1.ASN1Oid: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.net.wifi.WifiNative: boolean setBand(int)> 
<org.apache.xml.serializer.ToHTMLStream: void writeAttrURI(java.io.Writer,java.lang.String,boolean)> 
<org.apache.xalan.templates.ElemNumber: void setFrom(org.apache.xpath.XPath)> 
<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)> 
<android.net.WebAddress: void setPort(int)> 
<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)> 
<android.webkit.DeviceMotionService: void startSendingUpdates()> 
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> 
<javax.xml.transform.sax.SAXSource: void setInputSource(org.xml.sax.InputSource)> 
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)> 
<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)> 
<android.widget.ToggleButton: void setTextOn(java.lang.CharSequence)> 
<org.apache.xml.serializer.ToStream: void setProp(java.lang.String,java.lang.String,boolean)> 
<org.jivesoftware.smack.packet.LoginResponse: void setServerTimestamp(long)> 
<org.apache.xalan.templates.ElemTemplateElement: void setParentElem(org.apache.xalan.templates.ElemTemplateElement)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Package parsePackage(android.content.res.Resources,android.content.res.XmlResourceParser,int,java.lang.String[])> 
<android.app.ListFragment: void setListAdapter(android.widget.ListAdapter)> 
<android.support.v4.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)> 
<java.nio.SocketChannelImpl: void setBound(boolean)> 
<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)> 
<org.apache.xml.serializer.SerializerBase: void setTransformer(javax.xml.transform.Transformer)> 
<jp.co.omronsoft.openwnn.CandidateTextView: jp.co.omronsoft.openwnn.CandidateTextView setCandidateTextView(jp.co.omronsoft.openwnn.WnnWord,int,android.view.View$OnClickListener,android.view.View$OnLongClickListener)> 
<android.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setIDAttribute(java.lang.String,int)> 
<android.app.TabActivity: void setDefaultTab(int)> 
<org.apache.harmony.xnet.provider.jsse.CertificateVerify: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<android.app.ActivityManagerProxy: void setProcessForeground(android.os.IBinder,int,boolean)> 
<android.net.wifi.p2p.WifiP2pManager: void setDialogListener(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$DialogListener)> 
<android.media.videoeditor.MediaVideoItem: void setExtractBoundaries(long,long)> 
<android.view.Window: void setUiOptions(int,int)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])> 
<org.apache.xalan.templates.AVTPart: void setXPathSupport(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(java.lang.String,boolean,boolean,int)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setEncoding(java.lang.String)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<android.app.UiModeManager: void setNightMode(int)> 
<org.apache.xml.serializer.ToStream: void comment(char[],int,int)> 
<org.apache.commons.codec.language.DoubleMetaphone: void setMaxCodeLen(int)> 
<android.view.ViewGroup: void setClipToPadding(boolean)> 
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)> 
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)> 
<org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> 
<org.jivesoftware.smackx.provider.DiscoverInfoProvider: org.jivesoftware.smack.packet.IQ parseIQ(com.google.common.io.protocol.ProtoBuf)> 
<android.util.IntProperty: void set(java.lang.Object,java.lang.Object)> 
<org.apache.harmony.xml.dom.DocumentImpl: void setStrictErrorChecking(boolean)> 
<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setHardKeyboardHidden(boolean)> 
<android.widget.Gallery: void setUnselectedAlpha(float)> 
<android.service.dreams.DreamService: void setFullscreen(boolean)> 
<android.view.Window: void setSoftInputMode(int)> 
<org.apache.xpath.functions.FuncExtFunction: void setArg(org.apache.xpath.Expression,int)> 
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)> 
<android.app.ActivityManagerProxy: int getRequestedOrientation(android.os.IBinder)> 
<gov.nist.javax.sip.header.ParametersHeader: void setParameters(gov.nist.core.NameValueList)> 
<android.widget.TextView: void setMinWidth(int)> 
<android.webkit.WebSettingsClassic: void setJavaScriptCanOpenWindowsAutomatically(boolean)> 
<org.apache.xalan.templates.ElemCallTemplate: void setParamElem(org.apache.xalan.templates.ElemWithParam)> 
<org.apache.harmony.xml.parsers.SAXParserFactoryImpl: void setNamespaceAware(boolean)> 
<android.net.LinkCapabilities: void writeToParcel(android.os.Parcel,int)> 
<android.media.AudioService: void setWiredDeviceConnectionState(int,int,java.lang.String)> 
<android.support.v4.app.Fragment: void setInitialSavedState(android.support.v4.app.Fragment$SavedState)> 
<org.apache.xml.dtm.ref.DTMNamedNodeMap: org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)> 
<android.net.SSLCertificateSocketFactory: void setUseSessionTickets(java.net.Socket,boolean)> 
<org.apache.xpath.operations.Variable: void setIsGlobal(boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void setPeer(java.lang.String,int)> 
<android.app.ActivityThread: void handleDumpProvider(android.app.ActivityThread$DumpComponentInfo)> 
<android.app.ApplicationThreadProxy: void dispatchPackageBroadcast(int,java.lang.String[])> 
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)> 
<org.apache.http.conn.params.ConnRouteParamBean: void setDefaultProxy(org.apache.http.HttpHost)> 
<java.nio.FileChannelImpl: long transferTo(long,long,java.nio.channels.WritableByteChannel)> 
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> 
<android.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> 
<android.app.ActivityManagerProxy: int startActivityAsUser(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)> 
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)> 
<android.webkit.WebViewCore: void showFullScreenPlugin(android.webkit.ViewManager$ChildView,int,int)> 
<android.app.backup.FileBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)> 
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> 
<android.widget.AbsSeekBar: void setThumbOffset(int)> 
<gov.nist.javax.sip.header.CallIdentifier: void setLocalId(java.lang.String)> 
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> 
<org.apache.xpath.functions.FuncUnparsedEntityURI: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.xalan.templates.ElemApplyImport: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.webkit.GeolocationPermissionsClassic: void getAllowed(java.lang.String,android.webkit.ValueCallback)> 
<junit.framework.TestSuite: void setName(java.lang.String)> 
<jp.co.omronsoft.openwnn.Keyboard: void loadKeyboard(android.content.Context,android.content.res.XmlResourceParser)> 
<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)> 
<android.text.style.SuggestionRangeSpan: void updateDrawState(android.text.TextPaint)> 
<org.apache.xml.serializer.ToStream: void writeNormalizedChars(char[],int,int,boolean,boolean)> 
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)> 
<android.test.TestRunner: void run(java.lang.String[])> 
<android.webkit.ClientCertRequestHandler: void setSslClientCertFromPKCS8(byte[],byte[][])> 
<android.opengl.ETC1Util: void writeTexture(android.opengl.ETC1Util$ETC1Texture,java.io.OutputStream)> 
<android.webkit.WebViewCore: void setMockGeolocationPosition(double,double,double)> 
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)> 
<android.app.ApplicationThreadProxy: void dumpProvider(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])> 
<android.content.BroadcastReceiver: void setPendingResult(android.content.BroadcastReceiver$PendingResult)> 
<android.app.ListFragment: void setSelection(int)> 
<android.graphics.drawable.DrawableContainer: boolean setVisible(boolean,boolean)> 
<java.text.Bidi: int getRunStart(int)> 
<android.app.Dialog: void setDismissMessage(android.os.Message)> 
<gov.nist.javax.sip.header.extensions.MinSE: void setExpires(int)> 
<android.webkit.FindActionModeCallback: void setWebView(android.webkit.WebViewClassic)> 
<org.apache.xml.serializer.utils.URI: void setQueryString(java.lang.String)> 
<org.ccil.cowan.tagsoup.XMLWriter: void ignorableWhitespace(char[],int,int)> 
<android.sax.Element: void setEndElementListener(android.sax.EndElementListener)> 
<org.apache.xpath.operations.VariableSafeAbsRef: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,boolean)> 
<libcore.icu.NativeBreakIterator: void setText(java.lang.String,java.text.CharacterIterator)> 
<android.hardware.display.DisplayManagerGlobal: void handleDisplayEvent(int,int)> 
<android.webkit.WebViewClassic: void setVerticalScrollbarOverlay(boolean)> 
<android.webkit.WebViewDatabaseClassic: void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)> 
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)> 
<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)> 
<android.inputmethodservice.KeyboardView: void setPopupOffset(int,int)> 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)> 
<android.net.wifi.WifiStateMachine: void sendRssiChangeBroadcast(int)> 
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.address.Authority: void setUser(java.lang.String)> 
<android.app.ActivityManagerProxy: int startActivities(android.app.IApplicationThread,android.content.Intent[],java.lang.String[],android.os.IBinder,android.os.Bundle,int)> 
<android.preference.PreferenceManager: void setNoCommit(boolean)> 
<org.apache.xalan.templates.ElemTemplateElement: void unexecuteNSDecls(org.apache.xalan.transformer.TransformerImpl)> 
<android.os.PowerManager: void setBacklightBrightness(int)> 
<android.widget.TextView: void setLineSpacing(float,float)> 
<android.view.Window: void setType(int)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigestJDK: void engineUpdate(byte[],int,int)> 
<gov.nist.core.GenericObjectList: java.lang.String debugDump(int)> 
<android.app.ActivityManagerProxy: void moveTaskToFront(int,int,android.os.Bundle)> 
<gov.nist.javax.sip.header.Via: void setSentProtocol(gov.nist.javax.sip.header.Protocol)> 
<android.widget.ListPopupWindow: void setSelection(int)> 
<android.media.videoeditor.Overlay: void setUserAttribute(java.lang.String,java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReceiveBufferSize(int)> 
<org.apache.xalan.transformer.TransformerImpl: void setBaseURLOfSource(java.lang.String)> 
<org.apache.xml.serializer.ToUnknownStream: boolean setEscaping(boolean)> 
<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)> 
<android.support.v4.app.FragmentActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.inputmethodservice.IInputMethodWrapper: void setSessionEnabled(com.android.internal.view.IInputMethodSession,boolean)> 
<org.jivesoftware.smack.packet.Packet: void setTo(java.lang.String)> 
<android.support.v4.view.MenuItemCompat: boolean setShowAsAction(android.view.MenuItem,int)> 
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> 
<org.apache.http.impl.client.RequestWrapper: void setURI(java.net.URI)> 
<android.webkit.WebViewClassic: android.webkit.WebViewClassic fromWebView(android.webkit.WebView)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setUseSourceLocation(boolean)> 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<java.net.URLConnection: void setConnectTimeout(int)> 
<android.accounts.AccountManagerService: void sendAccountsChangedBroadcast(int)> 
<org.kxml2.io.KXmlSerializer: void processingInstruction(java.lang.String)> 
<android.widget.ImageView: void setSelected(boolean)> 
<android.widget.CursorTreeAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbShortTitle(int)> 
<org.apache.http.message.HeaderGroup: void updateHeader(org.apache.http.Header)> 
<gov.nist.javax.sip.header.RetryAfter: void setDuration(int)> 
<org.jivesoftware.smackx.packet.VCard: void setJabberId(java.lang.String)> 
<org.apache.xpath.functions.FuncCeiling: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.content.ContentProviderProxy: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> 
<android.util.Base64OutputStream: void internalWrite(byte[],int,int,boolean)> 
<org.ccil.cowan.tagsoup.PYXWriter: void gi(char[],int,int)> 
<android.net.DhcpInfoInternal: void updateFromDhcpRequest(android.net.DhcpInfoInternal)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setStackLogger(gov.nist.core.StackLogger)> 
<android.widget.AutoCompleteTextView: void setForceIgnoreOutsideTouch(boolean)> 
<android.appwidget.AppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])> 
<android.media.effect.effects.BackDropperEffect: void setUpdateListener(android.media.effect.EffectUpdateListener)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void setMaxThroughput(int)> 
<android.webkit.BrowserFrame: boolean handleUrl(java.lang.String)> 
<android.graphics.Rect: void printShortString(java.io.PrintWriter)> 
<gov.nist.javax.sip.header.From: void setAddress(javax.sip.address.Address)> 
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<jp.co.omronsoft.openwnn.ComposingText: int setCursor(int,int)> 
<libcore.net.http.HttpURLConnectionImpl: void setProxy(java.net.Proxy)> 
<org.apache.xalan.templates.ElemExtensionCall: void executeFallbacks(org.apache.xalan.transformer.TransformerImpl)> 
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)> 
<android.widget.RadioGroup: void setCheckedId(int)> 
<android.app.ActivityManagerProxy: void setActivityController(android.app.IActivityController)> 
<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)> 
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)> 
<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)> 
<android.net.wifi.NetworkUpdateResult: void setIpChanged(boolean)> 
<android.mtp.MtpServer: void sendObjectRemoved(int)> 
<android.widget.ZoomButtonsController: void setFocusable(boolean)> 
<android.graphics.drawable.GradientDrawable: void setColors(int[])> 
<org.apache.xalan.transformer.TransformerImpl: void setCurrentElement(org.apache.xalan.templates.ElemTemplateElement)> 
<android.graphics.drawable.PictureDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setPackageName(java.lang.CharSequence)> 
<dalvik.system.VMDebug: int setGlobalAllocationLimit(int)> 
<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)> 
<javax.obex.ServerSession: void run()> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setFullScreen(boolean)> 
<android.content.Intent: void setClipData(android.content.ClipData)> 
<android.preference.DialogPreference: void setNegativeButtonText(java.lang.CharSequence)> 
<org.apache.xpath.functions.Function2Args: void setArg(org.apache.xpath.Expression,int)> 
<org.apache.http.cookie.params.CookieSpecParamBean: void setSingleHeader(boolean)> 
<android.inputmethodservice.Keyboard: void setHorizontalGap(int)> 
<android.os.Parcel: void writeByte(byte)> 
<org.jivesoftware.smack.PacketWriter: void setOutputStream(java.io.OutputStream)> 
<android.telephony.ServiceState: void setEmergencyOnly(boolean)> 
<android.animation.Animator: void setTarget(java.lang.Object)> 
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)> 
<android.widget.ScrollView: void setOverScrollMode(int)> 
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)> 
<android.graphics.Canvas: void setScreenDensity(int)> 
<android.gesture.GestureOverlayView: void setGestureStrokeWidth(float)> 
<gov.nist.javax.sip.header.SIPDate: void setWkday(java.lang.String)> 
<android.app.Activity: void setContentView(android.view.View)> 
<android.widget.ZoomControls: void setOnZoomInClickListener(android.view.View$OnClickListener)> 
<android.app.backup.SharedPreferencesBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)> 
<android.app.ActivityManagerProxy: int checkUriPermission(android.net.Uri,int,int,int)> 
<android.widget.ActivityChooserView: void setActivityChooserModel(android.widget.ActivityChooserModel)> 
<android.media.MediaFormat: void setFloat(java.lang.String,float)> 
<org.apache.xalan.templates.ElemTextLiteral: void setChars(char[])> 
<android.bluetooth.BluetoothInputDevice: boolean setPriority(android.bluetooth.BluetoothDevice,int)> 
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)> 
<org.jivesoftware.smackx.packet.VCard: void doLoad(org.jivesoftware.smack.XMPPConnection,java.lang.String)> 
<libcore.net.http.HttpDate: java.util.Date parse(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PServedUser: void setValue(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PAssertedIdentity: void setValue(java.lang.String)> 
<org.apache.http.params.HttpConnectionParams: void setLinger(org.apache.http.params.HttpParams,int)> 
<org.apache.xalan.templates.XUnresolvedVariableSimple: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.webkit.MockGeolocation: void setPosition(double,double,double)> 
<android.view.View: void setHorizontalScrollBarEnabled(boolean)> 
<android.app.ActivityManagerProxy: int startActivityIntentSender(android.app.IApplicationThread,android.content.IntentSender,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> 
<android.service.wallpaper.WallpaperService: void setCallbackLooper(android.os.Looper)> 
<android.telephony.cdma.CdmaSmsCbProgramData: void writeToParcel(android.os.Parcel,int)> 
<android.net.http.HttpAuthHeader: void parseParameters(java.lang.String)> 
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)> 
<org.jivesoftware.smack.Chat: void sendMessage(java.lang.String)> 
<org.xml.sax.InputSource: void setEncoding(java.lang.String)> 
<android.filterfw.core.Frame: void setData(java.nio.ByteBuffer)> 
<android.widget.CompoundButton: void setChecked(boolean)> 
<android.graphics.drawable.GradientDrawable: void setDither(boolean)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setCurrentItemIndex(int)> 
<android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)> 
<android.net.nsd.NsdServiceInfo: void setTxtRecord(android.net.nsd.DnsSdTxtRecord)> 
<org.apache.commons.io.output.LockableFileWriter: void write(int)> 
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> 
<org.jivesoftware.smack.packet.Presence: void setMode(org.jivesoftware.smack.packet.Presence$Mode)> 
<gov.nist.javax.sip.header.SIPDateHeader: void setDate(java.util.Calendar)> 
<javax.xml.parsers.SAXParser: void parse(java.lang.String,org.xml.sax.helpers.DefaultHandler)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setLogStackTraceOnMessageSend(boolean)> 
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> 
<android.accounts.GrantCredentialsPermissionActivity: void setAccountAuthenticatorResult(android.os.Bundle)> 
<android.media.videoeditor.MediaImageItem: void setGeneratedImageClip(java.lang.String)> 
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> 
<android.telephony.CellInfoCdma: void writeToParcel(android.os.Parcel,int)> 
<android.animation.PropertyValuesHolder: java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class)> 
<java.util.logging.Logger: void setLevel(java.util.logging.Level)> 
<org.apache.xalan.templates.StylesheetRoot: void setIncremental(boolean)> 
<android.widget.Gallery: void setCallbackDuringFling(boolean)> 
<android.os.AsyncTask: void setDefaultExecutor(java.util.concurrent.Executor)> 
<android.webkit.CookieManagerClassic: void setAcceptFileSchemeCookiesImpl(boolean)> 
<libcore.icu.NativeDecimalFormat: void setGroupingSize(int)> 
<org.apache.xalan.templates.ElemUse: void setUseAttributeSets(org.apache.xml.utils.QName[])> 
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)> 
<org.apache.http.client.params.ClientParamBean: void setDefaultHeaders(java.util.Collection)> 
<android.widget.TimePicker: void setEnabled(boolean)> 
<android.support.v13.app.FragmentStatePagerAdapter: void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object)> 
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)> 
<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.commons.io.output.ProxyOutputStream: void write(int)> 
<android.net.wifi.WifiStateTracker: boolean setRadio(boolean)> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumLowerCase(android.content.ComponentName,int)> 
<android.inputmethodservice.KeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> 
<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement replaceChild(org.apache.xalan.templates.ElemTemplateElement,org.apache.xalan.templates.ElemTemplateElement)> 
<java.util.MiniEnumSet: void setRange(java.lang.Enum,java.lang.Enum)> 
<android.test.TouchUtils: void clickView(android.test.InstrumentationTestCase,android.view.View)> 
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)> 
<android.webkit.BrowserFrame: void updateVisitedHistory(java.lang.String,boolean)> 
<android.widget.TabWidget: void setStripEnabled(boolean)> 
<android.telephony.CellInfoLte: void writeToParcel(android.os.Parcel,int)> 
<android.location.Criteria: void setSpeedAccuracy(int)> 
<android.os.Parcel: void writeByteArray(byte[],int,int)> 
<android.net.ProxyProperties: boolean isExcluded(java.lang.String)> 
<gov.nist.javax.sip.header.UserAgent: void setProduct(java.util.List)> 
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)> 
<gov.nist.javax.sip.stack.SIPDialog: void sendReliableProvisionalResponse(javax.sip.message.Response)> 
<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)> 
<android.app.Activity: void setTitleColor(int)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setProximityCorrectionEnabled(boolean)> 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void setVersion(byte[])> 
<junit.textui.TestRunner: void main(java.lang.String[])> 
<android.bluetooth.BluetoothHealthAppConfiguration: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void setMaxTotal(int)> 
<org.apache.harmony.xml.ExpatReader: void setProperty(java.lang.String,java.lang.Object)> 
<org.apache.xalan.templates.Stylesheet: void setDecimalFormat(org.apache.xalan.templates.DecimalFormatProperties)> 
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)> 
<org.apache.xml.serializer.ToTextStream: void characters(char[],int,int)> 
<android.webkit.BrowserFrame: void setProgress(int)> 
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker)> 
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> 
<org.apache.http.conn.params.ConnManagerParams: void setMaxTotalConnections(org.apache.http.params.HttpParams,int)> 
<org.xml.sax.helpers.XMLFilterImpl: void setFeature(java.lang.String,boolean)> 
<android.accessibilityservice.AccessibilityServiceInfo: void updateDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)> 
<android.accounts.AccountManagerService: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> 
<org.apache.commons.codec.net.QCodec: void setEncodeBlanks(boolean)> 
<android.support.v4.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.os.Parcel: void setDataPosition(int)> 
<android.filterfw.core.AsyncRunner: void setGraph(android.filterfw.core.FilterGraph)> 
<org.jivesoftware.smackx.packet.MUCInitialPresence: void setPassword(java.lang.String)> 
<android.filterfw.core.ShaderProgram: void setDrawMode(int)> 
<android.net.http.HttpAuthHeader: void setPassword(java.lang.String)> 
<android.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> 
<android.widget.ScrollView: void setFillViewport(boolean)> 
<org.jivesoftware.smack.packet.Authentication: void setDigest(java.lang.String,java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: void setSessionTimeout(int)> 
<org.apache.xml.serializer.ToTextSAXHandler: void setDocumentLocator(org.xml.sax.Locator)> 
<android.app.ActivityManagerProxy: void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int)> 
<android.graphics.ColorMatrix: void set(float[])> 
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)> 
<java.lang.System: void setOut(java.io.PrintStream)> 
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)> 
<android.view.GLES20DisplayList: void setStaticMatrix(android.graphics.Matrix)> 
<android.view.View: void setAccessibilityCursorPosition(int)> 
<android.widget.TextView: void setText(java.lang.CharSequence)> 
<gov.nist.javax.sip.header.RequestLine: void setSipVersion(java.lang.String)> 
<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)> 
<android.database.sqlite.SQLiteCursor: void setWindow(android.database.CursorWindow)> 
<android.graphics.drawable.GradientDrawable: void setStroke(int,int)> 
<java.security.cert.X509CRLSelector: void setIssuers(java.util.Collection)> 
<libcore.icu.RuleBasedCollatorICU: void setAttribute(int,int)> 
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> 
<android.app.Dialog: void setVolumeControlStream(int)> 
<javax.crypto.Mac: void update(byte[])> 
<android.graphics.Path: void set(android.graphics.Path)> 
<gov.nist.javax.sip.stack.SIPDialog: void setApplicationData(java.lang.Object)> 
<android.widget.SimpleAdapter: void setViewBinder(android.widget.SimpleAdapter$ViewBinder)> 
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> 
<android.text.style.StyleSpan: void updateDrawState(android.text.TextPaint)> 
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> 
<org.apache.xpath.VariableStack: void setStackFrame(int)> 
<android.net.http.Connection: void setCanPersist(org.apache.http.HttpEntity,org.apache.http.ProtocolVersion,int)> 
<gov.nist.javax.sip.message.MessageObject: java.lang.String debugDump()> 
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> 
<android.telephony.CellInfoCdma: void log(java.lang.String)> 
<org.apache.xml.serializer.dom3.DOM3SerializerImpl: void setSerializationHandler(org.apache.xml.serializer.SerializationHandler)> 
<android.bluetooth.BluetoothHeadset: boolean setPriority(android.bluetooth.BluetoothDevice,int)> 
<org.apache.xalan.templates.ElemNumber: void setLevel(int)> 
<android.preference.DialogPreference: void setDialogMessage(java.lang.CharSequence)> 
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)> 
<android.preference.SwitchPreference: void setSwitchTextOff(java.lang.CharSequence)> 
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)> 
<android.renderscript.AllocationAdapter: void setZ(int)> 
<android.renderscript.AllocationAdapter: void setY(int)> 
<org.apache.http.impl.cookie.BasicClientCookie2: void setCommentURL(java.lang.String)> 
<org.apache.http.impl.client.AbstractHttpClient: void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry)> 
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)> 
<gov.nist.javax.sip.header.extensions.Join: void setCallIdentifier(gov.nist.javax.sip.header.CallIdentifier)> 
<org.apache.xpath.axes.FilterExprIteratorSimple: void setRoot(int,java.lang.Object)> 
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> 
<android.widget.TabWidget: void setLeftStripDrawable(android.graphics.drawable.Drawable)> 
<android.test.LoaderTestCase: java.lang.Object getLoaderResultSynchronously(android.content.Loader)> 
<android.appwidget.AppWidgetManager: void partiallyUpdateAppWidget(int[],android.widget.RemoteViews)> 
<android.app.ProgressDialog: void setSecondaryProgress(int)> 
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])> 
<android.support.v4.app.HCSparseArray: void setValueAt(int,java.lang.Object)> 
<android.os.Broadcaster: void dumpRegistrations()> 
<dalvik.system.profiler.BinaryHprofReader: void setStrict(boolean)> 
<org.apache.http.impl.cookie.NetscapeDraftSpec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)> 
<java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)> 
<libcore.icu.NativeDecimalFormat: void setGroupingUsed(boolean)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void internalEntityDecl(java.lang.String,java.lang.String)> 
<android.view.GLES20DisplayList: void setClipChildren(boolean)> 
<libcore.net.url.FileURLConnection: java.io.InputStream getDirectoryListing(java.io.File)> 
<android.net.wifi.WifiStateMachine: int syncAddOrUpdateNetwork(com.android.internal.util.AsyncChannel,android.net.wifi.WifiConfiguration)> 
<gov.nist.javax.sip.header.extensions.Join: void setToTag(java.lang.String)> 
<org.jivesoftware.smack.XMPPConnection: void setAvailableCompressionMethods(java.util.Collection)> 
<android.speech.tts.SynthesisPlaybackQueueItem: void run()> 
<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable,int,int)> 
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)> 
<android.webkit.WebViewClassic: void setDownloadListener(android.webkit.DownloadListener)> 
<android.inputmethodservice.KeyboardView: void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setVerifyRootCAEnabled(boolean)> 
<android.support.v4.app.DialogFragment: void setShowsDialog(boolean)> 
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)> 
<org.apache.xalan.templates.Stylesheet: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)> 
<android.app.ActivityManagerProxy: java.lang.String getCallingPackage(android.os.IBinder)> 
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)> 
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)> 
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)> 
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xml.utils.FastStringBuffer: void sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler)> 
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)> 
<org.apache.xalan.templates.Stylesheet: void setId(java.lang.String)> 
<org.apache.xml.dtm.DTMManager: void setSource_location(boolean)> 
<org.jivesoftware.smack.packet.PresenceCapability: void setVersion(java.lang.String)> 
<org.apache.xml.serializer.ToUnknownStream: void setOutputFormat(java.util.Properties)> 
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> 
<android.webkit.WebChromeClient: void openFileChooser(android.webkit.ValueCallback,java.lang.String,java.lang.String)> 
<android.app.ActivityManagerProxy: void unbindFinished(android.os.IBinder,android.content.Intent,boolean)> 
<android.widget.TextView: void setSingleLine(boolean)> 
<gov.nist.javax.sip.header.SIPETag: void setETag(java.lang.String)> 
<jp.co.omronsoft.openwnn.JAJP.Romkan: void setPreferences(android.content.SharedPreferences)> 
<org.xml.sax.helpers.ParserAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<org.apache.commons.io.output.DemuxOutputStream: void write(int)> 
<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)> 
<android.location.Location: void setLongitude(double)> 
<android.location.Address: void setSubLocality(java.lang.String)> 
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.Warning: void setAgent(java.lang.String)> 
<android.view.ViewRootImpl: void dumpGfxInfo(int[])> 
<java.util.logging.LogRecord: void setMillis(long)> 
<org.apache.xalan.templates.TemplateSubPatternAssociation: void setTargetString(java.lang.String)> 
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)> 
<android.location.Country: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setRealm(java.lang.String)> 
<android.accessibilityservice.AccessibilityServiceInfo: void writeToParcel(android.os.Parcel,int)> 
<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)> 
<org.apache.xalan.templates.Stylesheet: void setPreserveSpaces(org.apache.xalan.templates.WhiteSpaceInfo)> 
<android.widget.CheckedTextView: void setChecked(boolean)> 
<android.text.style.SpellCheckSpan: void writeToParcel(android.os.Parcel,int)> 
<java.text.ChoiceFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)> 
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)> 
<gov.nist.javax.sip.message.SIPMessage: void setContentEncoding(javax.sip.header.ContentEncodingHeader)> 
<org.apache.xalan.templates.ElemAttributeSet: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.net.wifi.WifiStateMachine: boolean syncEnableNetwork(com.android.internal.util.AsyncChannel,int,boolean)> 
<android.webkit.Plugin: void setClickHandler(android.webkit.Plugin$PreferencesClickHandler)> 
<org.jivesoftware.smackx.packet.MUCUser: void setItem(org.jivesoftware.smackx.packet.MUCUser$Item)> 
<android.accounts.AccountManager: void updateAppPermission(android.accounts.Account,java.lang.String,int,boolean)> 
<android.net.LinkSocket: void setTrackedCapabilities(java.util.Set)> 
<android.util.FloatProperty: void set(java.lang.Object,java.lang.Object)> 
<android.webkit.WebSettingsClassic: void setPluginState(android.webkit.WebSettings$PluginState)> 
<android.os.TokenWatcher: void cleanup(android.os.IBinder,boolean)> 
<android.hardware.usb.UsbEndpoint: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.message.SIPMessage: void setContentLanguage(javax.sip.header.ContentLanguageHeader)> 
<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)> 
<android.preference.ListPreference: void setValue(java.lang.String)> 
<org.apache.xpath.functions.FuncTranslate: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfosResult(java.util.List,int)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setURIResolver(javax.xml.transform.URIResolver)> 
<android.os.CommonTimeConfig: int setNetworkBinding(java.lang.String)> 
<java.io.FilterOutputStream: void write(byte[])> 
<android.app.ActivityManagerProxy: void removeContentProvider(android.os.IBinder,boolean)> 
<android.net.TrafficStats: void setThreadStatsUid(int)> 
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> 
<android.view.View: void setPaddingRelative(int,int,int,int)> 
<android.widget.PopupWindow: void setContentView(android.view.View)> 
<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)> 
<org.apache.xalan.processor.ProcessorOutputElem: void setDoctypePublic(java.lang.String)> 
<android.webkit.WebViewClassic: void setWebBackForwardListClient(android.webkit.WebBackForwardListClient)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setClassName(java.lang.CharSequence)> 
<java.net.HttpCookie: void setMaxAge(long)> 
<android.widget.RemoteViewsAdapter: void setRemoteViewsOnClickHandler(android.widget.RemoteViews$OnClickHandler)> 
<android.view.Surface: void setDisplaySurface(android.os.IBinder,android.view.Surface)> 
<android.inputmethodservice.ExtractEditText: void replaceText_internal(int,int,java.lang.CharSequence)> 
<android.support.v4.view.ViewPager: void setChildrenDrawingOrderEnabledCompat(boolean)> 
<android.webkit.WebViewClassic: void setWebViewClient(android.webkit.WebViewClient)> 
<android.widget.ImageView: void setVisibility(int)> 
<org.apache.xpath.functions.FuncSum: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.commons.io.input.NullReader: int read(char[])> 
<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)> 
<gov.nist.javax.sip.header.MediaRange: void setType(java.lang.String)> 
<android.util.JsonWriter: void setLenient(boolean)> 
<jp.co.omronsoft.openwnn.UserDictionaryToolsList: boolean deleteWord(jp.co.omronsoft.openwnn.WnnWord)> 
<android.webkit.WebStorageClassic: void setQuotaForOrigin(java.lang.String,long)> 
<org.apache.harmony.security.asn1.ASN1Explicit: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.app.Instrumentation: void sendStringSync(java.lang.String)> 
<android.app.ListFragment: void setEmptyText(java.lang.CharSequence)> 
<android.view.SurfaceView: void setZOrderOnTop(boolean)> 
<org.apache.xml.serializer.ToStream: void setEncoding(java.lang.String)> 
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)> 
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)> 
<java.util.zip.Inflater: void setDictionary(byte[])> 
<gov.nist.javax.sip.header.ims.PServedUser: void setRegistrationState(java.lang.String)> 
<android.app.ActivityManagerProxy: boolean finishActivityAffinity(android.os.IBinder)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setSource(android.view.View,int)> 
<android.text.PackedObjectVector: void dump()> 
<android.support.v4.view.MenuItemCompat: android.view.MenuItem setActionView(android.view.MenuItem,android.view.View)> 
<android.widget.CalendarView: void setUnfocusedMonthDateColor(int)> 
<android.webkit.WebViewClassic: void setUseMockDeviceOrientation()> 
<android.view.TextureView: void setTransform(android.graphics.Matrix)> 
<org.apache.xalan.transformer.TransformerImpl: void setProperty(java.lang.String,java.lang.Object)> 
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)> 
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> 
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)> 
<android.preference.MultiCheckPreference: void setValues(boolean[])> 
<org.ccil.cowan.tagsoup.Parser: void setProperty(java.lang.String,java.lang.Object)> 
<gov.nist.javax.sip.header.Supported: void setOptionTag(java.lang.String)> 
<gov.nist.javax.sip.header.SIPObject: java.lang.String debugDump()> 
<java.security.cert.PKIXParameters: void setCertPathCheckers(java.util.List)> 
<org.kxml2.io.KXmlSerializer: void writeEscaped(java.lang.String,int)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setRouter(javax.sip.address.Router)> 
<libcore.net.http.RequestHeaders: void setIfModifiedSince(java.util.Date)> 
<org.jivesoftware.smack.packet.Message: void setHasNoSave(boolean)> 
<android.bluetooth.BluetoothDevice: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xpath.Arg: void setVal(org.apache.xpath.objects.XObject)> 
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)> 
<libcore.io.Posix: int read(java.io.FileDescriptor,java.nio.ByteBuffer)> 
<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence)> 
<android.net.wifi.p2p.WifiP2pManager: void addServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)> 
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)> 
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])> 
<org.apache.commons.io.output.NullWriter: void write(char[],int,int)> 
<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)> 
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)> 
<android.widget.RemoteViews: void setDisplayedChild(int,int)> 
<android.view.inputmethod.BaseInputConnection: boolean setComposingText(java.lang.CharSequence,int)> 
<org.apache.xml.serializer.utils.URI: void setUserinfo(java.lang.String)> 
<android.test.AndroidTestCase: void setTestContext(android.content.Context)> 
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])> 
<android.appwidget.AppWidgetHostView: void updateAppWidget(android.widget.RemoteViews)> 
<android.widget.TabHost: void setCurrentTab(int)> 
<android.location.Address: void setExtras(android.os.Bundle)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void setContentHandler(org.xml.sax.ContentHandler)> 
<java.util.logging.LogRecord: void setParameters(java.lang.Object[])> 
<android.hardware.display.WifiDisplay: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xpath.axes.WalkingIterator: void setFirstWalker(org.apache.xpath.axes.AxesWalker)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)> 
<android.net.nsd.NsdServiceInfo: void setHost(java.net.InetAddress)> 
<org.xml.sax.helpers.XMLReaderAdapter: void parse(java.lang.String)> 
<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)> 
<javax.xml.transform.sax.SAXSource: void setSystemId(java.lang.String)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void unparsedEntityDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.protocol.HttpService: void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier)> 
<android.support.v4.view.ViewCompat: void setLabelFor(android.view.View,int)> 
<org.kxml2.io.KXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)> 
<org.apache.harmony.luni.lang.reflect.GenericSignatureParser: void parseForMethod(java.lang.reflect.GenericDeclaration,java.lang.String,java.lang.Class[])> 
<android.inputmethodservice.ExtractEditText: void setIME(android.inputmethodservice.InputMethodService)> 
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)> 
<android.location.Location: void setProvider(java.lang.String)> 
<android.widget.ProgressBar: void setIndeterminate(boolean)> 
<java.util.zip.CRC32: void update(byte[])> 
<android.preference.Preference: void setLayoutResource(int)> 
<jp.co.omronsoft.openwnn.CandidateTextView: void setBackgroundDrawable(android.graphics.drawable.Drawable)> 
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)> 
<java.text.DecimalFormat: void setMinimumIntegerDigits(int)> 
<org.apache.xalan.transformer.TransformerImpl: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.app.ActivityManagerProxy: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)> 
<android.graphics.drawable.GradientDrawable: void setColor(int)> 
<android.text.style.BackgroundColorSpan: void writeToParcel(android.os.Parcel,int)> 
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)> 
<android.net.wifi.WifiWatchdogStateMachine: void sendLinkStatusNotification(boolean)> 
<gov.nist.javax.sip.header.RequestLine: void setMethod(java.lang.String)> 
<org.apache.xalan.templates.Stylesheet: void setParam(org.apache.xalan.templates.ElemParam)> 
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)> 
<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)> 
<org.apache.xalan.transformer.TransformerImpl: void setExceptionThrown(java.lang.Exception)> 
<android.location.Criteria: void setBearingRequired(boolean)> 
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)> 
<java.net.Socks4Message: void setVersionNumber(int)> 
<android.webkit.Plugin: void setDescription(java.lang.String)> 
<android.graphics.drawable.NinePatchDrawable: void setFilterBitmap(boolean)> 
<junit.extensions.TestSetup: void run(junit.framework.TestResult)> 
<net.oauth.OAuthAccessor: void setProperty(java.lang.String,java.lang.Object)> 
<android.telephony.CellInfoLte: void log(java.lang.String)> 
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setValue(java.lang.String)> 
<android.test.InstrumentationTestCase: void sendKeys(java.lang.String)> 
<android.net.NetworkQuotaInfo: void writeToParcel(android.os.Parcel,int)> 
<javax.xml.transform.sax.SAXResult: void setHandler(org.xml.sax.ContentHandler)> 
<android.webkit.WebViewDatabaseClassic: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<libcore.net.RawSocket: int write(byte[],byte[],int,int)> 
<android.text.method.NumberKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)> 
<jp.co.omronsoft.openwnn.OpenWnnEN: void setSymbolMode(java.lang.String)> 
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> 
<javax.obex.ServerSession: void handlePutRequest(int)> 
<gov.nist.javax.sip.address.SipUri: void setUser(java.lang.String)> 
<android.widget.ZoomButtonsController: void setZoomSpeed(long)> 
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> 
<android.webkit.CallbackProxy: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)> 
<android.support.v4.view.ViewPager: void setPageMargin(int)> 
<android.test.AndroidTestRunner: void setInstrumentaiton(android.app.Instrumentation)> 
<android.content.ContentProviderProxy: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> 
<gov.nist.javax.sip.SipProviderImpl: void setAutomaticDialogSupportEnabled(boolean)> 
<android.webkit.WebViewClassic: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xalan.templates.ElemTextLiteral: void setDisableOutputEscaping(boolean)> 
<gov.nist.javax.sip.message.SIPMessage: void setHeaders(java.util.List)> 
<org.apache.xml.serializer.ToXMLSAXHandler: void setDocumentLocator(org.xml.sax.Locator)> 
<android.view.ViewRootImpl: void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View)> 
<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,boolean)> 
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)> 
<android.support.v4.view.MenuItemCompatHoneycomb: android.view.MenuItem setActionView(android.view.MenuItem,android.view.View)> 
<android.os.PerformanceCollector: void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)> 
<org.apache.xml.serializer.SerializerBase: void setIndentAmount(int)> 
<org.jivesoftware.smackx.packet.MUCUser: void setInvite(org.jivesoftware.smackx.packet.MUCUser$Invite)> 
<javax.xml.validation.Validator: void setFeature(java.lang.String,boolean)> 
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)> 
<android.widget.Spinner: void setGravity(int)> 
<org.jivesoftware.smackx.packet.VCard: void setPhoneHome(java.lang.String,java.lang.String)> 
<org.apache.commons.io.EndianUtils: void writeSwappedDouble(java.io.OutputStream,double)> 
<android.webkit.HTML5VideoView: void setOnErrorListener(android.webkit.HTML5VideoViewProxy)> 
<org.apache.xalan.templates.ElemSort: void setCaseOrder(org.apache.xalan.templates.AVT)> 
<android.filterfw.core.Frame: void setFormat(android.filterfw.core.FrameFormat)> 
<java.text.StringCharacterIterator: void setText(java.lang.String)> 
<org.apache.xpath.functions.FuncSystemProperty: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.support.v4.view.PagerTitleStrip: void setTextSize(int,float)> 
<android.support.v4.content.AsyncTaskLoader: void setUpdateThrottle(long)> 
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> 
<android.graphics.Region: boolean set(int,int,int,int)> 
<android.view.View: void setDrawingCacheQuality(int)> 
<libcore.io.ForwardingOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)> 
<android.filterfw.core.ShaderProgram: void setVertexCount(int)> 
<android.view.inputmethod.InputBinding: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.ElemTemplate: void setMatch(org.apache.xpath.XPath)> 
<android.animation.ValueAnimator: void setCurrentPlayTime(long)> 
<android.graphics.Bitmap: void setHasAlpha(boolean)> 
<android.widget.SimpleCursorAdapter: void setViewText(android.widget.TextView,java.lang.String)> 
<android.renderscript.Script: void setVar(int,float)> 
<libcore.io.BlockGuardOs: int read(java.io.FileDescriptor,byte[],int,int)> 
<android.widget.TextView: void setTextLocale(java.util.Locale)> 
<java.text.MessageFormat: java.lang.Object[] parse(java.lang.String,java.text.ParsePosition)> 
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)> 
<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)> 
<org.apache.xpath.functions.FuncQname: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)> 
<android.test.mock.MockContext: void setWallpaper(android.graphics.Bitmap)> 
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)> 
<android.app.ActivityManagerProxy: boolean killPids(int[],java.lang.String,boolean)> 
<libcore.io.BlockGuardOs: void ftruncate(java.io.FileDescriptor,long)> 
<java.security.DigestInputStream: void setMessageDigest(java.security.MessageDigest)> 
<java.util.TimeZone: void setID(java.lang.String)> 
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)> 
<java.nio.charset.CharsetDecoderICU: void setPosition(java.nio.ByteBuffer)> 
<java.text.DecimalFormatSymbols: void setCurrencySymbol(java.lang.String)> 
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)> 
<net.oauth.client.OAuthClient: void setHttpClient(net.oauth.http.HttpClient)> 
<org.apache.http.impl.client.AbstractHttpClient: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> 
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)> 
<org.apache.xpath.axes.NodeSequence: void setRoot(int,java.lang.Object)> 
<android.mtp.MtpDatabase: int setDeviceProperty(int,long,java.lang.String)> 
<android.graphics.Matrix: void setRotate(float)> 
<gov.nist.javax.sip.address.Authority: void setHostPort(gov.nist.core.HostPort)> 
<android.webkit.WebViewClassic: void addJavascriptInterface(java.lang.Object,java.lang.String)> 
<android.webkit.WebViewCore: void setScrollbarModes(int,int)> 
<junit.textui.ResultPrinter: void printDefectHeader(junit.framework.TestFailure,int)> 
<libcore.net.http.HttpURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)> 
<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> 
<libcore.net.http.RequestHeaders: void setIfNoneMatch(java.lang.String)> 
<org.apache.xml.utils.IntStack: void setTop(int)> 
<org.apache.xalan.templates.ElemTemplateElement: void runtimeInit(org.apache.xalan.transformer.TransformerImpl)> 
<android.widget.GridLayout: void setColumnCount(int)> 
<org.apache.xalan.templates.ElemCopyOf: void setSelect(org.apache.xpath.XPath)> 
<android.widget.ImageView: void setImageResource(int)> 
<net.oauth.client.URLConnectionClient: net.oauth.http.HttpResponseMessage execute(net.oauth.http.HttpMessage)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.text.util.Rfc822Token: void setComment(java.lang.String)> 
<android.media.RemoteControlClient: void setRcseId(int)> 
<java.lang.AbstractStringBuilder: void setCharAt(int,char)> 
<android.widget.DialerFilter: void setFilterWatcher(android.text.TextWatcher)> 
<org.ccil.cowan.tagsoup.ElementType: void setMemberOf(int)> 
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)> 
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)> 
<org.xmlpull.v1.sax2.Driver: void parseSubTree(org.xmlpull.v1.XmlPullParser)> 
<android.widget.VideoView: void setVideoPath(java.lang.String)> 
<android.media.AudioService: int requestAudioFocus(int,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setText(java.lang.CharSequence)> 
<java.util.zip.Deflater: void setDictionary(byte[],int,int)> 
<android.net.NetworkTemplate: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.ContentEncoding: void setEncoding(java.lang.String)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: void setSessionAvailable(boolean)> 
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> 
<org.jivesoftware.smack.packet.DataMessage: void setFromTrustedServer(boolean)> 
<android.support.v4.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.widget.RelativeLayout: void setVerticalGravity(int)> 
<gov.nist.javax.sip.stack.TCPMessageChannel: void handleException(java.text.ParseException,gov.nist.javax.sip.message.SIPMessage,java.lang.Class,java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.util.ObservableWriter: void write(char[],int,int)> 
<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)> 
<android.content.pm.PackageParser: void setOnlyCoreApps(boolean)> 
<org.apache.james.mime4j.MimeStreamParser: void parseEntity(java.io.InputStream)> 
<java.text.Format: java.lang.Object parseObject(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void writeAppData(byte[],int,int)> 
<android.telephony.CellSignalStrengthCdma: void setEvdoSnr(int)> 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setUseClientMode(boolean)> 
<android.widget.MediaController: void setAnchorView(android.view.View)> 
<android.support.v4.view.PagerTabStrip: void setBackgroundColor(int)> 
<android.app.ListActivity: void setSelection(int)> 
<gov.nist.javax.sip.header.SubscriptionState: void setExpires(int)> 
<org.ccil.cowan.tagsoup.XMLWriter: void setPrefix(java.lang.String,java.lang.String)> 
<libcore.net.http.RequestHeaders: void setContentType(java.lang.String)> 
<gov.nist.javax.sip.header.TimeStamp: void setDelay(float)> 
<android.view.GLES20Canvas: void setDisplayListName(int,java.lang.String)> 
<android.view.animation.Animation: void setDuration(long)> 
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)> 
<gov.nist.core.InternalErrorHandler: void handleException(java.lang.Exception,gov.nist.core.StackLogger)> 
<org.ccil.cowan.tagsoup.AttributesImpl: void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)> 
<org.javia.arity.RPN: void setConsumer(org.javia.arity.TokenConsumer)> 
<android.filterfw.core.OutputPort: void setBasePort(android.filterfw.core.InputPort)> 
<android.graphics.Paint: void set(android.graphics.Paint)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTMdefaultNamespaceDeclarationNode: void setNodeValue(java.lang.String)> 
<android.view.inputmethod.BaseInputConnection: boolean commitText(java.lang.CharSequence,int)> 
<android.media.RemoteControlClient: void setTransportControlFlags(int)> 
<android.widget.TextView: void setRawInputType(int)> 
<android.net.NetworkInfo: void setRoaming(boolean)> 
<org.ccil.cowan.tagsoup.Parser: void setDTDHandler(org.xml.sax.DTDHandler)> 
<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)> 
<android.view.GLES20Canvas: void setMatrix(android.graphics.Matrix)> 
<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setValue(java.lang.String)> 
<android.app.ActivityManagerProxy: void updateConfiguration(android.content.res.Configuration)> 
<android.support.v4.util.SparseArrayCompat: void setValueAt(int,java.lang.Object)> 
<gov.nist.javax.sip.header.ProxyAuthenticate: void setURI(javax.sip.address.URI)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> 
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeId(int)> 
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> 
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> 
<android.widget.NumberPicker: void setOnValueChangedListener(android.widget.NumberPicker$OnValueChangeListener)> 
<android.webkit.WebViewClassic: void setNetworkType(java.lang.String,java.lang.String)> 
<org.ccil.cowan.tagsoup.Parser: void setContentHandler(org.xml.sax.ContentHandler)> 
<android.app.FragmentBreadCrumbs: void setActivity(android.app.Activity)> 
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)> 
<org.apache.xpath.patterns.FunctionPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.filterfw.core.VertexFrame: void setData(java.nio.ByteBuffer,int,int)> 
<android.net.wifi.p2p.WifiP2pDevice: void update(android.net.wifi.p2p.WifiP2pDevice)> 
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)> 
<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)> 
<gov.nist.javax.sip.address.Authority: void setUserInfo(gov.nist.javax.sip.address.UserInfo)> 
<javax.net.ssl.SSLParameters: void setWantClientAuth(boolean)> 
<android.database.CursorWindow: void writeToParcel(android.os.Parcel,int)> 
<org.apache.harmony.xml.dom.CharacterDataImpl: void setData(java.lang.String)> 
<android.graphics.RectF: void set(float,float,float,float)> 
<java.net.CookieManager: void setCookiePolicy(java.net.CookiePolicy)> 
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String)> 
<junit.framework.TestSuite: void run(junit.framework.TestResult)> 
<android.content.SyncManager: void dumpTimeSec(java.io.PrintWriter,long)> 
<android.telephony.CellInfo: void setTimeStamp(long)> 
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)> 
<org.jivesoftware.smack.packet.PresenceCapability: void setNode(java.lang.String)> 
<gov.nist.javax.sip.DialogFilter: void sendServerInternalErrorResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)> 
<android.preference.EditTextPreference: void setText(java.lang.String)> 
<org.apache.xpath.VariableStack: void setGlobalVariable(int,org.apache.xpath.objects.XObject)> 
<android.view.Surface: void setPosition(float,float)> 
<org.apache.xpath.axes.PredicatedNodeTest: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)> 
<libcore.icu.NativeDecimalFormat: void setPositiveSuffix(java.lang.String)> 
<org.apache.xpath.functions.FunctionOneArg: void setArg(org.apache.xpath.Expression,int)> 
<libcore.icu.NativeBreakIterator: void setText(java.text.CharacterIterator)> 
<org.apache.harmony.security.x509.ExtensionValue: void dumpValue(java.lang.StringBuilder)> 
<android.bluetooth.BluetoothOutputStream: void write(int)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void endElement(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.xpath.functions.FuncSubstring: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.http.auth.AuthState: void setAuthScheme(org.apache.http.auth.AuthScheme)> 
<org.apache.xml.serializer.ToStream: void processAttributes(java.io.Writer,int)> 
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void setResult(javax.xml.transform.Result)> 
<org.apache.xml.serializer.Version: void main(java.lang.String[])> 
<android.text.style.StyleSpan: void updateMeasureState(android.text.TextPaint)> 
<jp.co.omronsoft.openwnn.JAJP.KanaConverter: void setDictionary(jp.co.omronsoft.openwnn.WnnDictionary)> 
<android.widget.TextView: void setMinEms(int)> 
<android.app.ActivityThread: void handleDumpActivity(android.app.ActivityThread$DumpComponentInfo)> 
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> 
<android.widget.AbsListView: void setCacheColorHint(int)> 
<org.apache.commons.io.CopyUtils: void copy(java.lang.String,java.io.Writer)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledProtocols(java.lang.String[])> 
<org.apache.xpath.compiler.XPathParser: void setErrorHandler(javax.xml.transform.ErrorListener)> 
<android.telephony.CellInfo: void setRegisterd(boolean)> 
<android.test.mock.MockContext: void setTheme(int)> 
<android.webkit.WebSettingsClassic: void setAllowUniversalAccessFromFileURLs(boolean)> 
<libcore.net.http.HttpsURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)> 
<org.apache.xalan.transformer.TrAXFilter: void setParent(org.xml.sax.XMLReader)> 
<org.apache.xpath.patterns.NodeTest: void setLocalName(java.lang.String)> 
<android.widget.TabWidget: void setCurrentTab(int)> 
<android.webkit.WebViewCore: void access$6600(android.webkit.WebViewCore,int,int)> 
<android.inputmethodservice.Keyboard: void setVerticalGap(int)> 
<org.apache.http.impl.conn.DefaultClientConnection: void setAttribute(java.lang.String,java.lang.Object)> 
<android.widget.TabWidget: void setEnabled(boolean)> 
<android.content.SyncStorageEngine: void setIsSyncable(android.accounts.Account,int,java.lang.String,int)> 
<org.apache.xalan.processor.XSLTElementProcessor: void setPropertiesFromAttributes(org.apache.xalan.processor.StylesheetHandler,java.lang.String,org.xml.sax.Attributes,org.apache.xalan.templates.ElemTemplateElement)> 
<org.xml.sax.helpers.AttributesImpl: void setType(int,java.lang.String)> 
<android.support.v4.view.ViewCompat: void setOverScrollMode(android.view.View,int)> 
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)> 
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> 
<android.net.NetworkInfo: void setSubtype(int,java.lang.String)> 
<android.view.ActionProvider: void setSubUiVisibilityListener(android.view.ActionProvider$SubUiVisibilityListener)> 
<org.apache.xalan.templates.ElemIf: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<org.apache.http.impl.cookie.BasicClientCookie2: void setPorts(int[])> 
<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> 
<android.webkit.WebViewClassic: boolean onSavePassword(java.lang.String,java.lang.String,java.lang.String,android.os.Message)> 
<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(java.lang.String)> 
<android.drm.DrmUtils: void writeToFile(java.lang.String,byte[])> 
<org.apache.http.conn.params.ConnManagerParamBean: void setTimeout(long)> 
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)> 
<org.apache.harmony.security.x509.IssuingDistributionPoint: void setOnlyContainsCACerts(boolean)> 
<android.text.method.QwertyKeyListener: void markAsReplaced(android.text.Spannable,int,int,java.lang.String)> 
<android.widget.AbsListView: void setFilterText(java.lang.String)> 
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> 
<gov.nist.javax.sip.header.Credentials: void setCredentials(gov.nist.core.NameValueList)> 
<android.filterfw.core.Frame: void setReusable(boolean)> 
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])> 
<android.preference.DialogPreference: void setDialogTitle(java.lang.CharSequence)> 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> 
<android.text.style.BulletSpan: void writeToParcel(android.os.Parcel,int)> 
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setItemCount(java.lang.Object,int)> 
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)> 
<android.support.v13.app.FragmentCompatICSMR1: void setUserVisibleHint(android.app.Fragment,boolean)> 
<android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])> 
<org.apache.xpath.patterns.ContextMatchStepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)> 
<org.javia.arity.SyntaxException: org.javia.arity.SyntaxException set(java.lang.String,int)> 
<org.jivesoftware.smack.NonSASLAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<android.graphics.Matrix: void printShortString(java.io.PrintWriter)> 
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> 
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int,int)> 
<org.apache.xml.serializer.utils.URI: void setHost(java.lang.String)> 
<android.widget.FastScroller: void setAlwaysShow(boolean)> 
<gov.nist.javax.sip.header.MinExpires: void setExpires(int)> 
<android.text.style.SpellCheckSpan: void setSpellCheckInProgress(boolean)> 
<android.webkit.WebSettingsClassic: void setUseWebViewBackgroundForOverscrollBackground(boolean)> 
<android.webkit.Plugin: void setName(java.lang.String)> 
<org.apache.http.impl.io.HttpRequestWriter: void writeHeadLine(org.apache.http.HttpRequest)> 
<java.math.BigInteger: java.math.BigInteger setBit(int)> 
<javax.xml.validation.SchemaFactory: void setFeature(java.lang.String,boolean)> 
<android.webkit.WebHistoryItemClassic: void setCustomData(java.lang.Object)> 
<android.filterfw.core.FilterPort: void setBlocking(boolean)> 
<android.webkit.WebViewClassic: void setFindIsUp(boolean)> 
<android.preference.RingtonePreference: void setRingtoneType(int)> 
<javax.obex.ServerOperation: boolean sendReply(int)> 
<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> 
<android.support.v4.view.PagerTitleStrip: void updateTextPositions(int,float,boolean)> 
<org.apache.xml.serializer.SerializerBase: void setSourceLocator(javax.xml.transform.SourceLocator)> 
<java.security.cert.PKIXParameters: void setAnyPolicyInhibited(boolean)> 
<org.apache.xalan.templates.ElemPI: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.webkit.WebSyncManager: void run()> 
<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)> 
<android.media.AudioManager: void setStreamMute(int,boolean)> 
<android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)> 
<android.view.ViewRootImpl: void windowFocusChanged(boolean,boolean)> 
<android.net.TrafficStats: void setThreadStatsTag(int)> 
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)> 
<libcore.net.http.HttpsURLConnectionImpl: void setAllowUserInteraction(boolean)> 
<org.apache.xpath.axes.LocPathIterator: void setCurrentPos(int)> 
<android.media.MediaExtractor: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> 
<libcore.icu.NativeBreakIterator: void setText(java.lang.String)> 
<android.support.v4.util.LongSparseArray: void setValueAt(int,java.lang.Object)> 
<org.apache.xml.utils.URI: void setHost(java.lang.String)> 
<android.support.v4.widget.EdgeEffectCompat: void setSize(int,int)> 
<org.apache.xalan.templates.KeyDeclaration: void setName(org.apache.xml.utils.QName)> 
<javax.net.ssl.SSLParameters: void setNeedClientAuth(boolean)> 
<android.os.AsyncTask: void onPostExecute(java.lang.Object)> 
<gov.nist.javax.sip.stack.TLSMessageChannel: void setHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)> 
<org.apache.xml.utils.DefaultErrorHandler: void printLocation(java.io.PrintWriter,java.lang.Throwable)> 
<org.apache.xalan.processor.XSLTAttributeDef: void setDefault(java.lang.String)> 
<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)> 
<android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)> 
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)> 
<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)> 
<gov.nist.javax.sip.header.Priority: void setPriority(java.lang.String)> 
<java.util.concurrent.ConcurrentSkipListMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)> 
<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)> 
<org.apache.xalan.templates.ElemSort: void setLang(org.apache.xalan.templates.AVT)> 
<org.apache.xalan.templates.StylesheetRoot: void setTemplateListComposed(org.apache.xalan.templates.TemplateList)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void setDTDHandler(org.xml.sax.DTDHandler)> 
<org.xml.sax.helpers.XMLReaderAdapter: void setErrorHandler(org.xml.sax.ErrorHandler)> 
<java.lang.reflect.Field: void setInt(java.lang.Object,int)> 
<org.apache.james.mime4j.message.Multipart: void setSubType(java.lang.String)> 
<javax.xml.transform.dom.DOMSource: void setNode(org.w3c.dom.Node)> 
<android.widget.ActivityChooserView: void setDefaultActionButtonContentDescription(int)> 
<android.view.Surface: void setSize(int,int)> 
<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)> 
<libcore.io.EventLogger: void setReporter(libcore.io.EventLogger$Reporter)> 
<android.support.v4.content.LocalBroadcastManager: boolean sendBroadcast(android.content.Intent)> 
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> 
<org.apache.xpath.XPath: void setExpression(org.apache.xpath.Expression)> 
<gov.nist.core.HostNameParser: void main(java.lang.String[])> 
<android.location.Address: void setLongitude(double)> 
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)> 
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> 
<android.net.http.Connection: void setCanPersist(boolean)> 
<android.webkit.WebViewCore: void saveViewState(java.io.OutputStream,android.webkit.ValueCallback)> 
<org.apache.xpath.jaxp.XPathFactoryImpl: void setFeature(java.lang.String,boolean)> 
<android.net.sip.SipProfile: void writeToParcel(android.os.Parcel,int)> 
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)> 
<android.filterfw.core.VertexFrame: void setInts(int[])> 
<android.media.videoeditor.MediaArtistNativeHelper: void setAudioCodec(int)> 
<android.graphics.drawable.NinePatchDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<org.apache.xalan.templates.ElemNumber: void setValue(org.apache.xpath.XPath)> 
<android.app.Activity: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)> 
<gov.nist.javax.sip.header.extensions.References: void setCallId(java.lang.String)> 
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)> 
<android.content.AsyncTaskLoader: void setUpdateThrottle(long)> 
<org.apache.commons.logging.impl.SimpleLog: void setLevel(int)> 
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smack.packet.Presence: void setClientType(org.jivesoftware.smack.packet.Presence$ClientType)> 
<android.webkit.JWebCoreJavaBridge: void updateProxy(android.net.ProxyProperties)> 
<android.bluetooth.BluetoothSocket: int write(byte[],int,int)> 
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)> 
<jp.co.omronsoft.openwnn.TextCandidates1LineViewManager: void setPreferences(android.content.SharedPreferences)> 
<android.location.Criteria: void setPowerRequirement(int)> 
<android.support.v4.app.ListFragment: void setListAdapter(android.widget.ListAdapter)> 
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)> 
<android.app.ActivityManagerProxy: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)> 
<org.apache.xalan.templates.ElemUnknown: void executeFallbacks(org.apache.xalan.transformer.TransformerImpl)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])> 
<android.support.v4.view.PagerTitleStrip: void setGravity(int)> 
<java.util.Calendar: void set(int,int)> 
<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)> 
<android.webkit.WebSettings: void setSavePassword(boolean)> 
<android.filterfw.core.SyncRunner: void setDoneCallback(android.filterfw.core.GraphRunner$OnRunnerDoneListener)> 
<android.widget.AbsListView: void setStackFromBottom(boolean)> 
<gov.nist.javax.sip.header.StatusLine: void setReasonPhrase(java.lang.String)> 
<android.app.Activity: void setVolumeControlStream(int)> 
<android.net.http.AndroidHttpClient: long parseDate(java.lang.String)> 
<org.apache.http.impl.cookie.BasicDomainHandler: void parse(org.apache.http.cookie.SetCookie,java.lang.String)> 
<android.webkit.WebViewClassic: boolean sendViewSizeZoom(boolean)> 
<org.jivesoftware.smackx.packet.VCard: void setEncodedImage(java.lang.String)> 
<android.net.wifi.WifiInfo: void setSSID(android.net.wifi.WifiSsid)> 
<org.apache.http.params.HttpConnectionParamBean: void setSoTimeout(int)> 
<org.jivesoftware.smack.util.Base64: boolean encodeToFile(byte[],java.lang.String)> 
<android.util.JsonWriter: android.util.JsonWriter value(boolean)> 
<android.webkit.CallbackProxy: void getVisitedHistory(android.webkit.ValueCallback)> 
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)> 
<java.security.cert.X509CertSelector: void setIssuer(java.lang.String)> 
<java.nio.FileChannelImpl: long write(java.nio.ByteBuffer[],int,int)> 
<org.apache.xpath.XPathContext: void setSAXLocator(javax.xml.transform.SourceLocator)> 
<org.apache.harmony.xml.ExpatReader: void setFeature(java.lang.String,boolean)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: void setSecurityMechanism(java.lang.String)> 
<android.graphics.drawable.GradientDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<java.security.Identity: void setPublicKey(java.security.PublicKey)> 
<java.util.logging.Logger: void setFilter(java.util.logging.Filter)> 
<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)> 
<org.apache.xalan.templates.ElemForEach: void setSortElem(org.apache.xalan.templates.ElemSort)> 
<android.view.animation.Animation: void setStartTime(long)> 
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpResponse)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setPopupOffset(int,int)> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void parse(java.lang.String)> 
<android.widget.Chronometer: void setOnChronometerTickListener(android.widget.Chronometer$OnChronometerTickListener)> 
<android.telephony.PhoneNumberFormattingTextWatcher: void afterTextChanged(android.text.Editable)> 
<gov.nist.javax.sip.header.Accept: void setQValue(float)> 
<android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)> 
<gov.nist.javax.sip.address.SipUri: void setUriParms(gov.nist.core.NameValueList)> 
<android.webkit.WebSettingsClassic: void setNeedInitialFocus(boolean)> 
<android.telephony.SmsCbCmasInfo: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.CallInfo: void setPurpose(java.lang.String)> 
<android.media.AudioManager: void setMasterVolume(int,int)> 
<java.security.cert.X509CertSelector: void setSerialNumber(java.math.BigInteger)> 
<libcore.io.ForwardingOs: int read(java.io.FileDescriptor,byte[],int,int)> 
<junit.textui.ResultPrinter: void printDefects(java.util.Enumeration,int,java.lang.String)> 
<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)> 
<junit.extensions.TestDecorator: void basicRun(junit.framework.TestResult)> 
<android.filterfw.core.GLFrame: void setDataFromFrame(android.filterfw.core.Frame)> 
<javax.crypto.Mac: void update(byte[],int,int)> 
<android.content.SyncOperation: void updateEffectiveRunTime()> 
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)> 
<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor)> 
<android.widget.TextView: void setMaxEms(int)> 
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])> 
<android.webkit.WebViewClassic: boolean onHoverEvent(android.view.MotionEvent)> 
<android.webkit.WebViewClassic: void documentHasImages(android.os.Message)> 
<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)> 
<android.net.wifi.p2p.WifiP2pGroup: void setNetworkName(java.lang.String)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setHostAddress(java.lang.String)> 
<java.text.DecimalFormat: void setNegativePrefix(java.lang.String)> 
<android.media.AudioManager: void setStreamVolume(int,int,int)> 
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)> 
<android.filterfw.core.AsyncRunner: void setRunning(boolean)> 
<android.app.Fragment: void setIndex(int,android.app.Fragment)> 
<android.service.dreams.DreamService: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> 
<libcore.io.IoBridge: int maybeThrowAfterSendto(boolean,libcore.io.ErrnoException)> 
<android.filterpacks.imageproc.SaturateFilter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<android.database.BulkCursorNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> 
<android.widget.SearchView: void setIconified(boolean)> 
<android.net.wifi.WifiConfigStore: void sendConfiguredNetworksChangedBroadcast(android.net.wifi.WifiConfiguration,int)> 
<org.apache.harmony.security.asn1.ASN1OctetString: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)> 
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> 
<android.widget.HorizontalScrollView: void setFillViewport(boolean)> 
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)> 
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)> 
<java.util.concurrent.ConcurrentLinkedDeque: void writeObject(java.io.ObjectOutputStream)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Permission parsePermissionTree(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,java.lang.String[])> 
<android.widget.AbsListView: void setRemoteViewsOnClickHandler(android.widget.RemoteViews$OnClickHandler)> 
<libcore.io.ForwardingOs: void ftruncate(java.io.FileDescriptor,long)> 
<libcore.icu.NativeDecimalFormat: void setMinimumFractionDigits(int)> 
<android.app.ActivityManager: java.util.List getRunningTasks(int,int,android.app.IThumbnailReceiver)> 
<android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.os.CancellationSignal)> 
<java.io.CharArrayWriter: void writeTo(java.io.Writer)> 
<android.view.InputFilter: void onInputEvent(android.view.InputEvent,int)> 
<org.json.JSONStringer: void replaceTop(org.json.JSONStringer$Scope)> 
<android.view.Window: void setFormat(int)> 
<android.view.accessibility.AccessibilityInteractionClient: void setPerformAccessibilityActionResult(boolean,int)> 
<android.widget.TextView: void setGravity(int)> 
<android.text.style.SuggestionRangeSpan: void setBackgroundColor(int)> 
<android.database.sqlite.SQLiteSession: java.lang.String executeForString(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: void setActualEncoding(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setMAddr(java.lang.String)> 
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setCheckable(boolean)> 
<android.animation.PropertyValuesHolder: void setIntValues(int[])> 
<android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<android.webkit.HTML5VideoView: void setOnCompletionListener(android.webkit.HTML5VideoViewProxy)> 
<android.webkit.WebViewCore: void setWebTextViewAutoFillable(int,java.lang.String)> 
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)> 
<android.widget.AdapterViewAnimator: void setSelection(int)> 
<jp.co.omronsoft.openwnn.ComposingText: void replaceStrSegment(int,jp.co.omronsoft.openwnn.StrSegment[],int)> 
<javax.obex.ServerSession: void handleGetRequest(int)> 
<android.view.View: void sendAccessibilityEvent(int)> 
<android.widget.LinearLayout: void setMeasureWithLargestChildEnabled(boolean)> 
<org.apache.harmony.xml.ExpatReader: void parse(java.io.Reader,java.lang.String,java.lang.String)> 
<gov.nist.core.ParserCore: void dbg_enter(java.lang.String)> 
<org.apache.commons.io.filefilter.OrFileFilter: void setFileFilters(java.util.List)> 
<org.apache.http.params.HttpConnectionParams: void setStaleCheckingEnabled(org.apache.http.params.HttpParams,boolean)> 
<org.jivesoftware.smack.PacketWriter: void sendPacket(org.jivesoftware.smack.packet.Packet)> 
<android.widget.ListView: void setFooterDividersEnabled(boolean)> 
<org.jivesoftware.smackx.packet.DiscoverItems: void setNode(java.lang.String)> 
<java.util.concurrent.LinkedBlockingDeque: void writeObject(java.io.ObjectOutputStream)> 
<android.service.dreams.DreamService: void setInteractive(boolean)> 
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)> 
<android.location.GpsStatus: void setTimeToFirstFix(int)> 
<org.apache.commons.io.FileUtils: void writeByteArrayToFile(java.io.File,byte[])> 
<gov.nist.javax.sip.address.SipUri: void setHostPort(gov.nist.core.HostPort)> 
<android.media.AudioService: void broadcastVibrateSetting(int)> 
<android.widget.SimpleCursorTreeAdapter: void setViewBinder(android.widget.SimpleCursorTreeAdapter$ViewBinder)> 
<org.jivesoftware.smack.XMPPConnection: void sendHeartbeat()> 
<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])> 
<android.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)> 
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> 
<android.os.Debug: void setFieldsOn(java.lang.Class)> 
<android.widget.PopupWindow: void setSoftInputMode(int)> 
<jp.co.omronsoft.openwnn.OpenWnnEN: void updateComposingText(int)> 
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> 
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)> 
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)> 
<android.webkit.WebSettingsClassic: void setShowVisualIndicator(boolean)> 
<android.speech.tts.TextToSpeech: int setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)> 
<android.view.View: void setVisibility(int)> 
<org.apache.commons.io.filefilter.AndFileFilter: void setFileFilters(java.util.List)> 
<android.app.ActivityManagerProxy: android.app.IActivityManager$ContentProviderHolder getContentProvider(android.app.IApplicationThread,java.lang.String,int,boolean)> 
<android.hardware.input.KeyboardLayout: void writeToParcel(android.os.Parcel,int)> 
<android.telephony.CellSignalStrengthCdma: void setEvdoDbm(int)> 
<android.app.MediaRouteButton: void setVisibility(int)> 
<org.apache.commons.io.filefilter.PrefixFileFilter: boolean accept(java.io.File,java.lang.String)> 
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> 
<org.apache.xalan.templates.ElemElement: void setNamespace(org.apache.xalan.templates.AVT)> 
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> 
<javax.crypto.Cipher: int update(byte[],int,int,byte[])> 
<android.webkit.WebSettingsClassic: void setUseDoubleTree(boolean)> 
<android.widget.Switch: void setSwitchMinWidth(int)> 
<libcore.net.url.JarURLConnectionImpl: void setUseCaches(boolean)> 
<java.text.NumberFormat: java.lang.Number parse(java.lang.String)> 
<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)> 
<java.text.NumberFormat: void setMaximumFractionDigits(int)> 
<android.app.ActivityManagerProxy: void finishSubActivity(android.os.IBinder,java.lang.String,int)> 
<android.location.Address: void setAdminArea(java.lang.String)> 
<net.oauth.OAuthProblemException: void setParameter(java.lang.String,java.lang.Object)> 
<org.apache.xalan.transformer.TransformerIdentityImpl: void setErrorListener(javax.xml.transform.ErrorListener)> 
<android.content.pm.PackageCleanItem: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.Protocol: void setProtocolVersion(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setSavePassword(boolean)> 
<gov.nist.javax.sip.header.ContentDisposition: void setDispositionType(java.lang.String)> 
<org.apache.harmony.xml.dom.NodeImpl: void setNodeValue(java.lang.String)> 
<org.jivesoftware.smack.packet.DataMessage: void setPermission(java.lang.String)> 
<android.net.wifi.WifiStateMachine: boolean syncDisableNetwork(com.android.internal.util.AsyncChannel,int)> 
<android.view.View: void setRotation(float)> 
<org.apache.xpath.NodeSet: void runTo(int)> 
<android.webkit.WebViewClassic: void setMockGeolocationError(int,java.lang.String)> 
<org.apache.http.impl.conn.ProxySelectorRoutePlanner: void setProxySelector(java.net.ProxySelector)> 
<libcore.net.http.RequestHeaders: void setConnection(java.lang.String)> 
<android.filterpacks.base.GLTextureSource: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<java.net.Socket: void setSoTimeout(int)> 
<org.xmlpull.v1.sax2.Driver: void setFeature(java.lang.String,boolean)> 
<org.ccil.cowan.tagsoup.Element: void setNext(org.ccil.cowan.tagsoup.Element)> 
<android.support.v4.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<javax.xml.transform.stream.StreamSource: void setReader(java.io.Reader)> 
<android.net.wifi.p2p.WifiP2pService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.apache.xml.serializer.ToUnknownStream: void setOmitXMLDeclaration(boolean)> 
<org.apache.xpath.NodeSet: void setShouldCacheNodes(boolean)> 
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)> 
<org.apache.xpath.XPathException: void printStackTrace(java.io.PrintWriter)> 
<android.content.SyncStorageEngine: void stopSyncEvent(long,long,java.lang.String,long,long)> 
<gov.nist.javax.sip.header.RetryAfter: void setComment(java.lang.String)> 
<android.gesture.GestureOverlayView: void setGestureVisible(boolean)> 
<java.security.SecureRandom: void setSeed(long)> 
<android.animation.PropertyValuesHolder: void setFloatValues(float[])> 
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)> 
<gov.nist.javax.sip.message.SIPResponse: void setStatusCode(int)> 
<android.bluetooth.BluetoothAdapter: void setDiscoverableTimeout(int)> 
<android.view.GLES20DisplayList: void setTranslationY(float)> 
<org.apache.xpath.NodeSet: void setTail(org.w3c.dom.Node)> 
<android.filterfw.core.AsyncRunner: void setDoneCallback(android.filterfw.core.GraphRunner$OnRunnerDoneListener)> 
<org.apache.xml.dtm.ref.DTMTreeWalker: void setcontentHandler(org.xml.sax.ContentHandler)> 
<android.app.ActivityManagerProxy: java.lang.String getPackageForIntentSender(android.content.IIntentSender)> 
<android.webkit.HTML5VideoView: void setPlayerBuffering(boolean)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)> 
<android.media.audiofx.Visualizer: int setCaptureSize(int)> 
<android.webkit.CookieManager: void setAcceptCookie(boolean)> 
<javax.xml.transform.stream.StreamSource: void setSystemId(java.lang.String)> 
<gov.nist.javax.sip.header.SIPIfMatch: void setETag(java.lang.String)> 
<javax.obex.PrivateOutputStream: void write(int)> 
<android.webkit.WebViewClassic: void letPageHandleNavKey(int,long,boolean,int)> 
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setFeature(java.lang.String,boolean)> 
<org.ccil.cowan.tagsoup.CommandLine: void main(java.lang.String[])> 
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)> 
<org.apache.http.client.params.ClientParamBean: void setHandleRedirects(boolean)> 
<android.app.ActivityManagerProxy: boolean moveActivityTaskToBack(android.os.IBinder,boolean)> 
<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)> 
<android.view.accessibility.AccessibilityEvent: void writeAccessibilityRecordToParcel(android.view.accessibility.AccessibilityRecord,android.os.Parcel,int)> 
<android.net.nsd.NsdManager: void discoverServices(java.lang.String,int,android.net.nsd.NsdManager$DiscoveryListener)> 
<android.net.wifi.WifiStateMachine: void setCountryCode(java.lang.String,boolean)> 
<android.view.GLES20DisplayList: void setTranslationX(float)> 
<org.apache.xalan.transformer.XalanTransformState: void setCurrentNode(org.w3c.dom.Node)> 
<java.lang.HexStringParser: float parseFloat(java.lang.String)> 
<android.widget.PopupMenu: void setOnMenuItemClickListener(android.widget.PopupMenu$OnMenuItemClickListener)> 
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])> 
<android.net.DnsPinger: void log(java.lang.String)> 
<gov.nist.javax.sip.header.To: void setTag(java.lang.String)> 
<gov.nist.javax.sip.DialogFilter: void sendBadRequestResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction,java.lang.String)> 
<org.apache.commons.io.filefilter.DelegateFileFilter: boolean accept(java.io.File,java.lang.String)> 
<org.apache.xpath.functions.FuncFalse: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<org.apache.xml.serializer.SerializerBase: void setDoctypeSystem(java.lang.String)> 
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> 
<javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)> 
<android.webkit.WebViewClassic: int findAllBody(java.lang.String,boolean)> 
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)> 
<android.text.TextLine: float drawRun(android.graphics.Canvas,int,int,boolean,float,int,int,int,boolean)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setExpiryDate(java.util.Date)> 
<android.webkit.WebSettingsClassic: void setXSSAuditorEnabled(boolean)> 
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)> 
<android.view.ViewStub: void setVisibility(int)> 
<android.server.search.SearchManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<javax.crypto.CipherOutputStream: void write(byte[],int,int)> 
<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> 
<android.media.AudioManager: void setMode(int)> 
<dalvik.system.VMDebug: void dumpHprofData(java.lang.String)> 
<android.opengl.GLSurfaceView: void setRenderMode(int)> 
<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)> 
<android.webkit.WebSettings: void setAppCacheMaxSize(long)> 
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)> 
<android.util.ReflectiveProperty: void set(java.lang.Object,java.lang.Object)> 
<android.hardware.input.InputManager: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)> 
<gov.nist.core.GenericObject: void setMatcher(gov.nist.core.Match)> 
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)> 
<org.ccil.cowan.tagsoup.PYXWriter: void aname(char[],int,int)> 
<org.apache.harmony.xnet.provider.jsse.CertificateRequest: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<java.util.logging.Logger: void log(java.util.logging.LogRecord)> 
<android.widget.AutoCompleteTextView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> 
<android.support.v4.view.ViewCompatJB: void setHasTransientState(android.view.View,boolean)> 
<org.apache.xalan.templates.Stylesheet: void setVariable(org.apache.xalan.templates.ElemVariable)> 
<android.database.sqlite.SQLiteDebug: void dump(android.util.Printer,java.lang.String[])> 
<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)> 
<android.app.StatusBarManager: void setIcon(java.lang.String,int,int,java.lang.String)> 
<org.apache.xalan.processor.WhitespaceInfoPaths: void setElements(java.util.Vector)> 
<libcore.io.IoUtils: java.lang.UnsafeByteSequence readFileAsBytes(java.lang.String)> 
<android.widget.TextView: void setMarqueeRepeatLimit(int)> 
<java.text.DecimalFormatSymbols: void setCurrency(java.util.Currency)> 
<android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)> 
<android.app.AlarmManager: void setTime(long)> 
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)> 
<org.apache.xml.serializer.ToStream: void notationDecl(java.lang.String,java.lang.String,java.lang.String)> 
<android.media.AudioService: void dumpRCStack(java.io.PrintWriter)> 
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> 
<android.widget.Switch: void setThumbTextPadding(int)> 
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)> 
<org.apache.xpath.jaxp.XPathExpressionImpl: void setXPath(org.apache.xpath.XPath)> 
<gov.nist.javax.sip.message.SIPMessage: void setMaxForwards(javax.sip.header.MaxForwardsHeader)> 
<javax.xml.parsers.DocumentBuilderFactory: void setCoalescing(boolean)> 
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)> 
<android.text.style.StyleSpan: void writeToParcel(android.os.Parcel,int)> 
<org.apache.commons.logging.impl.SimpleLog: void log(int,java.lang.Object,java.lang.Throwable)> 
<org.apache.harmony.security.x509.Extensions: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<org.apache.xalan.templates.ElemMessage: void setTerminate(boolean)> 
<android.app.ActivityOptions: void update(android.app.ActivityOptions)> 
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)> 
<android.location.GpsSatellite: void setStatus(android.location.GpsSatellite)> 
<org.javia.arity.Token: org.javia.arity.Token setValue(double)> 
<java.util.zip.ZipOutputStream: void setMethod(int)> 
<org.apache.xml.utils.UnImplNode: void setNodeValue(java.lang.String)> 
<libcore.net.http.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)> 
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)> 
<org.apache.xalan.transformer.TransformerImpl: void setTransformThread(java.lang.Thread)> 
<java.util.zip.ZipEntry: void setComment(java.lang.String)> 
<android.media.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.apache.harmony.security.x509.IssuingDistributionPoint: void setOnlyContainsAttributeCerts(boolean)> 
<java.security.cert.X509CertSelector: void setPathToNames(java.util.Collection)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.lang.String,int)> 
<android.app.SearchDialog: void setWorking(boolean)> 
<android.media.JetPlayer: boolean setMuteFlag(int,boolean,boolean)> 
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> 
<java.net.ProxySelector: void setDefault(java.net.ProxySelector)> 
<android.content.pm.PackageParser: boolean parseApplication(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[])> 
<android.app.ApplicationThreadProxy: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)> 
<android.content.pm.LabeledIntent: void writeToParcel(android.os.Parcel,int)> 
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)> 
<android.content.pm.PackageParser: boolean parseProviderTags(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.pm.PackageParser$Provider,java.lang.String[])> 
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)> 
<android.telephony.CellInfoLte: void setCellSignalStrength(android.telephony.CellSignalStrengthLte)> 
<android.graphics.drawable.ClipDrawable: boolean setVisible(boolean,boolean)> 
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)> 
<gov.nist.javax.sip.address.AddressImpl: void setDisplayName(java.lang.String)> 
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker,android.renderscript.Element,int[])> 
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.XMPPConnection: void setDefaultAccountId(long)> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: void setDictionary(jp.co.omronsoft.openwnn.WnnDictionary)> 
<javax.obex.ServerRequestHandler: void setConnectionId(long)> 
<android.graphics.drawable.ColorDrawable: void setColor(int)> 
<gov.nist.javax.sip.header.Organization: void setOrganization(java.lang.String)> 
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)> 
<org.apache.xpath.functions.FuncContains: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setFocusable(java.lang.Object,boolean)> 
<android.content.ContentProviderProxy: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> 
<android.server.search.Searchables: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.app.ActivityManagerProxy: void finishInstrumentation(android.app.IApplicationThread,int,android.os.Bundle)> 
<android.content.ContentProviderProxy: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.ICancellationSignal)> 
<java.util.concurrent.atomic.AtomicStampedReference: void set(java.lang.Object,int)> 
<java.net.Socket: void setSendBufferSize(int)> 
<android.app.ActivityThread: void handleDumpService(android.app.ActivityThread$DumpComponentInfo)> 
<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void setCoalescing(boolean)> 
<java.util.SimpleTimeZone: void setStartYear(int)> 
<org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String)> 
<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)> 
<android.view.HardwareRenderer: void setEnabled(boolean)> 
<org.apache.xpath.functions.FuncRound: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.accounts.AccountManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.view.View: void setScaleY(float)> 
<android.view.View: void setScaleX(float)> 
<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: void setUserTokenHandler(org.apache.http.client.UserTokenHandler)> 
<android.filterfw.core.GLFrame: void setFloats(float[])> 
<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)> 
<android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])> 
<gov.nist.javax.sip.header.ims.PUserDatabase: void setValue(java.lang.String)> 
<org.apache.xml.utils.UnImplNode: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)> 
<org.apache.http.client.methods.HttpRequestBase: void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger)> 
<gov.nist.javax.sip.header.extensions.Join: void setFromTag(java.lang.String)> 
<org.apache.james.mime4j.message.Message: void writeTo(java.io.OutputStream)> 
<android.graphics.drawable.ShapeDrawable: void setIntrinsicHeight(int)> 
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)> 
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> 
<org.apache.xpath.patterns.StepPattern: void setExpression(org.apache.xpath.Expression)> 
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> 
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> 
<android.support.v4.view.ViewPager: void setCurrentItem(int,boolean)> 
<android.support.v4.view.ViewCompatHC: void setLayerType(android.view.View,int,android.graphics.Paint)> 
<javax.obex.ClientSession: boolean sendRequest(int,byte[],javax.obex.HeaderSet,javax.obex.PrivateInputStream)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void setSourceLocation()> 
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)> 
<android.widget.AbsSeekBar: void setMax(int)> 
<org.apache.xml.utils.DefaultErrorHandler: void error(javax.xml.transform.TransformerException)> 
<android.webkit.WebViewCore: void sendPluginDrawMsg()> 
<android.widget.TableRow: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> 
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)> 
<org.apache.xpath.axes.FilterExprIteratorSimple: org.apache.xpath.objects.XNodeSet executeFilterExpr(int,org.apache.xpath.XPathContext,org.apache.xml.utils.PrefixResolver,boolean,int,org.apache.xpath.Expression)> 
<android.widget.ImageSwitcher: void setImageDrawable(android.graphics.drawable.Drawable)> 
<android.graphics.Paint: float getTextRunAdvances(java.lang.CharSequence,int,int,int,int,int,float[],int,int)> 
<android.webkit.CallbackProxy: android.webkit.WebResourceResponse shouldInterceptRequest(java.lang.String)> 
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)> 
<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)> 
<org.apache.xpath.operations.Variable: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,boolean)> 
<android.inputmethodservice.KeyboardView: void setProximityCorrectionEnabled(boolean)> 
<android.gesture.GestureOverlayView: void setOrientation(int)> 
<org.xml.sax.helpers.XMLFilterImpl: void setProperty(java.lang.String,java.lang.Object)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean: void setSource(java.lang.Object,android.view.View,int)> 
<org.apache.commons.io.CopyUtils: void copy(byte[],java.io.Writer,java.lang.String)> 
<org.apache.xalan.templates.Stylesheet: void setLocaterInfo(javax.xml.transform.SourceLocator)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setThreadPoolSize(int)> 
<android.webkit.WebViewClassic: void setHorizontalScrollbarOverlay(boolean)> 
<android.os.UpdateLock: void setReferenceCounted(boolean)> 
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> 
<org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> 
<gov.nist.javax.sip.parser.StringMsgParser: gov.nist.javax.sip.address.SipUri parseSIPUrl(java.lang.String)> 
<android.widget.RemoteViews: void setEmptyView(int,int)> 
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)> 
<android.speech.tts.TtsEngines: void updateLocalePrefForEngine(java.lang.String,java.lang.String)> 
<org.ccil.cowan.tagsoup.PYXWriter: void setDocumentLocator(org.xml.sax.Locator)> 
<java.net.DatagramPacket: void setData(byte[])> 
<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)> 
<android.net.MobileDataStateTracker: boolean setRadio(boolean)> 
<android.app.ActivityManagerProxy: void crashApplication(int,int,java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.SASLAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<java.text.ParsePosition: void setIndex(int)> 
<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: void engineUpdate(byte[],int,int)> 
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> 
<org.apache.xalan.templates.ElemExsltFunction: void execute(org.apache.xalan.transformer.TransformerImpl,org.apache.xpath.objects.XObject[])> 
<android.gesture.GestureOverlayView: void setGestureStrokeAngleThreshold(float)> 
<android.content.pm.PackageParser: void setCompatibilityModeEnabled(boolean)> 
<android.view.textservice.SpellCheckerSubtype: void writeToParcel(android.os.Parcel,int)> 
<android.text.style.LocaleSpan: void writeToParcel(android.os.Parcel,int)> 
<android.net.wifi.p2p.WifiP2pWfdInfo: boolean setDeviceType(int)> 
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)> 
<android.widget.Switch: void setTrackDrawable(android.graphics.drawable.Drawable)> 
<org.apache.commons.io.output.TeeOutputStream: void write(int)> 
<android.webkit.ZoomManager: void setZoomScale(float,boolean,boolean)> 
<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])> 
<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)> 
<android.media.RemoteControlClient: void setPlaybackInformation(int,int)> 
<org.apache.xpath.functions.FuncGenerateId: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.widget.AdapterViewAnimator: void setRemoteViewsOnClickHandler(android.widget.RemoteViews$OnClickHandler)> 
<org.xml.sax.helpers.AttributeListImpl: void setAttributeList(org.xml.sax.AttributeList)> 
<android.filterfw.GraphEnvironment: android.filterfw.core.GraphRunner getRunner(int,int)> 
<android.app.Dialog: void setCancelable(boolean)> 
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)> 
<org.jivesoftware.smackx.packet.VCard: void setNickName(java.lang.String)> 
<android.graphics.Matrix: void setScale(float,float,float,float)> 
<android.nfc.NfcActivityManager: void setOnNdefPushCompleteCallback(android.app.Activity,android.nfc.NfcAdapter$OnNdefPushCompleteCallback)> 
<org.apache.xml.serializer.SerializerTraceWriter: void write(java.lang.String)> 
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setScrollable(boolean)> 
<gov.nist.javax.sip.address.SipUri: void setQHeader(gov.nist.core.NameValue)> 
<android.animation.PropertyValuesHolder: void setAnimatedValue(java.lang.Object)> 
<android.view.ViewRootImpl: void setDragFocus(android.view.View)> 
<android.view.accessibility.AccessibilityRecord: void setConnectionId(int)> 
<org.apache.xpath.operations.And: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.webkit.AccessibilityInjector: boolean handleKeyEventIfNecessary(android.view.KeyEvent)> 
<android.support.v4.view.ViewPager: void setOffscreenPageLimit(int)> 
<android.renderscript.RenderScript: void setMessageHandler(android.renderscript.RenderScript$RSMessageHandler)> 
<gov.nist.javax.sip.header.ContentType: void setContentSubType(java.lang.String)> 
<android.preference.Preference: void setDependency(java.lang.String)> 
<android.text.format.Time: boolean parse(java.lang.String)> 
<android.text.method.QwertyKeyListener: java.lang.String getReplacement(java.lang.CharSequence,int,int,android.view.View)> 
<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)> 
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)> 
<org.jivesoftware.smack.packet.DataMessage: void setCategory(java.lang.String)> 
<android.graphics.Path: void setLastPoint(float,float)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setScheme(java.lang.String)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeThreadEvent(dalvik.system.profiler.HprofData$ThreadEvent)> 
<org.apache.harmony.xml.dom.ElementImpl: void setIdAttributeNode(org.w3c.dom.Attr,boolean)> 
<org.apache.xpath.axes.FilterExprIterator: void setRoot(int,java.lang.Object)> 
<android.app.ActivityManager: boolean isUserRunning(int)> 
<android.nfc.tech.IsoDep: void setTimeout(int)> 
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)> 
<android.test.TestRunner: void run(java.lang.String)> 
<android.widget.Scroller: void setFriction(float)> 
<android.widget.SearchView: void setOnSuggestionListener(android.widget.SearchView$OnSuggestionListener)> 
<gov.nist.javax.sip.stack.SIPTransaction: void setApplicationData(java.lang.Object)> 
<android.view.animation.AnimationSet: void setStartTime(long)> 
<org.apache.xalan.templates.ElemTextLiteral: void setPreserveSpace(boolean)> 
<android.os.CommonClock: void setServerDiedListener(android.os.CommonClock$OnServerDiedListener)> 
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> 
<android.content.SyncStorageEngine: void setDelayUntilTime(android.accounts.Account,int,java.lang.String,long)> 
<android.os.BatteryStats: void dumpLocked(java.io.PrintWriter,java.lang.String,int,int)> 
<android.os.CommonTimeConfig: int setClientSyncInterval(int)> 
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int)> 
<android.webkit.CallbackProxy: void setWebBackForwardListClient(android.webkit.WebBackForwardListClient)> 
<android.support.v13.app.FragmentPagerAdapter: void startUpdate(android.view.ViewGroup)> 
<gov.nist.javax.sip.ListeningPointImpl: void setSipProvider(gov.nist.javax.sip.SipProviderImpl)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setPassword(boolean)> 
<org.apache.xpath.NodeSetDTM: void setCurrentPos(int)> 
<android.content.DefaultDataHandler: void insert(android.content.ContentResolver,java.lang.String)> 
<android.view.View: void setTag(java.lang.Object)> 
<java.net.Socket: void setReceiveBufferSize(int)> 
<org.apache.xml.utils.URI: void setScheme(java.lang.String)> 
<java.util.Date: void setSeconds(int)> 
<android.content.Intent: void setAllowFds(boolean)> 
<android.webkit.WebSettingsClassic: void setSyntheticLinksEnabled(boolean)> 
<gov.nist.javax.sip.message.SIPDuplicateHeaderException: void setSIPMessage(gov.nist.javax.sip.message.SIPMessage)> 
<android.widget.AutoCompleteTextView: boolean setFrame(int,int,int,int)> 
<java.io.OutputStream: void write(byte[])> 
<android.widget.Editor: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)> 
<android.hardware.usb.UsbManager: void setMassStorageBackingFile(java.lang.String)> 
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> 
<android.app.ActivityManagerProxy: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)> 
<javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)> 
<android.widget.SimpleCursorTreeAdapter: void setViewText(android.widget.TextView,java.lang.String)> 
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)> 
<gov.nist.javax.sip.stack.SIPTransaction: void setRetransmitTimer(int)> 
<java.text.StringCharacterIterator: char setIndex(int)> 
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> 
<android.location.Location: void setExtraLocation(java.lang.String,android.location.Location)> 
<android.media.MediaRecorder: void setOutputFile(java.lang.String)> 
<gov.nist.javax.sip.address.TelURLImpl: void setPhoneContext(java.lang.String)> 
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> 
<android.webkit.AccessibilityInjectorFallback: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> 
<org.apache.xml.utils.URI: void setFragment(java.lang.String)> 
<gov.nist.javax.sip.header.ims.PPreferredService: void setValue(java.lang.String)> 
<android.webkit.WebViewClassic: void setLayerType(int,android.graphics.Paint)> 
<org.xml.sax.helpers.XMLFilterImpl: void parse(java.lang.String)> 
<org.apache.xpath.functions.FunctionMultiArgs: void setArg(org.apache.xpath.Expression,int)> 
<android.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)> 
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)> 
<android.net.nsd.NsdServiceInfo: void setServiceName(java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setAuthority(gov.nist.javax.sip.address.Authority)> 
<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setUseClientMode(boolean)> 
<org.apache.harmony.xml.ExpatParser: void parseDocument(java.io.InputStream)> 
<java.util.SimpleTimeZone: void setRawOffset(int)> 
<android.view.VolumePanel: void postRemoteVolumeChanged(int,int)> 
<gov.nist.javax.sip.header.ims.Privacy: void setPrivacy(java.lang.String)> 
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)> 
<libcore.icu.NativeDecimalFormat: void setMinimumIntegerDigits(int)> 
<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledCipherSuites(int,java.lang.String[])> 
<org.apache.xpath.VariableStack: void setLocalVariable(int,org.apache.xpath.objects.XObject)> 
<android.webkit.WebSettingsClassic: void setDefaultFontSize(int)> 
<org.apache.xml.serializer.ToHTMLStream: void setOutputFormat(java.util.Properties)> 
<android.view.accessibility.AccessibilityEvent: void setEventType(int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompat: void setParent(android.view.View)> 
<android.net.http.RequestHandle: void setRedirectCount(int)> 
<android.app.ActivityManagerProxy: long[] getProcessPss(int[])> 
<java.util.ArrayDeque: void writeObject(java.io.ObjectOutputStream)> 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)> 
<gov.nist.javax.sip.header.AuthenticationInfo: void setCNonce(java.lang.String)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeRecordHeader(dalvik.system.profiler.BinaryHprof$Tag,int,int)> 
<org.apache.commons.io.output.NullOutputStream: void write(byte[])> 
<android.os.Parcel: void writeMapInternal(java.util.Map)> 
<android.preference.TwoStatePreference: void sendAccessibilityEvent(android.view.View)> 
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)> 
<android.support.v4.content.CursorLoader: void setSortOrder(java.lang.String)> 
<android.support.v4.view.GestureDetectorCompat: void setIsLongpressEnabled(boolean)> 
<java.util.Calendar: void setMinimalDaysInFirstWeek(int)> 
<android.webkit.WebIconDatabase: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> 
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> 
<android.media.AudioService: void setVibrateSetting(int,int)> 
<org.apache.harmony.xml.dom.ElementImpl: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)> 
<org.apache.xml.utils.UnImplNode: void setIdAttribute(boolean)> 
<java.sql.Time: void setMonth(int)> 
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)> 
<org.jivesoftware.smack.packet.DataMessage: void setPkgSignature(java.lang.String)> 
<android.text.BoringLayout: android.text.BoringLayout replaceOrMake(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)> 
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> 
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)> 
<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int)> 
<android.widget.Toast: void setText(java.lang.CharSequence)> 
<org.apache.xalan.templates.ElemLiteralResult: void setLocalName(java.lang.String)> 
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)> 
<android.webkit.GeolocationService: void setEnableGps(boolean)> 
<android.app.ActivityManagerProxy: android.graphics.Bitmap getTaskTopThumbnail(int)> 
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)> 
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)> 
<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,org.w3c.dom.Node,org.apache.xml.utils.QName,org.xml.sax.ContentHandler)> 
<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])> 
<java.util.logging.LogRecord: void setSourceClassName(java.lang.String)> 
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream)> 
<org.apache.http.impl.AbstractHttpClientConnection: void init(org.apache.http.io.SessionInputBuffer,org.apache.http.io.SessionOutputBuffer,org.apache.http.params.HttpParams)> 
<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.ims.PAssociatedURI: void setAssociatedURI(javax.sip.address.URI)> 
<android.graphics.Bitmap: void setLayoutBounds(int[])> 
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)> 
<android.view.ContextThemeWrapper: void setTheme(int)> 
<jp.co.omronsoft.openwnn.EN.DefaultSoftKeyboardEN: void setPreferences(android.content.SharedPreferences,android.view.inputmethod.EditorInfo)> 
<org.apache.xml.serializer.ToHTMLStream: void cdata(char[],int,int)> 
<android.app.ActivityManagerProxy: java.util.List getServices(int,int)> 
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> 
<android.text.Layout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)> 
<android.webkit.SslCertLookupTable: void setIsAllowed(android.net.http.SslError)> 
<android.os.Parcel: void writeByteArray(byte[])> 
<org.jivesoftware.smack.packet.Packet: void setPacketID(java.lang.String)> 
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState)> 
<java.util.MapEntry: java.lang.Object setValue(java.lang.Object)> 
<android.webkit.WebViewClassic: void setNewPicture(android.webkit.WebViewCore$DrawData,boolean)> 
<java.lang.ThreadLocal: void set(java.lang.Object)> 
<java.sql.Timestamp: void setTime(long)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setFocused(java.lang.Object,boolean)> 
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int,int)> 
<org.apache.james.mime4j.message.Entity: void setHeader(org.apache.james.mime4j.message.Header)> 
<java.security.cert.X509CertSelector: void setCertificateValid(java.util.Date)> 
<android.location.Location: void setSpeed(float)> 
<gov.nist.javax.sip.header.extensions.Join: void setCallId(java.lang.String)> 
<android.widget.Editor: void sendOnTextChanged(int,int)> 
<android.webkit.HTML5Audio: void setDataSource(java.lang.String)> 
<android.renderscript.Script: void setVar(int,double)> 
<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setPerMille(char)> 
<java.util.logging.StreamHandler: void setEncoding(java.lang.String)> 
<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)> 
<android.view.GLES20DisplayList: void setRotation(float)> 
<org.apache.xalan.transformer.TransformerImpl: void setOutputProperties(java.util.Properties)> 
<dalvik.system.profiler.BinaryHprofWriter: int writeLoadClass(java.lang.String)> 
<android.view.ViewDebug: boolean dumpViewWithProperties(android.content.Context,android.view.View,java.io.BufferedWriter,int)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: java.lang.String getUnparsedEntityURI(java.lang.String)> 
<android.widget.CalendarView: void setMinDate(long)> 
<java.security.cert.X509CertSelector: void setIssuer(javax.security.auth.x500.X500Principal)> 
<org.apache.commons.logging.impl.LogFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> 
<java.security.Identity: void setInfo(java.lang.String)> 
<android.webkit.WebSettings: void setDefaultFontSize(int)> 
<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject executeRelativePathPattern(org.apache.xpath.XPathContext,org.apache.xml.dtm.DTM,int)> 
<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)> 
<android.bluetooth.BluetoothDevice: boolean setAlias(java.lang.String)> 
<android.support.v13.app.FragmentPagerAdapter: void finishUpdate(android.view.ViewGroup)> 
<android.content.ContentProvider: void setReadPermission(java.lang.String)> 
<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)> 
<android.view.GLES20DisplayList: void setBottom(int)> 
<android.filterfw.core.Filter: void fieldPortValueUpdated(java.lang.String,android.filterfw.core.FilterContext)> 
<org.apache.xml.dtm.ref.dom2dtm.DOM2DTM: java.lang.String getUnparsedEntityURI(java.lang.String)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setDocumentLocator(org.xml.sax.Locator)> 
<java.util.Date: void setMinutes(int)> 
<org.jivesoftware.smack.packet.Presence: void setType(org.jivesoftware.smack.packet.Presence$Type)> 
<org.apache.xalan.templates.ElemNumber: void setGroupingSeparator(org.apache.xalan.templates.AVT)> 
<java.util.Date: void setHours(int)> 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setAccessType(java.lang.String)> 
<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringComments(boolean)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setMaxConnections(int)> 
<android.renderscript.Matrix2f: void set(int,int,float)> 
<android.app.backup.BackupDataOutput: void setKeyPrefix(java.lang.String)> 
<org.apache.james.mime4j.field.address.parser.AddressListParser: void log(java.lang.String)> 
<android.app.ContextImpl: void setWallpaper(android.graphics.Bitmap)> 
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)> 
<android.view.inputmethod.InputConnectionWrapper: boolean setSelection(int,int)> 
<android.net.wifi.SupplicantStateTracker: void sendSupplicantStateChangedBroadcast(android.net.wifi.SupplicantState,boolean)> 
<android.net.CaptivePortalTracker: void detectCaptivePortal(android.net.NetworkInfo)> 
<android.view.ViewPropertyAnimator: void setValue(int,float)> 
<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)> 
<android.sax.Element: void setEndTextElementListener(android.sax.EndTextElementListener)> 
<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String,java.lang.String)> 
<android.view.View: void setTranslationY(float)> 
<android.view.View: void setTranslationX(float)> 
<android.app.ProgressDialog: void setIndeterminate(boolean)> 
<org.ccil.cowan.tagsoup.XMLWriter: void writeEsc(char[],int,int,boolean)> 
<android.renderscript.Matrix4f: void set(int,int,float)> 
<android.view.View: void setImportantForAccessibility(int)> 
<java.util.zip.Inflater: void setDictionary(byte[],int,int)> 
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener,boolean)> 
<java.net.Socks4Message: void setUserId(java.lang.String)> 
<android.database.sqlite.SQLiteQueryBuilder: void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)> 
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> 
<android.widget.TableLayout: void setColumnStretchable(int,boolean)> 
<android.app.ContextImpl: void setTheme(int)> 
<android.renderscript.ScriptIntrinsicLUT: void setGreen(int,int)> 
<org.apache.xml.utils.UnImplNode: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)> 
<android.renderscript.Matrix3f: void set(int,int,float)> 
<android.net.MobileDataStateTracker: void setPolicyDataEnable(boolean)> 
<org.apache.xpath.operations.Variable: void setQName(org.apache.xml.utils.QName)> 
<java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)> 
<android.inputmethodservice.KeyboardView: void setPreviewEnabled(boolean)> 
<android.media.audiofx.AudioEffect: int setEnabled(boolean)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setKeyboard(jp.co.omronsoft.openwnn.Keyboard)> 
<org.apache.http.entity.SerializableEntity: void createBytes(java.io.Serializable)> 
<gov.nist.javax.sip.stack.SIPDialog: void setState(int)> 
<android.widget.TextView: void setHeight(int)> 
<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)> 
<gov.nist.javax.sip.address.SipUri: void setUserPassword(java.lang.String)> 
<jp.co.omronsoft.openwnn.Keyboard: void setHorizontalGap(int)> 
<android.preference.MultiCheckPreference: void setEntryValues(java.lang.String[])> 
<android.media.AudioService: void dumpRCCStack(java.io.PrintWriter)> 
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)> 
<android.support.v4.view.PagerTabStrip: void setPadding(int,int,int,int)> 
<org.apache.http.impl.client.AbstractHttpClient: void setParams(org.apache.http.params.HttpParams)> 
<android.net.NetworkPolicyManager: void setRestrictBackground(boolean)> 
<org.xmlpull.v1.sax2.Driver: void setProperty(java.lang.String,java.lang.Object)> 
<android.view.animation.AnimationSet: void setDuration(long)> 
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> 
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> 
<android.support.v4.app.BackStackRecord: android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)> 
<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])> 
<android.view.KeyEvent: void setSource(int)> 
<org.apache.http.entity.BufferedHttpEntity: void writeTo(java.io.OutputStream)> 
<org.apache.http.conn.params.ConnRouteParams: void setForcedRoute(org.apache.http.params.HttpParams,org.apache.http.conn.routing.HttpRoute)> 
<android.net.wifi.p2p.WifiP2pManager: void deletePersistentGroup(android.net.wifi.p2p.WifiP2pManager$Channel,int,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setChallenge(gov.nist.javax.sip.header.Challenge)> 
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)> 
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)> 
<android.app.ActivityManagerProxy: int checkPermission(java.lang.String,int,int)> 
<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void setRecordProtocol(org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol)> 
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> 
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)> 
<org.apache.xml.serializer.ToHTMLStream: void processingInstruction(java.lang.String,java.lang.String)> 
<android.location.LocationRequest: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.Challenge: void setAuthParams(gov.nist.core.NameValueList)> 
<android.app.ActivityManagerProxy: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> 
<android.widget.ListPopupWindow: void setHorizontalOffset(int)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setChecked(java.lang.Object,boolean)> 
<android.net.UrlQuerySanitizer: void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer$ValueSanitizer)> 
<org.apache.harmony.xml.dom.DOMConfigurationImpl: boolean canSetParameter(java.lang.String,java.lang.Object)> 
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)> 
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)> 
<android.location.Location: void setAccuracy(float)> 
<org.apache.xpath.functions.FuncNamespace: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<java.io.ObjectStreamField: void setOffset(int)> 
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)> 
<android.service.dreams.DreamService: void setLowProfile(boolean)> 
<org.jivesoftware.smack.packet.Packet: void setFrom(java.lang.String)> 
<android.app.ActivityManagerProxy: boolean switchUser(int)> 
<gov.nist.javax.sip.header.AuthenticationInfo: void setParameter(java.lang.String,java.lang.String)> 
<android.widget.ListPopupWindow: void setAnchorView(android.view.View)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setRemovedCount(int)> 
<java.util.Date: void setDate(int)> 
<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)> 
<android.support.v4.app.BackStackState: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> 
<libcore.io.BlockGuardOs: int pread(java.io.FileDescriptor,byte[],int,int,long)> 
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> 
<android.webkit.WebViewClassic: void setFocusControllerActive(boolean)> 
<gov.nist.javax.sip.message.SIPMessage: void setCSeq(javax.sip.header.CSeqHeader)> 
<gov.nist.javax.sip.parser.PipelinedMsgParser: void setMessageListener(gov.nist.javax.sip.parser.SIPMessageListener)> 
<org.jivesoftware.smackx.provider.SimpleVCardProvider: void log(java.lang.String)> 
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView$Validator)> 
<android.test.mock.MockContext: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> 
<org.apache.xalan.processor.XSLTElementProcessor: void setElemDef(org.apache.xalan.processor.XSLTElementDef)> 
<android.webkit.ClientCertRequestHandler: void setSslClientCertFromCtx(int,byte[][])> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setSendUdpBufferSize(int)> 
<java.security.SecureRandom: void setSeed(byte[])> 
<android.support.v4.content.ModernAsyncTask: void onPostExecute(java.lang.Object)> 
<android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)> 
<android.webkit.CallbackProxy: boolean onJsConfirm(java.lang.String,java.lang.String)> 
<android.widget.Gallery: void setSpacing(int)> 
<android.app.ActivityManagerProxy: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)> 
<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)> 
<android.app.ApplicationThreadProxy: void updateTimeZone()> 
<android.os.Debug: int setGlobalAllocationLimit(int)> 
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)> 
<android.location.LocationManager: boolean sendNiResponse(int,int)> 
<android.telephony.ServiceState: void setRoaming(boolean)> 
<android.util.JsonReader: void setLenient(boolean)> 
<org.apache.xalan.transformer.TransformerImpl: void setParameter(java.lang.String,java.lang.Object)> 
<org.apache.commons.io.output.LockableFileWriter: void write(java.lang.String,int,int)> 
<org.apache.xalan.templates.Stylesheet: void setInclude(org.apache.xalan.templates.Stylesheet)> 
<gov.nist.core.ParserCore: void dbg_leave(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setHostname(java.lang.String)> 
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])> 
<org.apache.commons.io.IOUtils: long copyLarge(java.io.InputStream,java.io.OutputStream)> 
<android.test.mock.MockCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> 
<android.webkit.HTML5VideoViewProxy: void handleMessage(android.os.Message)> 
<android.speech.srec.WaveHeader: android.speech.srec.WaveHeader setNumBytes(int)> 
<java.beans.PropertyChangeEvent: void setPropagationId(java.lang.Object)> 
<dalvik.system.profiler.BinaryHprofWriter: void writeStopThread(dalvik.system.profiler.HprofData$ThreadEvent)> 
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> 
<android.graphics.Point: void set(int,int)> 
<gov.nist.javax.sip.header.AllowEvents: void setEventType(java.lang.String)> 
<org.apache.http.cookie.CookieSpecRegistry: void setItems(java.util.Map)> 
<gov.nist.javax.sip.header.Via: void setComment(java.lang.String)> 
<org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> 
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])> 
<android.mtp.MtpPropertyList: void setResult(int)> 
<java.util.Vector: void setSize(int)> 
<org.apache.harmony.xml.ExpatReader: void setNamespaceProcessingEnabled(boolean)> 
<android.animation.ValueAnimator: void setFloatValues(float[])> 
<org.apache.xpath.axes.NodeSequence: void runTo(int)> 
<org.apache.james.mime4j.field.address.parser.AddressListParser: void main(java.lang.String[])> 
<android.animation.AnimatorSet: android.animation.Animator setDuration(long)> 
<gov.nist.javax.sip.stack.SIPDialog: void setLocalSequenceNumber(long)> 
<org.apache.xalan.processor.XSLTElementDef: void setLastOrder(int)> 
<android.media.AudioManager: void setMicrophoneMute(boolean)> 
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> 
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,java.lang.String)> 
<java.text.NumberFormat: void setMinimumIntegerDigits(int)> 
<org.apache.http.impl.client.AbstractHttpClient: void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry)> 
<org.xml.sax.ext.Locator2Impl: void setEncoding(java.lang.String)> 
<android.webkit.WebView: void setFindListener(android.webkit.WebView$FindListener)> 
<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)> 
<android.text.style.TypefaceSpan: void updateDrawState(android.text.TextPaint)> 
<java.text.DecimalFormat: void setMultiplier(int)> 
<org.apache.http.protocol.HttpRequestHandlerRegistry: void setHandlers(java.util.Map)> 
<android.net.http.Headers: void setLocation(java.lang.String)> 
<android.view.ViewStub: void setInflatedId(int)> 
<android.app.MediaRouteButton: void setExtendedSettingsClickListener(android.view.View$OnClickListener)> 
<org.apache.xpath.functions.FuncNormalizeSpace: void executeCharsToContentHandler(org.apache.xpath.XPathContext,org.xml.sax.ContentHandler)> 
<android.app.ActivityManagerProxy: void setDebugApp(java.lang.String,boolean,boolean)> 
<android.widget.LinearLayout: void setWeightSum(float)> 
<org.apache.http.impl.cookie.RFC2109Spec: java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin)> 
<android.view.ViewGroup: void setPersistentDrawingCache(int)> 
<android.content.Intent: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xpath.operations.UnaryOperation: void setRight(org.apache.xpath.Expression)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setNotMatchingDomainCheckEnabled(boolean)> 
<libcore.net.http.HttpsURLConnectionImpl: void setUseCaches(boolean)> 
<org.apache.xalan.processor.StylesheetHandler: void setSystemId(java.lang.String)> 
<org.apache.xalan.templates.ElemUse: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.net.http.HttpAuthHeader: void parseParameter(java.lang.String,java.lang.String)> 
<android.graphics.drawable.RotateDrawable: void setAlpha(int)> 
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)> 
<android.widget.AdapterViewAnimator: void setDisplayedChild(int,boolean)> 
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<android.webkit.WebSettingsClassic: void setCursiveFontFamily(java.lang.String)> 
<android.test.AndroidTestRunner: void setContext(android.content.Context)> 
<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)> 
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)> 
<android.util.DayOfMonthCursor: void setSelectedDayOfMonth(int)> 
<android.os.PerformanceCollector: void addMeasurement(java.lang.String,long)> 
<java.lang.StringBuffer: void setLength(int)> 
<android.media.AudioService: void sendVolumeUpdateToRemote(int,int)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setStackName(java.lang.String)> 
<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.dtm.DTM,int)> 
<android.webkit.HTML5Audio: void onBufferingUpdate(android.media.MediaPlayer,int)> 
<java.util.zip.InflaterOutputStream: void write(int)> 
<android.net.wifi.WifiStateMachine: void setWifiState(int)> 
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int)> 
<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)> 
<android.app.ActivityManagerProxy: void updatePersistentConfiguration(android.content.res.Configuration)> 
<gov.nist.javax.sip.header.AuthenticationInfo: void setResponse(java.lang.String)> 
<org.jivesoftware.smack.util.Cache: void setMaxLifetime(long)> 
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> 
<gov.nist.javax.sip.header.Allow: void setMethod(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()> 
<android.app.ActivityManagerProxy: void activitySlept(android.os.IBinder)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setPreviewEnabled(boolean)> 
<android.content.pm.PackageParser: android.content.pm.PackageParser$Activity parseActivity(android.content.pm.PackageParser$Package,android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,int,java.lang.String[],boolean,boolean)> 
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)> 
<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment)> 
<android.mtp.MtpServer: void sendObjectAdded(int)> 
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)> 
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> 
<org.apache.http.client.params.ClientParamBean: void setAllowCircularRedirects(boolean)> 
<android.media.MediaPlayer: void setSurface(android.view.Surface)> 
<android.preference.Preference: void setSelectable(boolean)> 
<gov.nist.javax.sip.header.ExtensionHeaderImpl: void setName(java.lang.String)> 
<java.security.cert.PKIXParameters: void setInitialPolicies(java.util.Set)> 
<android.app.ListActivity: void setListAdapter(android.widget.ListAdapter)> 
<java.text.MessageFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)> 
<org.apache.xpath.axes.NodeSequence: void setShouldCacheNodes(boolean)> 
<org.apache.xml.serializer.ToStream: void writeAttrString(java.io.Writer,java.lang.String,java.lang.String)> 
<android.speech.srec.WaveHeader: android.speech.srec.WaveHeader setFormat(short)> 
<org.apache.xpath.XPathContext: void setPrimaryReader(org.xml.sax.XMLReader)> 
<android.database.BulkCursorProxy: int requery(android.database.IContentObserver)> 
<android.view.animation.Animation: void setRepeatCount(int)> 
<android.webkit.SelectActionModeCallback: void setWebView(android.webkit.WebViewClassic)> 
<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction,boolean)> 
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setAddedCount(int)> 
<android.filterfw.core.MutableFrameFormat: void setDimensions(int[])> 
<org.apache.xalan.templates.ElemLiteralResult: void setExcludeResultPrefixes(org.apache.xml.utils.StringVector)> 
<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)> 
<java.io.BufferedWriter: void write(char[],int,int)> 
<android.view.Surface: void setFlags(int,int)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setName(org.apache.xml.utils.QName)> 
<java.math.BigDecimal: java.math.BigDecimal setScale(int,int)> 
<android.support.v4.content.CursorLoader: void setSelectionArgs(java.lang.String[])> 
<org.apache.harmony.xnet.provider.jsse.ServerHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)> 
<android.nfc.tech.MifareUltralight: void setTimeout(int)> 
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)> 
<android.content.SearchRecentSuggestionsProvider: void setupSuggestions(java.lang.String,int)> 
<org.apache.xalan.templates.AVT: void setURI(java.lang.String)> 
<org.jivesoftware.smackx.packet.VCard: void setHasModified(boolean)> 
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> 
<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)> 
<org.javia.arity.Token: org.javia.arity.Token setAlpha(java.lang.String)> 
<org.apache.xml.serializer.dom3.DOM3SerializerImpl: void setNodeFilter(org.w3c.dom.ls.LSSerializerFilter)> 
<libcore.net.http.HttpResponseCache: void update(java.net.CacheResponse,java.net.HttpURLConnection)> 
<android.preference.SeekBarPreference: void setProgress(int)> 
<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)> 
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<gov.nist.javax.sip.header.ims.ServiceRoute: void setValue(java.lang.String)> 
<javax.xml.transform.sax.SAXSource: void setXMLReader(org.xml.sax.XMLReader)> 
<android.webkit.GeolocationPermissionsClassic: void getOrigins(android.webkit.ValueCallback)> 
<android.webkit.WebViewCore: void initEditField(int,int,int,android.webkit.WebViewCore$TextFieldInitData)> 
<gov.nist.javax.sip.address.UserInfo: void setPassword(java.lang.String)> 
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int,int,int)> 
<android.test.mock.MockPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)> 
<android.database.AbstractCursor: void setExtras(android.os.Bundle)> 
<org.apache.http.protocol.BasicHttpProcessor: void setInterceptors(java.util.List)> 
<org.apache.xalan.templates.KeyDeclaration: void setUse(org.apache.xpath.XPath)> 
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)> 
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)> 
<jp.co.omronsoft.openwnn.DefaultSoftKeyboard: void setHardware12Keyboard(boolean)> 
<android.webkit.WebViewClassic: void updateMultiTouchSupport(android.content.Context)> 
<android.bluetooth.BluetoothAdapter: boolean setScanMode(int)> 
<android.support.v13.app.FragmentCompat: void setUserVisibleHint(android.app.Fragment,boolean)> 
<gov.nist.javax.sip.DialogFilter: void sendRequestPendingResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)> 
<org.apache.xalan.transformer.TransformerImpl: void setOutputTarget(javax.xml.transform.Result)> 
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> 
<android.webkit.WebChromeClient: void setupAutoFill(android.os.Message)> 
<android.net.EthernetDataTracker: void setPolicyDataEnable(boolean)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void ignorableWhitespace(char[],int,int)> 
<android.webkit.WebSettings: void setUseDoubleTree(boolean)> 
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)> 
<android.support.v13.app.FragmentCompatICS: void setMenuVisibility(android.app.Fragment,boolean)> 
<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)> 
<junit.textui.TestRunner: junit.framework.TestResult doRun(junit.framework.Test,boolean)> 
<android.content.pm.ManifestDigest: void writeToParcel(android.os.Parcel,int)> 
<android.os.Bundle: boolean setAllowFds(boolean)> 
<org.jivesoftware.smackx.provider.DiscoverInfoProvider: org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser)> 
<android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.os.CancellationSignal)> 
<android.net.wifi.WifiInfo: void setSupplicantState(android.net.wifi.SupplicantState)> 
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)> 
<android.app.WallpaperManager: void sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setUseClientMode(boolean)> 
<android.widget.SearchView: void setQuery(java.lang.CharSequence,boolean)> 
<android.webkit.WebViewClassic: void setTouchHighlightRects(android.webkit.WebViewCore$WebKitHitTest)> 
<android.app.ApplicationThreadProxy: void dumpHeap(boolean,java.lang.String,android.os.ParcelFileDescriptor)> 
<android.view.View: void setOverScrollMode(int)> 
<java.text.NumberFormat: void setMaximumIntegerDigits(int)> 
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> 
<android.webkit.WebViewClassic: void contentSizeChanged(boolean)> 
<android.view.HardwareRenderer: void setupDiskCache(java.io.File)> 
<org.apache.xalan.templates.ElemAttribute: void setName(org.apache.xalan.templates.AVT)> 
<android.view.MotionEvent: void setAction(int)> 
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)> 
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)> 
<android.media.audiofx.AudioEffect: int setParameter(int,byte[])> 
<android.widget.FastScroller: void setScrollbarPosition(int)> 
<android.graphics.drawable.ShapeDrawable: void setShape(android.graphics.drawable.shapes.Shape)> 
<android.animation.ObjectAnimator: void setFloatValues(float[])> 
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)> 
<android.net.wifi.WifiConfigStore: boolean forgetNetwork(int)> 
<libcore.icu.NativeDecimalFormat: void setRoundingMode(java.math.RoundingMode,double)> 
<android.webkit.WebSettingsClassic: void setUserAgentString(java.lang.String)> 
<org.apache.xml.serializer.ToHTMLStream: void characters(char[],int,int)> 
<org.apache.http.entity.BasicHttpEntity: void setContentLength(long)> 
<android.webkit.WebViewClassic: void setHitTestTypeFromUrl(java.lang.String)> 
<android.webkit.AutoCompletePopup: void setText(java.lang.CharSequence)> 
<android.view.Surface: void setLayer(int)> 
<android.webkit.WebViewClassic: void setupTrustStorageListener(android.content.Context)> 
<android.webkit.WebViewCore: void updateTextSelection(int,int,int,int,int)> 
<android.graphics.drawable.ScaleDrawable: void setAlpha(int)> 
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: void setAuthenticationHeaders(javax.sip.message.Request)> 
<android.service.dreams.DreamService: void setScreenBright(boolean)> 
<android.webkit.HTML5VideoView: void setOnInfoListener(android.webkit.HTML5VideoViewProxy)> 
<android.app.ApplicationThreadProxy: void unstableProviderDied(android.os.IBinder)> 
<org.apache.xml.dtm.ref.DTMNodeProxy: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)> 
<android.webkit.WebViewCore: void showRect(int,int,int,int,int,int,float,float,float,float)> 
<android.net.DnsPinger: void handleMessage(android.os.Message)> 
<android.graphics.Bitmap: void setPixel(int,int,int)> 
<android.content.CursorLoader: void setUri(android.net.Uri)> 
<android.net.wifi.p2p.WifiP2pManager: void removeServiceRequest(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)> 
<android.net.http.HttpAuthHeader: void setUsername(java.lang.String)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompat: void setParcelableData(android.os.Parcelable)> 
<junit.framework.TestResult: void run(junit.framework.TestCase)> 
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> 
<android.view.View: void setLabelFor(int)> 
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)> 
<android.widget.GridView: void setSelection(int)> 
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)> 
<android.speech.tts.TextToSpeech: int setSpeechRate(float)> 
<javax.xml.transform.stream.StreamResult: void setOutputStream(java.io.OutputStream)> 
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> 
<android.app.ActivityThread: void sendActivityResult(android.os.IBinder,java.lang.String,int,int,android.content.Intent)> 
<android.util.SparseArray: void setValueAt(int,java.lang.Object)> 
<org.apache.http.conn.params.ConnManagerParams: void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute)> 
<android.webkit.CallbackProxy: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> 
<android.widget.AutoCompleteTextView: void setDropDownAnimationStyle(int)> 
<android.widget.SearchView: void setQueryHint(java.lang.CharSequence)> 
<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)> 
<android.view.View: void setTag(int,java.lang.Object)> 
<javax.crypto.Cipher: byte[] update(byte[])> 
<android.speech.tts.TextToSpeech: java.lang.Object runAction(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String,boolean)> 
<android.widget.Filter: void setDelayer(android.widget.Filter$Delayer)> 
<android.webkit.WebViewClassic: void setFindListener(android.webkit.WebView$FindListener)> 
<org.ccil.cowan.tagsoup.jaxp.SAX1ParserAdapter: void setDocumentHandler(org.xml.sax.DocumentHandler)> 
<android.app.ActivityManagerProxy: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,int)> 
<android.app.ProgressDialog: void setProgress(int)> 
<org.apache.xalan.templates.OutputProperties: void setProperty(org.apache.xml.utils.QName,java.lang.String)> 
<javax.obex.HeaderSet: void setHeader(int,java.lang.Object)> 
<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],boolean)> 
<android.widget.TextView: void setAutoLinkMask(int)> 
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)> 
<android.filterfw.core.ShaderProgram: void setTargetRect(float,float,float,float)> 
<android.media.videoeditor.MediaArtistNativeHelper: void onPreviewProgressUpdate(int,boolean,boolean,java.lang.String,int,int)> 
<org.apache.commons.codec.language.Soundex: void setSoundexMapping(char[])> 
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanMode(boolean)> 
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)> 
<javax.obex.ServerOperation: boolean continueOperation(boolean,boolean)> 
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesCount(int)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setNeedClientAuth(boolean)> 
<org.apache.commons.io.EndianUtils: void writeSwappedDouble(byte[],int,double)> 
<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)> 
<gov.nist.javax.sip.header.CSeq: void setMethod(java.lang.String)> 
<java.net.URLConnection: void setIfModifiedSince(long)> 
<java.security.cert.X509CertSelector: void setAuthorityKeyIdentifier(byte[])> 
<java.sql.DriverManager: void setLoginTimeout(int)> 
<java.io.DataOutputStream: void write(byte[],int,int)> 
<android.net.http.HttpsConnection: void setCertificate(android.net.http.SslCertificate)> 
<android.graphics.drawable.ShapeDrawable: void setAlpha(int)> 
<android.widget.TableRow: void setColumnsWidthConstraints(int[])> 
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)> 
<org.jivesoftware.smack.provider.ProviderManager: void setDefault(org.jivesoftware.smack.provider.ProviderManager)> 
<android.webkit.WebViewClassic: boolean onKeyDown(int,android.view.KeyEvent)> 
<android.app.ActivityManagerProxy: android.content.IIntentSender getIntentSender(int,java.lang.String,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int,android.os.Bundle,int)> 
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,int,int,int)> 
<android.webkit.WebStorageClassic: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)> 
<android.webkit.WebSettingsClassic: void setBlockNetworkLoads(boolean)> 
<android.view.GLES20DisplayList: void setHasOverlappingRendering(boolean)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatJellyBean: void setSource(java.lang.Object,android.view.View,int)> 
<java.text.Bidi: int getRunLimit(int)> 
<android.view.Surface: void setDisplayLayerStack(android.os.IBinder,int)> 
<org.apache.xalan.transformer.TransformerImpl: void setXPathContext(org.apache.xpath.XPathContext)> 
<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> 
<gov.nist.javax.sip.header.CallInfo: void setInfo(javax.sip.address.URI)> 
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])> 
<android.widget.PopupWindow: void update(int,int,int,int)> 
<android.content.SyncManager: void scheduleSyncOperation(android.content.SyncOperation)> 
<org.apache.xpath.functions.Function3Args: void setArg(org.apache.xpath.Expression,int)> 
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> 
<java.util.Calendar: void setLenient(boolean)> 
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> 
<android.widget.ShareActionProvider: void setShareHistoryFileName(java.lang.String)> 
<org.apache.james.mime4j.message.Multipart: void writeTo(java.io.OutputStream)> 
<android.widget.CursorTreeAdapter: void setChildrenCursor(int,android.database.Cursor)> 
<org.apache.xml.serializer.SerializerBase: void setDocumentLocator(org.xml.sax.Locator)> 
<org.apache.xalan.templates.ElemWithParam: void setName(org.apache.xml.utils.QName)> 
<android.content.pm.LimitedLengthInputStream: int read(byte[],int,int)> 
<org.xml.sax.helpers.AttributesImpl: void setAttributes(org.xml.sax.Attributes)> 
<android.app.ActivityManagerProxy: boolean getPackageAskScreenCompat(java.lang.String)> 
<java.security.cert.X509CertSelector: void setIssuer(byte[])> 
<java.security.cert.X509CertSelector: void setSubjectPublicKey(byte[])> 
<android.filterfw.core.ProgramVariable: void setValue(java.lang.Object)> 
<java.security.cert.X509CertSelector: void setSubjectKeyIdentifier(byte[])> 
<android.os.CommonTimeUtils: java.lang.String transactGetString(int,java.lang.String)> 
<org.apache.xml.serializer.CharInfo: void setASCIIattrDirty(int)> 
<android.view.HardwareLayer: void setLayerPaint(android.graphics.Paint)> 
<android.content.res.ObbInfo: void writeToParcel(android.os.Parcel,int)> 
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)> 
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)> 
<android.app.WallpaperManager: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)> 
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> 
<android.inputmethodservice.ExtractEditText: void setSpan_internal(java.lang.Object,int,int,int)> 
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> 
<org.apache.xml.serializer.ToStream: boolean setEscaping(boolean)> 
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)> 
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)> 
<org.apache.xml.utils.UnImplNode: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> 
<android.app.ActivityManagerProxy: boolean targetTaskAffinityMatchesActivity(android.os.IBinder,java.lang.String)> 
<android.test.mock.MockContext: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> 
<android.view.animation.Animation: void setZAdjustment(int)> 
<android.net.nsd.NsdServiceInfo: void setPort(int)> 
<android.media.AudioManager: void setMasterMute(boolean)> 
<android.widget.ToggleButton: void setBackgroundDrawable(android.graphics.drawable.Drawable)> 
<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)> 
<org.apache.xml.serializer.ToXMLStream: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)> 
<gov.nist.javax.sip.stack.ServerLog: void setSipStack(javax.sip.SipStack)> 
<android.location.Address: void setAddressLine(int,java.lang.String)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setInfinity(java.lang.String)> 
<android.widget.ImageSwitcher: void setImageResource(int)> 
<android.app.admin.DevicePolicyManager: void setPasswordMinimumUpperCase(android.content.ComponentName,int)> 
<org.apache.xpath.NodeSet: void setLast(int)> 
<java.io.StringWriter: void write(char[],int,int)> 
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)> 
<org.jivesoftware.smackx.packet.VCard: void setLastName(java.lang.String)> 
<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)> 
<org.apache.xpath.axes.LocPathIterator: void setItem(int,int)> 
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)> 
<libcore.io.ForwardingOs: int recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)> 
<android.widget.ProgressBar: void setMax(int)> 
<android.database.sqlite.SQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<java.util.logging.Logger: void setParent(java.util.logging.Logger)> 
<org.apache.http.impl.cookie.BasicClientCookie: void setPath(java.lang.String)> 
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)> 
<android.widget.TextView: void setTextIsSelectable(boolean)> 
<android.view.animation.Animation: void setDetachWallpaper(boolean)> 
<org.jivesoftware.smack.packet.Authentication: void setDigest(java.lang.String)> 
<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)> 
<android.widget.SearchView: void setMaxWidth(int)> 
<android.webkit.CallbackProxy: void addMessageToConsole(java.lang.String,int,java.lang.String,int)> 
<java.util.prefs.XMLParser: void writeXmlPreferences(java.io.File,java.util.Properties)> 
<org.apache.xalan.templates.NamespaceAlias: void setResultNamespace(java.lang.String)> 
<org.apache.harmony.xml.dom.ProcessingInstructionImpl: void setData(java.lang.String)> 
<libcore.io.ForwardingOs: void setgid(int)> 
<android.graphics.drawable.GradientDrawable: void setShape(int)> 
<javax.xml.parsers.DocumentBuilderFactory: void setIgnoringElementContentWhitespace(boolean)> 
<libcore.net.http.HeaderParser: int parseSeconds(java.lang.String)> 
<org.apache.james.mime4j.field.address.parser.SimpleNode: void dump(java.lang.String)> 
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)> 
<android.service.dreams.DreamService: void setContentView(int)> 
<android.widget.ListPopupWindow: void setAnimationStyle(int)> 
<org.apache.xpath.SourceTreeManager: int getSourceTree(javax.xml.transform.Source,javax.xml.transform.SourceLocator,org.apache.xpath.XPathContext)> 
<org.apache.http.auth.params.AuthParamBean: void setCredentialCharset(java.lang.String)> 
<java.text.DateFormatSymbols: void setAmPmStrings(java.lang.String[])> 
<gov.nist.core.HostPort: void setHost(gov.nist.core.Host)> 
<org.ccil.cowan.tagsoup.Parser: void setEntityResolver(org.xml.sax.EntityResolver)> 
<android.location.Address: void setCountryName(java.lang.String)> 
<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)> 
<org.apache.xalan.templates.ElemTemplateElement: void setUid(int)> 
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)> 
<android.os.Handler: boolean sendEmptyMessage(int)> 
<gov.nist.javax.sip.header.ims.PAssertedService: void setSubserviceIdentifiers(java.lang.String)> 
<android.support.v4.view.PagerTitleStrip: void updateAdapter(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter)> 
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> 
<org.apache.xml.serializer.ToStream: void attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.content.pm.UserInfo: void writeToParcel(android.os.Parcel,int)> 
<android.filterfw.core.NativeProgram: void setHostValue(java.lang.String,java.lang.Object)> 
<android.os.ServiceManagerProxy: void addService(java.lang.String,android.os.IBinder,boolean)> 
<gov.nist.javax.sip.address.TelURLImpl: void setIsdnSubAddress(java.lang.String)> 
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)> 
<org.apache.xml.serializer.ToXMLSAXHandler: boolean setEscaping(boolean)> 
<org.jivesoftware.smackx.packet.VCard: void setLocalAvatarHash(java.lang.String)> 
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])> 
<android.support.v4.view.ViewCompat: void setHasTransientState(android.view.View,boolean)> 
<android.content.pm.VerifierInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse doSendRequest(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)> 
<javax.net.ssl.HttpsURLConnection: void setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)> 
<android.preference.ListPreference: void setSummary(java.lang.CharSequence)> 
<gov.nist.javax.sip.message.SIPMessage: void setHeader(gov.nist.javax.sip.header.SIPHeaderList)> 
<android.webkit.WebViewClassic: void setHitTestResult(android.webkit.WebViewCore$WebKitHitTest)> 
<java.net.URLConnection: void setUseCaches(boolean)> 
<android.mtp.MtpDatabase: int setObjectProperty(int,int,long,java.lang.String)> 
<android.security.KeyStore: java.util.ArrayList execute(int,byte[][])> 
<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)> 
<android.widget.ShareActionProvider: void setShareIntent(android.content.Intent)> 
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)> 
<javax.xml.parsers.DocumentBuilderFactory: void setExpandEntityReferences(boolean)> 
<android.view.View: void setLayoutInsets(android.graphics.Insets)> 
<android.test.AndroidTestRunner: void setTest(junit.framework.Test)> 
<gov.nist.javax.sip.header.Event: void setEventType(java.lang.String)> 
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)> 
<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream,java.lang.String)> 
<org.apache.xalan.templates.DecimalFormatProperties: void setZeroDigit(char)> 
<java.util.BitSet: void set(int,boolean)> 
<net.oauth.signature.HMAC_SHA1: void setTokenSecret(java.lang.String)> 
<android.preference.GenericInflater: void setDefaultPackage(java.lang.String)> 
<java.net.Socks4Message: void setCommandOrResult(int)> 
<org.apache.xpath.Arg: void setQName(org.apache.xml.utils.QName)> 
<android.preference.DialogPreference: void setDialogIcon(int)> 
<org.apache.xpath.operations.Or: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<gov.nist.javax.sip.header.Challenge: void setParameter(gov.nist.core.NameValue)> 
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.app.ActivityManagerProxy: void publishContentProviders(android.app.IApplicationThread,java.util.List)> 
<org.apache.xalan.transformer.TransformerImpl: void setIsTransformDone(boolean)> 
<android.widget.ListPopupWindow: void setForceIgnoreOutsideTouch(boolean)> 
<org.apache.xalan.templates.ElemValueOf: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.preference.PreferenceActivity: void setPreferenceScreen(android.preference.PreferenceScreen)> 
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)> 
<org.apache.xalan.templates.ElemLiteralResult: void setIsLiteralResultAsStylesheet(boolean)> 
<android.app.Activity: void setContentView(int)> 
<android.os.PerformanceCollector: void beginSnapshot(java.lang.String)> 
<org.apache.xml.dtm.DTMException: void printStackTrace(java.io.PrintWriter)> 
<net.oauth.client.httpclient4.HttpClient4: net.oauth.http.HttpResponseMessage execute(net.oauth.http.HttpMessage)> 
<android.widget.EditText: void setEllipsize(android.text.TextUtils$TruncateAt)> 
<java.security.cert.X509CertSelector: void setSubjectPublicKey(java.security.PublicKey)> 
<gov.nist.javax.sip.header.ims.PUserDatabase: void setDatabaseName(java.lang.String)> 
<android.inputmethodservice.SoftInputWindow: void setSize(int)> 
<android.webkit.WebSettingsClassic: void setPluginsPath(java.lang.String)> 
<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)> 
<android.app.ActivityManager: void setPackageAskScreenCompat(java.lang.String,boolean)> 
<android.telephony.CellInfoGsm: void log(java.lang.String)> 
<android.telephony.CellSignalStrengthCdma: void setCdmaDbm(int)> 
<org.jivesoftware.smack.Chat: void sendMessage(org.jivesoftware.smack.packet.Message)> 
<android.util.JsonWriter: android.util.JsonWriter open(android.util.JsonScope,java.lang.String)> 
<android.webkit.WebSettings: void setMinimumFontSize(int)> 
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)> 
<android.app.AlertDialog: void setCustomTitle(android.view.View)> 
<android.view.View: void setId(int)> 
<android.content.Intent: android.content.Intent setFlags(int)> 
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)> 
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)> 
<org.jivesoftware.smack.sasl.SASLMechanism: void challengeReceived(java.lang.String)> 
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)> 
<jp.co.omronsoft.openwnn.Keyboard: void setVerticalGap(int)> 
<org.apache.xpath.objects.XRTreeFragSelectWrapper: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)> 
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)> 
<android.view.GLES20Layer: void setLayerPaint(android.graphics.Paint)> 
<android.net.SSLCertificateSocketFactory: void setSoWriteTimeout(java.net.Socket,int)> 
<junit.textui.ResultPrinter: void addError(junit.framework.Test,java.lang.Throwable)> 
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)> 
<android.database.sqlite.SQLiteQuery: int fillWindow(android.database.CursorWindow,int,int,boolean)> 
<org.jivesoftware.smack.util.StringUtils: java.lang.String hash(java.lang.String)> 
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)> 
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)> 
<jp.co.omronsoft.openwnn.KeyboardView: void setVerticalCorrection(int)> 
<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)> 
<android.webkit.WebViewCore: void resumeUpdatePicture(android.webkit.WebViewCore)> 
<android.app.ApplicationThreadProxy: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)> 
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)> 
<android.widget.Switch: void setThumbDrawable(android.graphics.drawable.Drawable)> 
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> 
<java.nio.FileChannelImpl: int writeImpl(java.nio.ByteBuffer,long)> 
<android.webkit.WebViewCore: void access$3900(android.webkit.WebViewCore,int,int,int)> 
<android.webkit.CallbackProxy: void onJsAlert(java.lang.String,java.lang.String)> 
<org.apache.http.conn.params.ConnManagerParamBean: void setMaxTotalConnections(int)> 
<android.content.Intent: android.content.Intent setData(android.net.Uri)> 
<java.util.zip.ZipEntry: void setCrc(long)> 
<gov.nist.javax.sip.header.ims.PChargingVector: void setValue(java.lang.String)> 
<org.jivesoftware.smack.packet.Message: void setNoSave(boolean)> 
<android.app.Activity: void setIntent(android.content.Intent)> 
<org.apache.xml.utils.DOMBuilder: void setNextSibling(org.w3c.dom.Node)> 
<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)> 
<android.support.v4.app.FragmentTabHost: void setup(android.content.Context,android.support.v4.app.FragmentManager,int)> 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams)> 
<gov.nist.javax.sip.header.Event: void setEventId(java.lang.String)> 
<android.view.GLES20DisplayList: void setRight(int)> 
<org.apache.xml.utils.NodeVector: void setTailSub1(int)> 
<java.security.cert.PKIXParameters: void setRevocationEnabled(boolean)> 
<android.view.ViewRootImpl: void dispatchFinishInputConnection(android.view.inputmethod.InputConnection)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setUtranCellID3GPP(java.lang.String)> 
<android.content.pm.VerifierDeviceIdentity: void writeToParcel(android.os.Parcel,int)> 
<android.app.ActivityManagerProxy: void closeSystemDialogs(java.lang.String)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void setDocumentLocator(org.xml.sax.Locator)> 
<gov.nist.javax.sip.address.SipUri: void setIsdnSubAddress(java.lang.String)> 
<org.apache.harmony.security.x509.IssuingDistributionPoint: void dumpValue(java.lang.StringBuilder,java.lang.String)> 
<android.media.AudioManager: void setMasterMute(boolean,int)> 
<android.view.HardwareLayer: void setDisplayList(android.view.DisplayList)> 
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)> 
<org.apache.commons.io.output.ProxyWriter: void write(char[])> 
<gov.nist.javax.sip.header.AuthenticationHeader: void setCNonce(java.lang.String)> 
<java.text.MessageFormat: void setFormats(java.text.Format[])> 
<gov.nist.javax.sip.stack.TLSMessageChannel: void run()> 
<android.bluetooth.BluetoothInputDevice: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)> 
<android.webkit.CallbackProxy: void doUpdateVisitedHistory(java.lang.String,boolean)> 
<libcore.io.Posix: int pwrite(java.io.FileDescriptor,byte[],int,int,long)> 
<org.apache.http.entity.BasicHttpEntity: void writeTo(java.io.OutputStream)> 
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)> 
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)> 
<org.apache.harmony.xml.dom.DocumentImpl: void setDocumentURI(java.lang.String)> 
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpMessage)> 
<javax.xml.parsers.SAXParserFactory: void setValidating(boolean)> 
<org.apache.xml.serializer.ToUnknownStream: void setCdataSectionElements(java.util.Vector)> 
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> 
<java.nio.SelectionKeyImpl: void setReadyOps(int)> 
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> 
<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCI3GPP2(java.lang.String)> 
<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)> 
<org.kxml2.io.KXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)> 
<libcore.io.BlockGuardOs: int pwrite(java.io.FileDescriptor,byte[],int,int,long)> 
<org.apache.xpath.operations.Variable: void setIndex(int)> 
<android.text.format.Time: void set(android.text.format.Time)> 
<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)> 
<android.support.v4.view.ViewCompat: void setLayerType(android.view.View,int,android.graphics.Paint)> 
<android.app.ActivityManagerProxy: int checkGrantUriPermission(int,java.lang.String,android.net.Uri,int)> 
<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops)> 
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> 
<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)> 
<android.media.AudioService: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> 
<android.net.wifi.WifiInfo: void setHiddenSSID(boolean)> 
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)> 
<org.apache.james.mime4j.field.DelegatingFieldParser: void setFieldParser(java.lang.String,org.apache.james.mime4j.field.FieldParser)> 
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> 
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)> 
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)> 
<android.text.Selection: void setSelection(android.text.Spannable,int)> 
<java.net.URLConnection: void setAllowUserInteraction(boolean)> 
<android.content.SyncStatusInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)> 
<android.support.v4.net.TrafficStatsCompatIcs: void setThreadStatsTag(int)> 
<android.widget.AutoCompleteTextView: void setDropDownAlwaysVisible(boolean)> 
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)> 
<android.app.AliasActivity: android.content.Intent parseAlias(org.xmlpull.v1.XmlPullParser)> 
<org.apache.xalan.templates.ElemWhen: void setTest(org.apache.xpath.XPath)> 
<org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])> 
<org.ccil.cowan.tagsoup.XMLWriter: void setOutput(java.io.Writer)> 
<org.jivesoftware.smack.PacketWriter: void dump(java.io.PrintWriter)> 
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)> 
<gov.nist.javax.sip.DialogFilter: void sendLoopDetectedResponse(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.SIPServerTransaction)> 
<org.jivesoftware.smack.PacketCollector: void setPacketFilter(org.jivesoftware.smack.filter.PacketFilter)> 
<org.apache.james.mime4j.MimeStreamParser: void setRaw(boolean)> 
<gov.nist.javax.sip.SipProviderImpl: void setListeningPoint(javax.sip.ListeningPoint)> 
<android.webkit.WebSettingsClassic: void setGeolocationDatabasePath(java.lang.String)> 
<android.support.v4.widget.SearchViewCompat: void setOnQueryTextListener(android.view.View,android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat)> 
<org.apache.http.conn.params.ConnRouteParams: void setLocalAddress(org.apache.http.params.HttpParams,java.net.InetAddress)> 
<android.widget.TabWidget: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> 
<android.graphics.drawable.ShapeDrawable: void setDither(boolean)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setSource(java.lang.Object,android.view.View)> 
<android.widget.ExpandableListConnector: void setExpandableListAdapter(android.widget.ExpandableListAdapter)> 
<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.String)> 
<org.apache.commons.codec.language.Soundex: void setMaxLength(int)> 
<gov.nist.javax.sip.Utils: void main(java.lang.String[])> 
<android.webkit.WebViewClassic: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: void deleteCertificateEntry(java.lang.String)> 
<org.apache.xml.serializer.ToXMLSAXHandler: void setWriter(java.io.Writer)> 
<org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> 
<android.text.style.LocaleSpan: void updateDrawState(android.text.TextPaint)> 
<org.apache.xalan.templates.ElemIf: void setTest(org.apache.xpath.XPath)> 
<org.jivesoftware.smack.packet.Message: void setThread(java.lang.String)> 
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)> 
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReuseAddress(boolean)> 
<android.bluetooth.BluetoothSocket: void setServiceName(java.lang.String)> 
<libcore.net.http.FixedLengthInputStream: int read(byte[],int,int)> 
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)> 
<android.webkit.CallbackProxy: void onFormResubmission(android.os.Message,android.os.Message)> 
<android.app.ActivityManagerProxy: java.util.List getRecentTasks(int,int,int)> 
<java.util.zip.Adler32: void update(byte[])> 
<android.net.wifi.WifiNative: boolean setManufacturer(java.lang.String)> 
<android.net.wifi.p2p.WifiP2pManager: void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PersistentGroupInfoListener)> 
<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(java.lang.String,java.lang.String)> 
<junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setLogRecordFactory(gov.nist.javax.sip.LogRecordFactory)> 
<org.apache.xml.utils.UnImplNode: void setAttribute(java.lang.String,java.lang.String)> 
<android.inputmethodservice.SoftInputWindow: void setToken(android.os.IBinder)> 
<android.widget.ImageView: void setAlpha(int)> 
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)> 
<org.kxml2.io.KXmlParser: void setProperty(java.lang.String,java.lang.Object)> 
<jp.co.omronsoft.openwnn.Keyboard: void parseKeyboardAttributes(android.content.res.Resources,android.content.res.XmlResourceParser)> 
<org.apache.xalan.transformer.TransformerImpl: void runTransformThread(java.lang.Runnable)> 
<libcore.io.DiskLruCache: libcore.io.DiskLruCache$Editor edit(java.lang.String,long)> 
<android.webkit.WebIconDatabaseClassic: void requestIconForPageUrl(java.lang.String,android.webkit.WebIconDatabase$IconListener)> 
<android.telephony.CellBroadcastMessage: void writeToParcel(android.os.Parcel,int)> 
<gov.nist.javax.sip.header.ims.SecurityAgree: void setMode(java.lang.String)> 
<android.webkit.WebSettingsClassic: void setFantasyFontFamily(java.lang.String)> 
<android.media.videoeditor.OverlayFrame: void setOverlayFrameHeight(int)> 
<android.telephony.cdma.CdmaSmsCbProgramResults: void writeToParcel(android.os.Parcel,int)> 
<android.net.InterfaceConfiguration: void setLinkAddress(android.net.LinkAddress)> 
<gov.nist.javax.sip.stack.SIPServerTransaction: void setRequestInterface(gov.nist.javax.sip.stack.ServerRequestInterface)> 
<android.media.AudioManager: void setRemoteSubmixOn(boolean,int)> 
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)> 
<android.widget.SuggestionsAdapter: void setViewText(android.widget.TextView,java.lang.CharSequence)> 
<android.widget.PopupWindow: void update(int,int)> 
<org.apache.xpath.axes.AxesWalker: void setDefaultDTM(org.apache.xml.dtm.DTM)> 
<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)> 
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)> 
<android.text.PackedObjectVector: void setValue(int,int,java.lang.Object)> 
<gov.nist.javax.sip.header.RequestLine: void setUri(javax.sip.address.URI)> 
<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,int,int,int)> 
<org.apache.xml.dtm.ref.IncrementalSAXSource_Filter: void setErrHandler(org.xml.sax.ErrorHandler)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setPassword(java.lang.Object,boolean)> 
<android.app.DialogFragment: void setCancelable(boolean)> 
<org.apache.xml.dtm.ref.DTMDocumentImpl: void setPrefixNameTable(org.apache.xml.dtm.ref.DTMStringPool)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnableSessionCreation(boolean)> 
<org.apache.xml.serializer.dom3.DOMOutputImpl: void setCharacterStream(java.io.Writer)> 
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)> 
<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)> 
<jp.co.omronsoft.openwnn.TextCandidatesViewManager: void setViewType(int)> 
<java.sql.Date: void setTime(long)> 
<android.os.CommonTimeConfig: int setMasterElectionEndpoint(java.net.InetSocketAddress)> 
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)> 
<org.apache.http.impl.client.AbstractHttpClient: void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy)> 
<android.net.http.RequestQueue: android.net.http.RequestHandle queueSynchronousRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)> 
<org.apache.xalan.transformer.TransformerHandlerImpl: void startEntity(java.lang.String)> 
<org.apache.harmony.xml.dom.CharacterDataImpl: void replaceData(int,int,java.lang.String)> 
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)> 
<org.apache.xalan.templates.ElemNumber: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.support.v4.view.accessibility.AccessibilityRecordCompatIcs: void setBeforeText(java.lang.Object,java.lang.CharSequence)> 
<android.view.inputmethod.InputMethodManager: void setImeWindowStatus(android.os.IBinder,int,int)> 
<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])> 
<android.webkit.WebViewClassic: void setScrollYRaw(int)> 
<org.apache.http.impl.io.AbstractMessageWriter: void write(org.apache.http.HttpMessage)> 
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)> 
<android.app.ActivityManagerProxy: void showBootMessage(java.lang.CharSequence,boolean)> 
<android.view.ViewRootImpl: void dispatchResized(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)> 
<org.jivesoftware.smack.packet.Packet: void setStreamId(int)> 
<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)> 
<android.net.wifi.WifiStateMachine: void enableBackgroundScanCommand(boolean)> 
<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)> 
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> 
<android.view.WindowManagerImpl: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> 
<org.apache.xalan.templates.ElemForEach: void execute(org.apache.xalan.transformer.TransformerImpl)> 
<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])> 
<org.apache.commons.io.output.LockableFileWriter: void write(char[])> 
<gov.nist.javax.sip.address.SipUri: void setHost(gov.nist.core.Host)> 
<android.sax.Element: void setStartElementListener(android.sax.StartElementListener)> 
<android.filterfw.core.Frame: void setGenericObjectValue(java.lang.Object)> 
<android.view.View: void setScrollBarStyle(int)> 
<gov.nist.javax.sip.message.MessageFactoryImpl: void setStrict(boolean)> 
<android.app.PendingIntent: void send()> 
<android.renderscript.ScriptIntrinsicLUT: void setBlue(int,int)> 
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)> 
<android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs: void setEnabled(java.lang.Object,boolean)> 
<org.apache.xpath.functions.FuncPosition: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)> 
<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> 
<android.os.AsyncTask: void execute(java.lang.Runnable)> 
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)> 
<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)> 
<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)> 
<org.apache.harmony.crypto.internal.NullCipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)> 
<android.widget.TextView: void setImeOptions(int)> 
<libcore.net.http.HttpsURLConnectionImpl: void setDefaultUseCaches(boolean)> 
<android.widget.TextView: void setTextSize(float)> 
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> 
<android.webkit.AccessibilityInjectorFallback: boolean traverseGivenAxis(int,int,boolean,java.lang.String)> 
<android.text.util.Rfc822Token: void setAddress(java.lang.String)> 
<android.speech.tts.TextToSpeech: int setPitch(float)> 
<java.net.HttpCookie: void setComment(java.lang.String)> 
<android.widget.CalendarView: void setShownWeekCount(int)> 
<android.preference.PreferenceManager: void setDefaultValues(android.content.Context,java.lang.String,int,int,boolean)> 
<org.apache.xml.utils.UnImplNode: void error(java.lang.String)> 
