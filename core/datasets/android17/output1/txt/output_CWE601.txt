<android.webkit.WebResourceResponse: java.io.InputStream getData()> ->_CWE601_
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getDnsType()> ->_CWE601_
<libcore.net.http.ResponseHeaders: int getMaxAgeSeconds()> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: void setSettings(java.util.Map)> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.util.Set getVaryFields()> ->_CWE601_
<libcore.net.http.HttpResponseCache: int getHitCount()> ->_CWE601_
<libcore.net.http.HttpResponseCache: int getWriteSuccessCount()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.util.LinkedList getMessageAsEncodedStrings()> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: long getServerTimestamp()> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: java.util.Map getSettings()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: byte[] getRawData()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getReasonPhrase()> ->_CWE601_
<net.oauth.client.URLConnectionResponse: void <init>(net.oauth.http.HttpMessage,java.lang.String,byte[],java.net.URLConnection)> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.util.Date getExpires()> ->_CWE601_
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)> ->_CWE601_
<libcore.net.http.ResponseHeaders: void setLocalTimestamps(long,long)> ->_CWE601_
<android.net.http.HttpResponseCache: int getHitCount()> ->_CWE601_
<org.apache.http.impl.conn.DefaultResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> ->_CWE601_
<android.net.http.HttpResponseCache: int getRequestCount()> ->_CWE601_
<libcore.net.http.HttpResponseCache: int getRequestCount()> ->_CWE601_
<net.oauth.client.URLConnectionResponse: java.io.InputStream openBody()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: void setStatusLine(gov.nist.javax.sip.header.StatusLine)> ->_CWE601_
<libcore.net.http.ResponseHeaders: int getSMaxAgeSeconds()> ->_CWE601_
<libcore.net.http.HttpsURLConnectionImpl: int getReadTimeout()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getTransactionId()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String readDnsName(java.io.DataInputStream)> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: java.lang.String getJid()> ->_CWE601_
<org.jivesoftware.smack.packet.HttpResponse: void setData(byte[])> ->_CWE601_
<libcore.net.http.HttpResponseCache: int getWriteAbortCount()> ->_CWE601_
<android.net.UrlQuerySanitizer: java.util.List getParameterList()> ->_CWE601_
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpResponse)> ->_CWE601_
<javax.sip.ResponseEvent: javax.sip.ClientTransaction getClientTransaction()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean,java.lang.String)> ->_CWE601_
<libcore.net.http.ResponseHeaders: int getContentLength()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: void setBranch(gov.nist.javax.sip.header.Via,java.lang.String)> ->_CWE601_
<gov.nist.javax.sip.address.TelURLImpl: java.lang.String getParameter(java.lang.String)> ->_CWE601_
<javax.sip.ResponseEvent: javax.sip.Dialog getDialog()> ->_CWE601_
<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: void setStatusCode(int)> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: int getVersion()> ->_CWE601_
<java.net.URLConnection: void setReadTimeout(int)> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.net.URI getUri()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getDialogId(boolean)> ->_CWE601_
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> ->_CWE601_
<org.jivesoftware.smack.packet.HttpResponse: byte[] getData()> ->_CWE601_
<net.oauth.http.HttpResponseMessage: void dump(java.util.Map)> ->_CWE601_
<net.oauth.client.URLConnectionResponse: java.util.List getHeaders()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: android.net.wifi.p2p.WifiP2pDevice getSrcDevice()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.message.SIPRequest createRequest(gov.nist.javax.sip.address.SipUri,gov.nist.javax.sip.header.Via,gov.nist.javax.sip.header.CSeq,gov.nist.javax.sip.header.From,gov.nist.javax.sip.header.To)> ->_CWE601_
<libcore.net.url.FtpURLConnection: boolean readMultiLine()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: java.util.List getUniqueServiceNames()> ->_CWE601_
<gov.nist.javax.sip.address.TelURLImpl: gov.nist.core.NameValueList getParameters()> ->_CWE601_
<net.oauth.client.httpclient4.HttpMethodResponse: java.util.List getHeaders()> ->_CWE601_
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: org.apache.http.ProtocolVersion getProtocolVersion()> ->_CWE601_
<org.apache.http.client.HttpResponseException: int getStatusCode()> ->_CWE601_
<org.jivesoftware.smack.packet.BindAccountResponse: void setJid(java.lang.String)> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getServiceType()> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: org.apache.http.HttpEntity getEntity()> ->_CWE601_
<libcore.net.http.HttpResponseCache: libcore.io.DiskLruCache getCache()> ->_CWE601_
<org.apache.http.impl.io.HttpResponseParser: org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer)> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void writeToParcel(android.os.Parcel,int)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: byte[] encodeAsBytes(java.lang.String)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getFirstLine()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getSIPVersion()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getDnsQueryName()> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: org.jivesoftware.smack.packet.HeartbeatConfig getHeartbeatConfig()> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.util.Date getServedDate()> ->_CWE601_
<javax.sip.ResponseEvent: javax.sip.message.Response getResponse()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: boolean readTxtData(java.io.DataInputStream)> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String encodeMessage()> ->_CWE601_
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: int getStatus()> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String getReasonPhrase(int)> ->_CWE601_
<net.oauth.client.OAuthResponseMessage: java.lang.String getBodyEncoding()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: boolean parse()> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.lang.String getEtag()> ->_CWE601_
<android.net.http.HttpResponseCache: int getNetworkCount()> ->_CWE601_
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()> ->_CWE601_
<java.net.ResponseSource: boolean requiresConnection()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: boolean parse()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pUpnpServiceResponse: int getVersion()> ->_CWE601_
<gov.nist.javax.sip.address.TelURLImpl: java.util.Iterator getParameterNames()> ->_CWE601_
<libcore.net.http.HttpResponseCache: int getNetworkCount()> ->_CWE601_
<libcore.net.url.FtpURLConnection: java.lang.String readLine()> ->_CWE601_
<libcore.net.http.HttpResponseCache: libcore.net.http.HttpEngine getHttpEngine(java.net.HttpURLConnection)> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: java.lang.String getReason(int)> ->_CWE601_
<gov.nist.javax.sip.ResponseEventExt: gov.nist.javax.sip.ClientTransactionExt getOriginalTransaction()> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: void setEntity(org.apache.http.HttpEntity)> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.util.Map getTxtRecord()> ->_CWE601_
<libcore.net.http.HttpResponseCache: void update(java.net.CacheResponse,java.net.HttpURLConnection)> ->_CWE601_
<libcore.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: java.lang.String encode()> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)> ->_CWE601_
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)> ->_CWE601_
<libcore.net.http.ResponseHeaders: libcore.net.http.RawHeaders getHeaders()> ->_CWE601_
<net.oauth.client.OAuthResponseMessage: java.io.InputStream getBodyAsStream()> ->_CWE601_
<net.oauth.client.URLConnectionResponse: void dump(java.util.Map)> ->_CWE601_
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: void setServerTimestamp(long)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: void setHeartbeatConfig(org.jivesoftware.smack.packet.HeartbeatConfig)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: gov.nist.javax.sip.header.StatusLine getStatusLine()> ->_CWE601_
<android.net.http.HttpResponseCache: void update(java.net.CacheResponse,java.net.HttpURLConnection)> ->_CWE601_
<org.jivesoftware.smack.packet.BindAccountResponse: java.lang.String getJid()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pServiceResponse: void setSrcDevice(android.net.wifi.p2p.WifiP2pDevice)> ->_CWE601_
<gov.nist.javax.sip.message.SIPResponse: int getStatusCode()> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: java.util.Locale getLocale()> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.lang.String getContentEncoding()> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.util.Date getLastModified()> ->_CWE601_
<net.oauth.client.httpclient4.HttpMethodResponse: int getStatusCode()> ->_CWE601_
<java.net.ResponseCache: java.net.ResponseCache getDefault()> ->_CWE601_
<org.apache.http.impl.io.HttpResponseWriter: void writeHeadLine(org.apache.http.HttpMessage)> ->_CWE601_
<libcore.net.http.ResponseHeaders: java.lang.String getConnection()> ->_CWE601_
<android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceResponse: java.lang.String getInstanceName()> ->_CWE601_
<gov.nist.javax.sip.ResponseEventExt: void setOriginalTransaction(gov.nist.javax.sip.ClientTransactionExt)> ->_CWE601_
<java.net.URLConnection: int getReadTimeout()> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: org.apache.http.StatusLine getStatusLine()> ->_CWE601_
<org.jivesoftware.smack.packet.LoginResponse: void setJid(java.lang.String)> ->_CWE601_
<net.oauth.client.URLConnectionResponse: int getStatusCode()> ->_CWE601_
<net.oauth.client.httpclient4.HttpMethodResponse: void dump(java.util.Map)> ->_CWE601_
<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)> ->_CWE601_
