<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeConnection(org.apache.http.conn.OperatedClientConnection)> 
<android.net.http.HttpsConnection: void closeConnection()> 
<android.media.MediaScannerConnection: void disconnect()> 
<org.apache.http.impl.SocketHttpServerConnection: void close()> 
<android.hardware.usb.UsbDeviceConnection: void close()> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeExpiredConnections()> 
<android.bluetooth.BluetoothPbap: boolean disconnect()> 
<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()> 
<android.hardware.display.DisplayManagerGlobal: void disconnectWifiDisplay()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> 
<org.apache.http.impl.conn.SingleClientConnManager: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<javax.obex.ServerSession: void handleDisconnectRequest()> 
<org.apache.http.impl.conn.DefaultClientConnection: void close()> 
<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()> 
<libcore.net.url.FtpURLConnection: void connectInternal()> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)> 
<libcore.net.http.HttpConnection: void closeSocketAndStreams()> 
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> 
<org.jivesoftware.smack.XMPPConnection: void close()> 
<android.database.sqlite.SQLiteConnection: void close()> 
<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)> 
<org.apache.http.impl.SocketHttpClientConnection: void close()> 
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> 
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> 
<android.database.sqlite.SQLiteConnectionPool: void reconfigureAllConnectionsLocked()> 
<libcore.net.url.JarURLConnectionImpl: void closeCachedFiles()> 
<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<android.net.http.AndroidHttpClientConnection: void close()> 
<libcore.net.http.HttpsURLConnectionImpl: void disconnect()> 
<android.net.wifi.WifiNative: void closeSupplicantConnection()> 
<android.nfc.tech.BasicTagTechnology: void close()> 
<android.database.sqlite.SQLiteConnectionPool: void closeExcessConnectionsAndLogExceptionsLocked()> 
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()> 
<java.net.PlainDatagramSocketImpl: void disconnect()> 
<android.database.sqlite.SQLiteConnectionPool: void close()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeExpiredConnections()> 
<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()> 
<libcore.net.url.FtpURLConnection: void connect()> 
<android.net.http.HttpConnection: void closeConnection()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeConnection(org.apache.http.impl.conn.tsccm.BasicPoolEntry)> 
<org.apache.http.protocol.HttpRequestExecutor: void closeConnection(org.apache.http.HttpClientConnection)> 
<android.net.wifi.WifiManager: boolean disconnect()> 
<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel disconnect()> 
<android.hardware.display.DisplayManager: void disconnectWifiDisplay()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void closeExpiredConnections()> 
<org.jivesoftware.smack.XMPPConnection: void connectionEstablished(org.jivesoftware.smack.XMPPConnection)> 
<libcore.net.http.HttpURLConnectionImpl: void disconnect()> 
<libcore.net.http.HttpConnection: libcore.net.http.HttpConnection connect(java.net.URI,javax.net.ssl.SSLSocketFactory,java.net.Proxy,boolean,int)> 
<android.bluetooth.BluetoothHeadset: boolean disconnectAudio()> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void closeIdleConnections(long,java.util.concurrent.TimeUnit)> 
<android.database.sqlite.SQLiteConnectionPool: void discardAcquiredConnectionsLocked()> 
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> 
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()> 
<org.apache.http.impl.conn.SingleClientConnManager: void closeExpiredConnections()> 
<libcore.net.http.HttpsURLConnectionImpl: void connect()> 
