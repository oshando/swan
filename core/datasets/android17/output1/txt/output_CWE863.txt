<org.jivesoftware.smack.XMPPConnection: java.lang.String getConnectionID()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration,javax.net.SocketFactory)> ->_CWE863_
<android.net.http.HttpConnection: void restartConnection(boolean)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void onConnectionLeaked()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()> ->_CWE863_
<javax.obex.ServerSession: void handleDisconnectRequest()> ->_CWE863_
<android.database.sqlite.SQLiteConnection: int getConnectionId()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection,android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)> ->_CWE863_
<libcore.net.url.FtpURLConnection: void connect()> ->_CWE863_
<android.media.MediaScannerConnection: void connect()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: boolean isSecureConnection()> ->_CWE863_
<org.apache.http.impl.client.AbstractHttpClient: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: org.jivesoftware.smack.ConnectionConfiguration getConnectionConfiguration()> ->_CWE863_
<libcore.net.http.HttpURLConnectionImpl: java.net.InetAddress getConnectToInetAddress()> ->_CWE863_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> ->_CWE863_
<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)> ->_CWE863_
<org.jivesoftware.smack.SSLXMPPConnection: boolean isSecureConnection()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: boolean isSessionBlockingImportantConnectionWaitersLocked(boolean,int)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)> ->_CWE863_
<android.net.http.HttpsConnection: void closeConnection()> ->_CWE863_
<android.media.MediaScannerConnection: void disconnect()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void setLocalConnectionId(int)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: boolean isConnected()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,int,android.os.CancellationSignal)> ->_CWE863_
<libcore.net.http.HttpsURLConnectionImpl: void checkConnected()> ->_CWE863_
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: boolean shouldYieldConnection(android.database.sqlite.SQLiteConnection,int)> ->_CWE863_
<android.net.http.HttpConnection: void closeConnection()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: java.net.Socket getSocketConnection()> ->_CWE863_
<android.net.wifi.WifiManager: boolean disconnect()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: int getLocalConnectionId()> ->_CWE863_
<java.net.URLConnection: int getConnectTimeout()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,int,android.os.CancellationSignal)> ->_CWE863_
<android.net.http.HttpConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> ->_CWE863_
<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void removeConnectionListener(org.jivesoftware.smack.ConnectionEstablishedListener)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()> ->_CWE863_
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> ->_CWE863_
<libcore.net.http.HttpURLConnectionImpl: java.lang.String getConnectToHost()> ->_CWE863_
<libcore.net.url.FtpURLConnection: void connectInternal()> ->_CWE863_
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)> ->_CWE863_
<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel disconnect()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()> ->_CWE863_
<android.net.http.HttpsConnection: void restartConnection(boolean)> ->_CWE863_
<libcore.net.http.HttpsURLConnectionImpl: void disconnect()> ->_CWE863_
<org.jivesoftware.smack.SASLAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> ->_CWE863_
<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)> ->_CWE863_
<android.hardware.display.DisplayManager: void disconnectWifiDisplay()> ->_CWE863_
<org.jivesoftware.smack.SASLAuthentication: java.lang.String authenticateAnonymously()> ->_CWE863_
<android.media.MediaScannerConnection: boolean isConnected()> ->_CWE863_
<android.bluetooth.BluetoothPbap: boolean disconnect()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)> ->_CWE863_
<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void logConnectionPoolBusyLocked(long,int)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)> ->_CWE863_
<android.bluetooth.BluetoothHeadset: boolean disconnect(android.bluetooth.BluetoothDevice)> ->_CWE863_
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void setConnected(boolean)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void connectionEstablished(org.jivesoftware.smack.XMPPConnection)> ->_CWE863_
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void addConnectionListener(org.jivesoftware.smack.ConnectionEstablishedListener)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void closeExcessConnectionsAndLogExceptionsLocked()> ->_CWE863_
<libcore.net.http.HttpURLConnectionImpl: void disconnect()> ->_CWE863_
<libcore.net.http.HttpsURLConnectionImpl: int getConnectTimeout()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> ->_CWE863_
<libcore.net.http.HttpConnection: libcore.net.http.HttpConnection connect(java.net.URI,javax.net.ssl.SSLSocketFactory,java.net.Proxy,boolean,int)> ->_CWE863_
<libcore.net.url.JarURLConnectionImpl: void connect()> ->_CWE863_
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: javax.sip.header.AuthorizationHeader getAuthorization(java.lang.String,java.lang.String,java.lang.String,javax.sip.header.WWWAuthenticateHeader,gov.nist.javax.sip.clientauthutils.UserCredentialHash)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)> ->_CWE863_
<libcore.net.http.HttpURLConnectionImpl: int getConnectToPort()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(android.database.sqlite.SQLiteConnection)> ->_CWE863_
<libcore.net.http.HttpConnection: javax.net.ssl.SSLSocket getSecureSocketIfConnected()> ->_CWE863_
<android.bluetooth.BluetoothInputDevice: boolean disconnect(android.bluetooth.BluetoothDevice)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()> ->_CWE863_
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()> ->_CWE863_
<libcore.net.http.HttpURLConnectionImpl: void connect()> ->_CWE863_
<android.net.http.Connection: boolean openHttpConnection(android.net.http.Request)> ->_CWE863_
<android.hardware.display.DisplayManagerGlobal: void disconnectWifiDisplay()> ->_CWE863_
<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()> ->_CWE863_
<android.bluetooth.BluetoothHeadset: boolean disconnectAudio()> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void releaseConnection(android.database.sqlite.SQLiteConnection)> ->_CWE863_
<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> ->_CWE863_
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void discardAcquiredConnectionsLocked()> ->_CWE863_
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> ->_CWE863_
<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> ->_CWE863_
<java.net.PlainDatagramSocketImpl: void disconnect()> ->_CWE863_
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> ->_CWE863_
<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()> ->_CWE863_
<java.net.URLConnection: void setConnectTimeout(int)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void resetConnection(java.lang.Exception)> ->_CWE863_
<libcore.net.http.HttpsURLConnectionImpl: void connect()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void addConnectionListener(org.jivesoftware.smack.ConnectionListener)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void removeConnectionListener(org.jivesoftware.smack.ConnectionListener)> ->_CWE863_
<android.bluetooth.BluetoothPan: boolean disconnect(android.bluetooth.BluetoothDevice)> ->_CWE863_
<android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()> ->_CWE863_
<org.apache.http.client.protocol.ClientContextConfigurer: void setCredentialsProvider(org.apache.http.client.CredentialsProvider)> ->_CWE863_
<android.bluetooth.BluetoothA2dp: boolean disconnect(android.bluetooth.BluetoothDevice)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread,long,int,boolean,java.lang.String,int)> ->_CWE863_
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: javax.sip.header.AuthorizationHeader getAuthorization(java.lang.String,java.lang.String,java.lang.String,javax.sip.header.WWWAuthenticateHeader,gov.nist.javax.sip.clientauthutils.UserCredentials)> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void reconfigureAllConnectionsLocked()> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void login(java.lang.String,java.lang.String,java.lang.String)> ->_CWE863_
<android.media.MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void login(java.lang.String,java.lang.String)> ->_CWE863_
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])> ->_CWE863_
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])> ->_CWE863_
<android.database.sqlite.SQLiteConnectionPool: void cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> ->_CWE863_
<org.jivesoftware.smack.XMPPConnection: void login(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,long,boolean,java.util.List,boolean,long,int,boolean,org.jivesoftware.smack.packet.HeartbeatStat,java.util.Map,int)> ->_CWE863_
