<org.apache.http.client.params.ClientParamBean: void setHandleAuthentication(boolean)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams)> 
<android.net.wifi.WifiManager: void connect(int,android.net.wifi.WifiManager$ActionListener)> 
<android.bluetooth.BluetoothSocket: void connect()> 
<android.media.AudioService: void broadcastScoConnectionState(int)> 
<android.opengl.GLLogWrapper: void startLogIndices()> 
<java.lang.SecurityManager: void checkConnect(java.lang.String,int)> 
<android.view.accessibility.AccessibilityNodeInfo: boolean canPerformRequestOverConnection(long)> 
<android.os.StrictMode: void onServiceConnectionLeaked(java.lang.Throwable)> 
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)> 
<net.oauth.client.URLConnectionResponse: void <init>(net.oauth.http.HttpMessage,java.lang.String,byte[],java.net.URLConnection)> 
<android.media.AudioService: void onSetRsxConnectionState(int,int)> 
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.clientauthutils.AuthenticationHelper getAuthenticationHelper(gov.nist.javax.sip.clientauthutils.AccountManager,javax.sip.header.HeaderFactory)> 
<libcore.net.url.FileHandler: java.net.URLConnection openConnection(java.net.URL)> 
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,int,android.os.CancellationSignal)> 
<java.net.PlainSocketImpl: void connect(java.net.InetAddress,int,int)> 
<android.bluetooth.BluetoothHeadset: boolean rejectIncomingConnect(android.bluetooth.BluetoothDevice)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<android.net.LinkSocket: void connect(java.net.SocketAddress,int)> 
<android.filterfw.core.FilterGraph: void discardUnconnectedOutputs()> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)> 
<org.apache.http.conn.params.ConnManagerParams: org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams)> 
<android.accounts.AccountManagerService: void checkCallingUidAgainstAuthenticator(android.accounts.Account)> 
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> 
<org.apache.http.impl.client.AbstractHttpClient: void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<android.net.wifi.WifiStateMachine: void sendSupplicantConnectionChangedBroadcast(boolean)> 
<org.apache.http.client.params.HttpClientParams: void setAuthenticating(org.apache.http.params.HttpParams,boolean)> 
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)> 
<org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)> 
<net.oauth.http.HttpResponseMessage: void dump(java.util.Map)> 
<net.oauth.OAuthMessage: void addRequiredParameters(net.oauth.OAuthAccessor)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler()> 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<android.bluetooth.BluetoothInputDevice: boolean connect(android.bluetooth.BluetoothDevice)> 
<org.jivesoftware.smack.PacketReader: org.jivesoftware.smack.packet.Authentication parseAuthentication(org.xmlpull.v1.XmlPullParser)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void connect(java.net.SocketAddress)> 
<android.accounts.ChooseTypeAndAccountActivity: void runAddAccountForAuthenticator(java.lang.String)> 
<android.opengl.GLLogWrapper: void endLogIndices()> 
<android.bluetooth.BluetoothHeadset: boolean connect(android.bluetooth.BluetoothDevice)> 
<org.jivesoftware.smack.XMPPConnection: void setConnected(boolean)> 
<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)> 
<org.apache.http.client.params.ClientParamBean: void setConnectionManagerFactory(org.apache.http.conn.ClientConnectionManagerFactory)> 
<android.webkit.WebViewClassic: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> 
<android.webkit.CallbackProxy: void onReceivedLoginRequest(java.lang.String,java.lang.String,java.lang.String)> 
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> 
<android.net.wifi.WifiManager: void connect(android.net.wifi.WifiConfiguration,android.net.wifi.WifiManager$ActionListener)> 
<libcore.net.http.HttpURLConnectionImpl: void connect()> 
<android.net.http.Connection: boolean openHttpConnection(android.net.http.Request)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.OperatedClientConnection createConnection()> 
<jp.co.omronsoft.openwnn.OpenWnnJAJP: int commitTextThroughInputConnection(java.lang.String)> 
<libcore.io.ForwardingOs: void connect(java.io.FileDescriptor,java.net.InetAddress,int)> 
<android.hardware.display.DisplayManager: void connectWifiDisplay(java.lang.String)> 
<android.view.accessibility.AccessibilityInteractionClient: void addConnection(int,android.accessibilityservice.IAccessibilityServiceConnection)> 
<java.io.PipedWriter: void connect(java.io.PipedReader)> 
<java.net.PlainSocketImpl: void connect(java.net.InetAddress,int)> 
<android.bluetooth.BluetoothHealth: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)> 
<org.apache.http.impl.auth.AuthSchemeBase: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> 
<android.view.accessibility.AccessibilityNodeInfo: void setConnectionId(int)> 
<net.oauth.OAuthMessage: void addParameter(java.util.Map$Entry)> 
<net.oauth.signature.OAuthSignatureMethod: void validate(net.oauth.OAuthMessage)> 
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.sasl.SASLMechanism: void authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.jivesoftware.smack.XMPPConnection: void resetConnection(java.lang.Exception)> 
<org.jivesoftware.smack.XMPPConnection: void addConnectionListener(org.jivesoftware.smack.ConnectionListener)> 
<org.jivesoftware.smack.XMPPConnection: void removeConnectionListener(org.jivesoftware.smack.ConnectionListener)> 
<android.filterfw.core.OutputPort: void connectTo(android.filterfw.core.InputPort)> 
<android.net.LocalSocketImpl: void connect(android.net.LocalSocketAddress,int)> 
<android.speech.tts.TextToSpeech: java.lang.Object runActionNoReconnect(android.speech.tts.TextToSpeech$Action,java.lang.Object,java.lang.String)> 
<org.jivesoftware.smack.ConnectionConfiguration: void setSASLAuthenticationEnabled(boolean)> 
<android.media.MediaScannerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> 
<android.database.sqlite.SQLiteConnectionPool: void cancelConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> 
<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)> 
<javax.obex.ServerRequestHandler: int onConnect(javax.obex.HeaderSet,javax.obex.HeaderSet)> 
<android.nfc.tech.NdefFormatable: void connect()> 
<org.apache.http.impl.conn.SingleClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<android.nfc.tech.NfcBarcode: void connect()> 
<android.view.accessibility.AccessibilityInteractionClient: void removeConnection(int)> 
<android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(android.database.sqlite.SQLiteConnection,android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)> 
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection openConnectionLocked(android.database.sqlite.SQLiteDatabaseConfiguration,boolean)> 
<org.jivesoftware.smack.SASLAuthentication: void authenticated()> 
<org.apache.http.conn.params.ConnManagerParams: int getMaxTotalConnections(org.apache.http.params.HttpParams)> 
<android.media.RemoteDisplay: void notifyDisplayConnected(android.view.Surface,int,int,int)> 
<android.net.wifi.SupplicantStateTracker: void handleNetworkConnectionFailure(int)> 
<android.nfc.Tag: void setConnectedTechnology(int)> 
<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)> 
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> 
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)> 
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)> 
<android.filterfw.core.FilterGraph: void setDiscardUnconnectedOutputs(boolean)> 
<android.media.AudioService: void sendDeviceConnectionIntent(int,int,java.lang.String)> 
<android.nfc.tech.BasicTagTechnology: void connect()> 
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)> 
<org.jivesoftware.smack.ProtoBufAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<org.apache.http.impl.AbstractHttpServerConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> 
<net.oauth.client.URLConnectionResponse: java.io.InputStream openBody()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)> 
<android.database.sqlite.SQLiteConnectionPool: boolean shouldYieldConnection(android.database.sqlite.SQLiteConnection,int)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy()> 
<android.nfc.tech.NfcBarcode: void reconnect()> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: org.apache.http.impl.conn.tsccm.ConnPoolByRoute createConnectionPool(long,java.util.concurrent.TimeUnit)> 
<org.jivesoftware.smack.NonSASLAuthentication: java.lang.String authenticateAnonymously()> 
<org.jivesoftware.smack.PacketReader: void addConnectionListener(org.jivesoftware.smack.ConnectionListener)> 
<libcore.net.url.FtpHandler: java.net.URLConnection openConnection(java.net.URL)> 
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)> 
<org.apache.http.conn.routing.RouteTracker: void connectProxy(org.apache.http.HttpHost,boolean)> 
<android.net.http.Request: void setConnection(android.net.http.Connection)> 
<org.jivesoftware.smack.XMPPConnection: void removeConnectionListener(org.jivesoftware.smack.ConnectionEstablishedListener)> 
<libcore.net.url.JarHandler: java.net.URLConnection openConnection(java.net.URL)> 
<org.jivesoftware.smackx.packet.VCard: void checkAuthenticated(org.jivesoftware.smack.XMPPConnection)> 
<gov.nist.javax.sip.SipStackImpl: gov.nist.javax.sip.clientauthutils.AuthenticationHelper getSecureAuthenticationHelper(gov.nist.javax.sip.clientauthutils.SecureAccountManager,javax.sip.header.HeaderFactory)> 
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)> 
<android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()> 
<android.net.http.HttpsConnection: void restartConnection(boolean)> 
<android.nfc.tech.BasicTagTechnology: void reconnect()> 
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> 
<java.net.PlainDatagramSocketImpl: void connect(java.net.InetAddress,int)> 
<java.net.PlainSocketImpl: void socksConnect(java.net.InetAddress,int,int)> 
<org.jivesoftware.smack.SASLAuthentication: java.lang.String authenticateAnonymously()> 
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)> 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.ProxyAuthenticateHeader createProxyAuthenticateHeader(java.lang.String)> 
<android.os.storage.StorageEventListener: void onUsbMassStorageConnectionChanged(boolean)> 
<android.database.sqlite.SQLiteConnectionPool: void logConnectionPoolBusyLocked(long,int)> 
<android.filterfw.core.FilterGraph: void preconnect(android.filterfw.core.OutputPort,android.filterfw.core.InputPort)> 
<android.nfc.tech.IsoDep: void reconnect()> 
<libcore.net.http.HttpHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> 
<java.net.PlainSocketImpl: void connect(java.lang.String,int)> 
<net.oauth.SimpleOAuthValidator: void validateMessage(net.oauth.OAuthMessage,net.oauth.OAuthAccessor)> 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<org.jivesoftware.smack.XMPPConnection: void addConnectionListener(org.jivesoftware.smack.ConnectionEstablishedListener)> 
<android.net.wifi.WifiManager: boolean reconnect()> 
<javax.obex.ObexHelper: byte[] computeAuthenticationChallenge(byte[],java.lang.String,boolean,boolean)> 
<android.media.AudioService: void onSetA2dpConnectionState(android.bluetooth.BluetoothDevice,int)> 
<android.nfc.tech.NfcB: void reconnect()> 
<android.nfc.tech.NfcA: void reconnect()> 
<android.nfc.tech.NfcF: void reconnect()> 
<android.nfc.tech.NfcV: void reconnect()> 
<android.net.LinkSocket: void connect(java.net.SocketAddress)> 
<org.jivesoftware.smack.SASLAuthentication: boolean hasAnonymousAuthentication()> 
<libcore.net.http.HttpsHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> 
<net.oauth.client.URLConnectionResponse: void dump(java.util.Map)> 
<android.webkit.BrowserFrame: void autoLogin(java.lang.String,java.lang.String,java.lang.String)> 
<android.nfc.tech.NdefFormatable: void reconnect()> 
<org.apache.http.impl.client.DefaultTargetAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<android.bluetooth.BluetoothHeadset: boolean connectAudio()> 
<org.apache.http.params.HttpConnectionParamBean: void setConnectionTimeout(int)> 
<libcore.net.url.FtpURLConnection: void login()> 
<android.nfc.tech.IsoDep: void connect()> 
<org.jivesoftware.smack.XMPPConnection: org.jivesoftware.smack.SASLAuthentication getSASLAuthentication()> 
<android.net.wifi.WifiNative: boolean connectToSupplicant()> 
<libcore.net.http.HttpHandler: java.net.URLConnection openConnection(java.net.URL)> 
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread,long,int,boolean,java.lang.String,int)> 
<libcore.io.BlockGuardOs: void connect(java.io.FileDescriptor,java.net.InetAddress,int)> 
<gov.nist.javax.sip.clientauthutils.CredentialsCache: void removeAuthenticationHeader(java.lang.String)> 
<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void connect(java.net.SocketAddress,int)> 
<org.jivesoftware.smack.XMPPConnection: void login(java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.XMPPConnection: void login(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,long,boolean,java.util.List,boolean,long,int,boolean,org.jivesoftware.smack.packet.HeartbeatStat,java.util.Map,int)> 
<net.oauth.OAuthMessage: void addParameters(java.util.Collection)> 
<android.net.http.HttpConnection: void restartConnection(boolean)> 
<android.database.sqlite.SQLiteConnectionPool: void onConnectionLeaked()> 
<gov.nist.javax.sip.header.AuthenticationInfo: java.lang.String getAuthenticationInfo()> 
<jp.co.omronsoft.openwnn.JAJP.OpenWnnClauseConverterJAJP: boolean connectible(int,int)> 
<android.nfc.tech.MifareClassic: void reconnect()> 
<javax.obex.HeaderSet: void createAuthenticationChallenge(java.lang.String,boolean,boolean)> 
<android.net.LinkSocket: void connect(int)> 
<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> 
<android.media.MediaScannerConnection: void connect()> 
<android.nfc.tech.Ndef: void connect()> 
<android.os.storage.MountServiceListener: void onUsbMassStorageConnectionChanged(boolean)> 
<libcore.net.http.HttpsHandler: java.net.URLConnection openConnection(java.net.URL)> 
<org.jivesoftware.smack.SASLAuthentication: boolean hasNonAnonymousAuthentication()> 
<org.jivesoftware.smack.XMPPConnection: void setAuthenticated(boolean)> 
<android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.os.CancellationSignal)> 
<org.jivesoftware.smack.XMPPConnection: void setLocalConnectionId(int)> 
<android.media.AudioService: void onSetWiredDeviceConnectionState(int,int,java.lang.String)> 
<android.view.accessibility.AccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)> 
<libcore.net.http.HttpsURLConnectionImpl: void checkConnected()> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ClientConnectionManager createClientConnectionManager()> 
<org.apache.http.impl.client.AbstractHttpClient: void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler)> 
<android.media.AudioManager: int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice,int)> 
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)> 
<libcore.io.IoBridge: boolean connectErrno(java.io.FileDescriptor,java.net.InetAddress,int,int)> 
<android.bluetooth.BluetoothA2dp: boolean connect(android.bluetooth.BluetoothDevice)> 
<android.nfc.tech.Ndef: void reconnect()> 
<android.database.sqlite.SQLiteConnectionPool: android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,int,android.os.CancellationSignal)> 
<org.jivesoftware.smack.PacketReader: void notifyConnectionError(java.lang.Exception)> 
<android.net.http.HttpConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> 
<android.nfc.tech.NfcV: void connect()> 
<android.nfc.tech.NfcF: void connect()> 
<android.nfc.tech.NfcB: void connect()> 
<android.nfc.tech.NfcA: void connect()> 
<android.nfc.tech.MifareClassic: void connect()> 
<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)> 
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)> 
<javax.obex.ClientSession: void setConnectionID(long)> 
<org.apache.commons.logging.LogSource: org.apache.commons.logging.Log makeNewLogInstance(java.lang.String)> 
<android.bluetooth.BluetoothPan: boolean connect(android.bluetooth.BluetoothDevice)> 
<net.oauth.http.HttpMessageDecoder: void dump(java.util.Map)> 
<net.oauth.OAuthMessage: void sign(net.oauth.OAuthAccessor)> 
<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)> 
<org.apache.http.impl.client.DefaultRequestDirector: void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext)> 
<java.net.PlainSocketImpl: void connect(java.net.SocketAddress,int)> 
<android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)> 
<android.bluetooth.BluetoothHeadset: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)> 
<org.apache.http.conn.params.ConnManagerParamBean: void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean)> 
<org.apache.http.conn.routing.RouteTracker: void connectTarget(boolean)> 
<org.apache.http.impl.AbstractHttpClientConnection: org.apache.http.impl.HttpConnectionMetricsImpl createConnectionMetrics(org.apache.http.io.HttpTransportMetrics,org.apache.http.io.HttpTransportMetrics)> 
<android.net.http.Headers: void setConnectionType(org.apache.http.util.CharArrayBuffer,int)> 
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: void removeCachedAuthenticationHeaders(java.lang.String)> 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.WWWAuthenticateHeader createWWWAuthenticateHeader(java.lang.String)> 
<javax.obex.ServerRequestHandler: void onAuthenticationFailure(byte[])> 
<android.database.sqlite.SQLiteConnectionPool: void recycleConnectionWaiterLocked(android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> 
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String)> 
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress,int)> 
<android.net.LinkSocket: void connect(java.lang.String,int,int)> 
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> 
<android.accounts.AccountManagerService: void checkAuthenticateAccountsPermission(android.accounts.Account)> 
<libcore.io.IoBridge: boolean connect(java.io.FileDescriptor,java.net.InetAddress,int,int)> 
<javax.obex.ClientSession: void setAuthenticator(javax.obex.Authenticator)> 
<android.accessibilityservice.UiTestAutomationBridge: void ensureValidConnection(int)> 
<net.oauth.http.HttpMessage: void dump(java.util.Map)> 
<org.apache.http.impl.conn.tsccm.ConnPoolByRoute: void setMaxTotalConnections(int)> 
<android.webkit.WebView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> 
<android.database.sqlite.SQLiteConnectionPool: void releaseConnection(android.database.sqlite.SQLiteConnection)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)> 
<org.apache.http.impl.client.DefaultProxyAuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)> 
<java.net.URLConnection: void setConnectTimeout(int)> 
<java.net.Socket: void connect(java.net.SocketAddress)> 
<android.accounts.GrantCredentialsPermissionActivity: void setAccountAuthenticatorResult(android.os.Bundle)> 
<android.filterfw.core.FilterGraph: void connect(android.filterfw.core.Filter,java.lang.String,android.filterfw.core.Filter,java.lang.String)> 
<net.oauth.signature.OAuthSignatureMethod: void sign(net.oauth.OAuthMessage)> 
<android.view.View: boolean checkInputConnectionProxy(android.view.View)> 
<org.jivesoftware.smack.XMPPConnection: void login(java.lang.String,java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.XMPPConnection: void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration,javax.net.SocketFactory)> 
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> 
<android.nfc.tech.MifareUltralight: void connect()> 
<net.oauth.client.URLConnectionClient: net.oauth.http.HttpResponseMessage execute(net.oauth.http.HttpMessage)> 
<java.net.ProxySelectorImpl: void connectFailed(java.net.URI,java.net.SocketAddress,java.io.IOException)> 
<org.jivesoftware.smack.NonSASLAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<libcore.io.IoBridge: boolean connect(java.io.FileDescriptor,java.net.InetAddress,int)> 
<org.jivesoftware.smack.SASLAuthentication: void authenticationFailed()> 
<android.nfc.tech.MifareUltralight: void reconnect()> 
<java.io.PipedOutputStream: void connect(java.io.PipedInputStream)> 
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy()> 
<gov.nist.javax.sip.header.HeaderFactoryImpl: javax.sip.header.AuthenticationInfoHeader createAuthenticationInfoHeader(java.lang.String)> 
<android.filterfw.core.FilterGraph: void connectPorts()> 
<android.filterfw.core.FilterFunction: void connectFilterOutputs()> 
<android.net.http.IdleCache: boolean cacheConnection(org.apache.http.HttpHost,android.net.http.Connection)> 
<javax.obex.ServerRequestHandler: void setConnectionId(long)> 
<libcore.net.url.FtpHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> 
<android.widget.AbsListView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> 
<org.jivesoftware.smack.SASLAuthentication: java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String)> 
<org.jivesoftware.smack.PacketReader: void removeConnectionListener(org.jivesoftware.smack.ConnectionListener)> 
<android.view.accessibility.AccessibilityRecord: void setConnectionId(int)> 
<android.view.accessibility.AccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection)> 
<java.net.DatagramSocket: void connect(java.net.SocketAddress)> 
<android.net.wifi.WifiNative: java.lang.String p2pConnect(android.net.wifi.p2p.WifiP2pConfig,boolean)> 
<gov.nist.javax.sip.stack.SIPTransactionStack: void setMaxConnections(int)> 
<android.net.LinkSocket: void connect(java.lang.String,int)> 
<org.apache.http.params.HttpConnectionParams: void setConnectionTimeout(org.apache.http.params.HttpParams,int)> 
<android.webkit.BrowserFrame: void didReceiveAuthenticationChallenge(int,java.lang.String,java.lang.String,boolean,boolean)> 
<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)> 
<libcore.net.url.JarURLConnectionImpl: void connect()> 
<android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(android.database.sqlite.SQLiteConnection,int)> 
<android.net.wifi.p2p.WifiP2pManager: void connect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<android.view.inputmethod.InputMethodManager: void reportFinishInputConnection(android.view.inputmethod.InputConnection)> 
<gov.nist.javax.sip.clientauthutils.AuthenticationHelperImpl: void setAuthenticationHeaders(javax.sip.message.Request)> 
<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)> 
<java.sql.DriverManager: void setLoginTimeout(int)> 
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> 
<net.oauth.OAuthMessage: void validateMessage(net.oauth.OAuthAccessor,net.oauth.OAuthValidator)> 
<android.filterfw.core.FilterGraph: void connect(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> 
<android.nfc.tech.MifareClassic: boolean authenticate(int,byte[],boolean)> 
<org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<org.apache.http.impl.conn.DefaultClientConnectionOperator: void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)> 
<java.io.PipedReader: void connect(java.io.PipedWriter)> 
<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)> 
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> 
<gov.nist.core.LogWriter: void logInfo(java.lang.String)> 
<android.net.wifi.p2p.WifiP2pManager: void cancelConnect(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> 
<libcore.net.url.FileHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> 
<net.oauth.client.httpclient4.HttpClient4: net.oauth.http.HttpResponseMessage execute(net.oauth.http.HttpMessage)> 
<org.apache.http.conn.params.ConnManagerParamBean: void setMaxTotalConnections(int)> 
<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)> 
<android.view.ViewRootImpl: void dispatchFinishInputConnection(android.view.inputmethod.InputConnection)> 
<org.jivesoftware.smack.ProtoBufAuthentication: java.lang.String authenticateAnonymously()> 
<java.net.Socket: void connect(java.net.SocketAddress,int)> 
<org.apache.http.impl.conn.SingleClientConnManager: void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit)> 
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,byte[])> 
<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,byte[])> 
<net.oauth.client.httpclient4.HttpMethodResponse: void dump(java.util.Map)> 
<android.hardware.display.DisplayManagerGlobal: void connectWifiDisplay(java.lang.String)> 
