<io.dropwizard.logging.DefaultLoggingFactory: ch.qos.logback.classic.LoggerContext getLoggerContext()> -> _SOURCES_
<io.dropwizard.jetty.BiDiGzipHandler: void setInflateNoWrap(boolean)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: void setIncludedMethods(java.util.Set)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setIdleTimeout(io.dropwizard.util.Duration)> -> _SINKS_
<io.dropwizard.util.JarLocation: java.util.Optional getVersion()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setMaxRequestHeaderSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: org.eclipse.jetty.server.ConnectionFactory getConnectionFactory()> -> _AUTHENTICATIONS_NEUTRAL__CWE306__SOURCES__CWE862_
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: void setIncludes(java.util.EnumSet)> -> _SINKS_
<io.dropwizard.jetty.NetUtil: int getTcpBacklog()> -> _SOURCES_
<io.dropwizard.validation.valuehandling.OptionalIntValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> -> _SOURCES_
<io.dropwizard.logging.json.layout.EventJsonLayout: void setJsonProtocolVersion(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: void setExcludedUserAgentPatterns(java.util.Set)> -> _SINKS_
<io.dropwizard.jackson.GuavaExtrasModule: java.lang.String getModuleName()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Duration getBlockingTimeout()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.net.URI getOcspResponderUrl()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: boolean getAllowRenegotiation()> -> _SOURCES_
<io.dropwizard.logging.ConsoleAppenderFactory: void setTarget(io.dropwizard.logging.ConsoleAppenderFactory$ConsoleStream)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: java.lang.String getBindHost()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: java.lang.String getThreshold()> -> _SOURCES_
<io.dropwizard.jetty.ServerPushFilterFactory: java.util.List getRefererHosts()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: void setArchivedFileCount(int)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: java.lang.String getLogFormat()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: void setCurrentLogFilename(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: void setNeverBlock(boolean)> -> _SINKS_
<io.dropwizard.validation.valuehandling.OptionalLongValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: int getQueueSize()> -> _SOURCES_
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: void setResponseHeaders(java.util.Set)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setHeaderCacheSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getSupportedCipherSuites()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyManagerPassword()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: void setPort(int)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStorePath(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setCrlPath(java.io.File)> -> _SINKS_
<io.dropwizard.jetty.MutableServletContextHandler: void setSecurityEnabled(boolean)> -> _SINKS_
<io.dropwizard.jackson.DiscoverableSubtypeResolver: com.google.common.collect.ImmutableList getDiscoveredSubtypes()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStoreProvider()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: org.eclipse.jetty.server.HttpConnectionFactory buildHttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration)> -> _CWE306__CWE862__AUTHENTICATIONS_TO_HIGH_
<io.dropwizard.jetty.HttpsConnectorFactory: void setEnableOCSP(java.lang.Boolean)> -> _SINKS_
<io.dropwizard.logging.UdpSocketAppenderFactory: java.lang.String getHost()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: int getDeflateCompressionLevel()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getExcludedProtocols()> -> _SOURCES_
<io.dropwizard.logging.TcpSocketAppenderFactory: void setPort(int)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: int getPort()> -> _SOURCES_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setPrettyPrint(boolean)> -> _SINKS_
<io.dropwizard.jetty.ServerPushFilterFactory: void setMaxAssociations(int)> -> _SINKS_
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: void setFlattenMdc(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setOcspResponderUrl(java.net.URI)> -> _SINKS_
<io.dropwizard.logging.FileAppenderFactory: java.lang.String getArchivedLogFilenamePattern()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: io.dropwizard.logging.SyslogAppenderFactory$Facility getFacility()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStoreType()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: java.lang.String getCurrentLogFilename()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: void setLayout(io.dropwizard.logging.layout.DiscoverableLayoutFactory)> -> _SINKS_
<io.dropwizard.logging.DefaultLoggingFactory: java.lang.String getLevel()> -> _SOURCES_
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: void setIncludesMdcKeys(java.util.Set)> -> _SINKS_
<io.dropwizard.jetty.setup.ServletEnvironment: void setSecurityHandler(org.eclipse.jetty.security.SecurityHandler)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getEnableCRLDP()> -> _SOURCES_
<io.dropwizard.logging.LoggerConfiguration: void setAdditive(boolean)> -> _SINKS_
<io.dropwizard.validation.selfvalidating.ValidationCaller: java.lang.Object getValidationObject()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setUseForwardedHeaders(boolean)> -> _SINKS_
<io.dropwizard.validation.selfvalidating.ViolationCollector: void setViolationOccurred(boolean)> -> _SINKS_
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: void setAppenders(com.google.common.collect.ImmutableList)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setMaxBufferPoolSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.setup.ServletEnvironment: void setResourceBase(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: void setQueueSize(int)> -> _SINKS_
<io.dropwizard.logging.TcpSocketAppenderFactory: void setConnectionTimeout(io.dropwizard.util.Duration)> -> _CWE306__SINKS__CWE862__AUTHENTICATIONS_TO_HIGH_
<io.dropwizard.jetty.NetUtil: io.dropwizard.jetty.LocalIpFilter getLocalIpFilter()> -> _SOURCES_
<io.dropwizard.jackson.FuzzyEnumModule: java.lang.String getModuleName()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setEnableCRLDP(java.lang.Boolean)> -> _SINKS_
<io.dropwizard.jetty.MutableServletContextHandler: void setSessionsEnabled(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setSupportedCipherSuites(java.util.List)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: void setMinimumEntitySize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.logging.LoggerConfiguration: java.lang.String getLevel()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStoreType()> -> _SOURCES_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: java.util.Map getCustomFieldNames()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: boolean getValidatePeers()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Duration getSoLingerTime()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: void setStackTracePrefix(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getCertAlias()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: io.dropwizard.util.Size getMaxFileSize()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: void setEnabled(boolean)> -> _SINKS_
<io.dropwizard.jetty.NetUtil: void setLocalIpFilter(io.dropwizard.jetty.LocalIpFilter)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: io.dropwizard.util.Size getMinimumEntitySize()> -> _SOURCES_
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: java.util.TimeZone getTimeZone()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: void setHost(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setExcludedCipherSuites(java.util.List)> -> _SINKS_
<io.dropwizard.logging.SyslogAppenderFactory: boolean getIncludeStackTrace()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: void setTimeZone(java.lang.String)> -> _SINKS_
<io.dropwizard.util.Generics: java.lang.Class getTypeParameter(java.lang.Class)> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setHttpCompliance(org.eclipse.jetty.http.HttpCompliance)> -> _SINKS_
<io.dropwizard.logging.TcpSocketAppenderFactory: io.dropwizard.util.Duration getConnectionTimeout()> -> _AUTHENTICATIONS_NEUTRAL__CWE306__SOURCES__CWE862_
<io.dropwizard.jetty.SslReload: void reload()> -> _SOURCES_
<io.dropwizard.logging.DefaultLoggingFactory: void setAppenders(java.util.List)> -> _SINKS_
<io.dropwizard.util.Duration: java.util.concurrent.TimeUnit getUnit()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setValidatePeers(boolean)> -> _SINKS_
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setJsonProtocolVersion(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.json.layout.AccessJsonLayout: java.lang.String getJsonProtocolVersion()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Duration getIdleTimeout()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setSelectorThreads(java.util.Optional)> -> _SINKS_
<io.dropwizard.logging.TcpSocketAppenderFactory: void setImmediateFlush(boolean)> -> _SINKS_
<io.dropwizard.jetty.ServerPushFilterFactory: void setRefererPorts(java.util.List)> -> _SINKS_
<io.dropwizard.logging.SyslogAppenderFactory: java.lang.String getHost()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: void setDeflateCompressionLevel(int)> -> _SINKS_
<io.dropwizard.logging.json.layout.AccessJsonLayout: com.google.common.collect.ImmutableSet getIncludes()> -> _SOURCES_
<io.dropwizard.jackson.FuzzyEnumModule: void setupModule(com.fasterxml.jackson.databind.Module$SetupContext)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setNeedClientAuth(java.lang.Boolean)> -> _SINKS_
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: com.codahale.metrics.Timer getTimer()> -> _SOURCES_
<io.dropwizard.logging.json.layout.EventJsonLayout: com.google.common.collect.ImmutableSet getIncludesMdcKeys()> -> _SOURCES_
<io.dropwizard.jetty.setup.ServletEnvironment: void setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)> -> _SINKS_
<io.dropwizard.request.logging.LogbackAccessRequestLogFactory: void setAppenders(com.google.common.collect.ImmutableList)> -> _SINKS_
<io.dropwizard.jetty.SslReload: org.eclipse.jetty.util.ssl.SslContextFactory getFactory()> -> _SOURCES_
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: void setTimeZone(java.util.TimeZone)> -> _SINKS_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setTimestampFormat(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.json.layout.EventJsonLayout: void setIncludesMdcKeys(java.util.Set)> -> _SINKS_
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: java.util.Set getRequestHeaders()> -> _SOURCES_
<io.dropwizard.jetty.NetUtil: java.util.Collection getAllLocalIPs()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setMinBufferPoolSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: java.util.EnumSet getIncludes()> -> _SOURCES_
<io.dropwizard.jetty.BiDiGzipHandler: io.dropwizard.jetty.BiDiGzipHandler$WrappedServletRequest wrapDeflatedRequest(javax.servlet.http.HttpServletRequest)> -> _SOURCES_
<io.dropwizard.jackson.DiscoverableSubtypeResolver: java.lang.ClassLoader getClassLoader()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getInputBufferSize()> -> _SOURCES_
<io.dropwizard.jetty.ServerPushFilterFactory: java.util.List getRefererPorts()> -> _SOURCES_
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setResponseHeaders(java.util.Set)> -> _SINKS_
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setIncludes(java.util.Set)> -> _SINKS_
<io.dropwizard.util.Duration: long getQuantity()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: void setBufferSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.setup.ServletEnvironment: void setInitParameter(java.lang.String,java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.ServerPushFilterFactory: io.dropwizard.util.Duration getAssociatePeriod()> -> _SOURCES_
<io.dropwizard.validation.valuehandling.OptionalDoubleValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> -> _SOURCES_
<ch.qos.logback.core.recovery.ResilentSocketOutputStream: java.lang.String getDescription()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStoreType(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setBufferPoolIncrement(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStoreProvider(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setBlockingTimeout(io.dropwizard.util.Duration)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStorePassword(java.lang.String)> -> _SINKS_
<io.dropwizard.jackson.GuavaExtrasModule: void setupModule(com.fasterxml.jackson.databind.Module$SetupContext)> -> _SINKS_
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: java.lang.String getProtocol()> -> _SOURCES_
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: void setRequestHeaders(java.util.Set)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: void setIncludeCallerData(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: long getMinRequestDataRate()> -> _SOURCES_
<io.dropwizard.logging.UdpSocketAppenderFactory: int getPort()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getBufferPoolIncrement()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: java.lang.Integer getAcceptQueueSize()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setExcludedProtocols(java.util.List)> -> _SINKS_
<io.dropwizard.logging.FileAppenderFactory: void setArchive(boolean)> -> _SINKS_
<io.dropwizard.logging.DefaultLoggingFactory: void setLevel(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setInheritChannel(boolean)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: void setLogFormat(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: java.util.Set getCompressedMimeTypes()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setEndpointIdentificationAlgorithm(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getExcludedCipherSuites()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setUseServerHeader(boolean)> -> _SINKS_
<io.dropwizard.validation.selfvalidating.ViolationCollector: javax.validation.ConstraintValidatorContext getContext()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: java.util.Optional getAcceptorThreads()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getWantClientAuth()> -> _SOURCES_
<io.dropwizard.jetty.NetUtil: int getDefaultTcpBacklog()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMinBufferPoolSize()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: io.dropwizard.logging.layout.DiscoverableLayoutFactory getLayout()> -> _SOURCES_
<io.dropwizard.jetty.BiDiGzipHandler: javax.servlet.http.HttpServletRequest removeContentHeaders(javax.servlet.http.HttpServletRequest)> -> _SOURCES_
<io.dropwizard.validation.selfvalidating.ValidationCaller: void setValidationObject(java.lang.Object)> -> _SINKS_
<io.dropwizard.logging.json.layout.AccessJsonLayout: com.google.common.collect.ImmutableSet getResponseHeaders()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: io.dropwizard.util.Size getBufferSize()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStoreType(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: void setThreshold(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: java.util.Set getIncludedMethods()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: com.google.common.collect.ImmutableList getFilterFactories()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getOutputBufferSize()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: void setDiscardingThreshold(int)> -> _SINKS_
<io.dropwizard.logging.DefaultLoggingFactory: void setLoggers(java.util.Map)> -> _SINKS_
<io.dropwizard.logging.FileAppenderFactory: io.dropwizard.util.Size getBufferSize()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: java.util.Set getExcludedUserAgentPatterns()> -> _SOURCES_
<io.dropwizard.logging.json.layout.JsonFormatter: java.lang.String toJson(java.util.Map)> -> _SINKS_
<io.dropwizard.logging.AbstractAppenderFactory: java.util.TimeZone getTimeZone()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: void setTimeZone(java.util.TimeZone)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setPort(int)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStorePassword()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getEnableOCSP()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: void setFacility(io.dropwizard.logging.SyslogAppenderFactory$Facility)> -> _SINKS_
<io.dropwizard.logging.SyslogAppenderFactory: void setIncludeStackTrace(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStorePath()> -> _SOURCES_
<io.dropwizard.jetty.ServerPushFilterFactory: void setRefererHosts(java.util.List)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setInputBufferSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.logging.FileAppenderFactory: int getArchivedFileCount()> -> _SOURCES_
<io.dropwizard.logging.DefaultLoggingFactory: java.io.PrintStream getConfigurationErrorsStream()> -> _SOURCES_
<io.dropwizard.jackson.DiscoverableSubtypeResolver: java.lang.Class loadClass(java.lang.String)> -> _SOURCES_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: java.lang.String getTimestampFormat()> -> _SOURCES_
<io.dropwizard.logging.DefaultLoggingFactory: com.google.common.collect.ImmutableList getAppenders()> -> _SOURCES_
<io.dropwizard.logging.UdpSocketAppenderFactory: void setHost(java.lang.String)> -> _SINKS_
<io.dropwizard.request.logging.LogbackAccessRequestLogFactory: com.google.common.collect.ImmutableList getAppenders()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: void setArchivedLogFilenamePattern(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.SslReload: void reload(org.eclipse.jetty.util.ssl.SslContextFactory)> -> _SOURCES_
<io.dropwizard.logging.TcpSocketAppenderFactory: int getPort()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStorePath()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: void setMaxFileSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setOutputBufferSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.ServerPushFilterFactory: void setAssociatePeriod(io.dropwizard.util.Duration)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setMaxCertPathLength(java.lang.Integer)> -> _SINKS_
<io.dropwizard.jetty.BiDiGzipHandler: void setInputBufferSize(int)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getJceProvider()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setJceProvider(java.lang.String)> -> _SINKS_
<io.dropwizard.validation.valuehandling.GuavaOptionalValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStoreProvider()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setValidateCerts(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setUseDateHeader(boolean)> -> _SINKS_
<io.dropwizard.logging.LoggerConfiguration: com.google.common.collect.ImmutableList getAppenders()> -> _SOURCES_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setCustomFieldNames(java.util.Map)> -> _SINKS_
<io.dropwizard.request.logging.ExternalRequestLogFactory: void setEnabled(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStorePassword()> -> _SOURCES_
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: java.util.Set getResponseHeaders()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: void setGzipCompatibleInflation(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setAcceptQueueSize(java.lang.Integer)> -> _SINKS_
<io.dropwizard.logging.TcpSocketAppenderFactory: void setSendBufferSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.logging.LoggingUtil: ch.qos.logback.classic.LoggerContext getLoggerContext()> -> _SOURCES_
<io.dropwizard.jetty.setup.ServletEnvironment: void setBaseResource(org.eclipse.jetty.util.resource.Resource)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMaxResponseHeaderSize()> -> _SOURCES_
<io.dropwizard.util.Generics: java.lang.Class getTypeParameter(java.lang.Class,java.lang.Class)> -> _SOURCES_
<io.dropwizard.logging.ConsoleAppenderFactory: io.dropwizard.logging.ConsoleAppenderFactory$ConsoleStream getTarget()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: ch.qos.logback.core.Appender build(ch.qos.logback.classic.LoggerContext,java.lang.String,io.dropwizard.logging.layout.LayoutFactory,io.dropwizard.logging.filter.LevelFilterFactory,io.dropwizard.logging.async.AsyncAppenderFactory)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setSoLingerTime(io.dropwizard.util.Duration)> -> _SINKS_
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: void setIncludes(java.util.EnumSet)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setWantClientAuth(java.lang.Boolean)> -> _SINKS_
<io.dropwizard.jetty.BiDiGzipHandler: io.dropwizard.jetty.BiDiGzipHandler$WrappedServletRequest wrapGzippedRequest(javax.servlet.http.HttpServletRequest)> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: java.util.Optional getSelectorThreads()> -> _SOURCES_
<io.dropwizard.jetty.GzipHandlerFactory: void setCompressedMimeTypes(java.util.Set)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getSupportedProtocols()> -> _SOURCES_
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setRequestHeaders(java.util.Set)> -> _SINKS_
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)> -> _CWE306__CWE862__AUTHENTICATIONS_TO_HIGH_
<io.dropwizard.jetty.HttpConnectorFactory: java.lang.String httpConnections()> -> _CWE306__CWE862__AUTHENTICATIONS_TO_HIGH_
<io.dropwizard.logging.TcpSocketAppenderFactory: java.lang.String getHost()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getNeedClientAuth()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setReuseAddress(boolean)> -> _SINKS_
<io.dropwizard.logging.UdpSocketAppenderFactory: void setPort(int)> -> _SINKS_
<io.dropwizard.jetty.GzipHandlerFactory: void setSyncFlush(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyManagerPassword(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.io.File getCrlPath()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setMaxResponseHeaderSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.jetty.NonblockingServletHolder: javax.servlet.Servlet getServlet()> -> _SOURCES_
<io.dropwizard.logging.LoggerConfiguration: void setLevel(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.NetUtil: int getTcpBacklog(int)> -> _SOURCES_
<io.dropwizard.util.Size: long getQuantity()> -> _SOURCES_
<io.dropwizard.jetty.ServerPushFilterFactory: void setEnabled(boolean)> -> _SINKS_
<io.dropwizard.jetty.ServerPushFilterFactory: int getMaxAssociations()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMaxBufferPoolSize()> -> _SOURCES_
<io.dropwizard.logging.TcpSocketAppenderFactory: void setHost(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.json.layout.EventJsonLayout: void setIncludes(java.util.Set)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setCertAlias(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.FileAppenderFactory: void setImmediateFlush(boolean)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: void setSupportedProtocols(java.util.List)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getHeaderCacheSize()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMaxRequestHeaderSize()> -> _SOURCES_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: java.util.Map getAdditionalFields()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: void setFilterFactories(java.util.List)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setMinRequestDataRate(long)> -> _SINKS_
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: java.util.List getProtocols()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: void setBindHost(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.SyslogAppenderFactory: int getPort()> -> _SOURCES_
<io.dropwizard.logging.AbstractAppenderFactory: int getDiscardingThreshold()> -> _SOURCES_
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: java.util.EnumSet getIncludes()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Integer getMaxCertPathLength()> -> _SOURCES_
<io.dropwizard.logging.LoggerConfiguration: void setAppenders(java.util.List)> -> _SINKS_
<io.dropwizard.logging.json.layout.EventJsonLayout: com.google.common.collect.ImmutableSet getIncludes()> -> _SOURCES_
<io.dropwizard.jetty.HttpConnectorFactory: org.eclipse.jetty.http.HttpCompliance getHttpCompliance()> -> _SOURCES_
<io.dropwizard.util.Size: io.dropwizard.util.SizeUnit getUnit()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStorePath(java.lang.String)> -> _SINKS_
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getEndpointIdentificationAlgorithm()> -> _SOURCES_
<io.dropwizard.logging.FileAppenderFactory: void setBufferSize(io.dropwizard.util.Size)> -> _SINKS_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setAdditionalFields(java.util.Map)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: void setAcceptorThreads(java.util.Optional)> -> _SINKS_
<io.dropwizard.jetty.HttpConnectorFactory: org.eclipse.jetty.server.ServerConnector buildConnector(org.eclipse.jetty.server.Server,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,java.lang.String,org.eclipse.jetty.util.thread.ThreadPool,org.eclipse.jetty.server.ConnectionFactory[])> -> _CWE306__AUTHENTICATIONS_TO_HIGH_
<io.dropwizard.logging.json.layout.EventJsonLayout: java.lang.String getJsonProtocolVersion()> -> _SOURCES_
<io.dropwizard.logging.TcpSocketAppenderFactory: io.dropwizard.util.Size getSendBufferSize()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setAllowRenegotiation(boolean)> -> _SINKS_
<io.dropwizard.logging.DefaultLoggingFactory: com.google.common.collect.ImmutableMap getLoggers()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStorePassword(java.lang.String)> -> _SINKS_
<io.dropwizard.logging.json.layout.AccessJsonLayout: com.google.common.collect.ImmutableSet getRequestHeaders()> -> _SOURCES_
<io.dropwizard.logging.SyslogAppenderFactory: java.lang.String getStackTracePrefix()> -> _SOURCES_
<io.dropwizard.logging.json.layout.MapBuilder: java.lang.String getFieldName(java.lang.String)> -> _SOURCES_
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: com.google.common.collect.ImmutableList getAppenders()> -> _SOURCES_
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setAppendLineSeparator(boolean)> -> _SINKS_
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: java.util.Set getIncludesMdcKeys()> -> _SOURCES_
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStoreProvider(java.lang.String)> -> _SINKS_
