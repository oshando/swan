***__sources__*** 

<io.dropwizard.logging.DefaultLoggingFactory: ch.qos.logback.classic.LoggerContext getLoggerContext()> 
<io.dropwizard.util.JarLocation: java.util.Optional getVersion()> 
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: org.eclipse.jetty.server.ConnectionFactory getConnectionFactory()> 
<io.dropwizard.jetty.NetUtil: int getTcpBacklog()> 
<io.dropwizard.validation.valuehandling.OptionalIntValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> 
<io.dropwizard.jackson.GuavaExtrasModule: java.lang.String getModuleName()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Duration getBlockingTimeout()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.net.URI getOcspResponderUrl()> 
<io.dropwizard.jetty.HttpsConnectorFactory: boolean getAllowRenegotiation()> 
<io.dropwizard.jetty.HttpConnectorFactory: java.lang.String getBindHost()> 
<io.dropwizard.logging.AbstractAppenderFactory: java.lang.String getThreshold()> 
<io.dropwizard.jetty.ServerPushFilterFactory: java.util.List getRefererHosts()> 
<io.dropwizard.logging.AbstractAppenderFactory: java.lang.String getLogFormat()> 
<io.dropwizard.validation.valuehandling.OptionalLongValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> 
<io.dropwizard.logging.AbstractAppenderFactory: int getQueueSize()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getSupportedCipherSuites()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyManagerPassword()> 
<io.dropwizard.jackson.DiscoverableSubtypeResolver: com.google.common.collect.ImmutableList getDiscoveredSubtypes()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStoreProvider()> 
<io.dropwizard.logging.UdpSocketAppenderFactory: java.lang.String getHost()> 
<io.dropwizard.jetty.GzipHandlerFactory: int getDeflateCompressionLevel()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getExcludedProtocols()> 
<io.dropwizard.jetty.HttpConnectorFactory: int getPort()> 
<io.dropwizard.logging.FileAppenderFactory: java.lang.String getArchivedLogFilenamePattern()> 
<io.dropwizard.logging.SyslogAppenderFactory: io.dropwizard.logging.SyslogAppenderFactory$Facility getFacility()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStoreType()> 
<io.dropwizard.logging.FileAppenderFactory: java.lang.String getCurrentLogFilename()> 
<io.dropwizard.logging.DefaultLoggingFactory: java.lang.String getLevel()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getEnableCRLDP()> 
<io.dropwizard.validation.selfvalidating.ValidationCaller: java.lang.Object getValidationObject()> 
<io.dropwizard.jetty.NetUtil: io.dropwizard.jetty.LocalIpFilter getLocalIpFilter()> 
<io.dropwizard.jackson.FuzzyEnumModule: java.lang.String getModuleName()> 
<io.dropwizard.logging.LoggerConfiguration: java.lang.String getLevel()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStoreType()> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: java.util.Map getCustomFieldNames()> 
<io.dropwizard.jetty.HttpsConnectorFactory: boolean getValidatePeers()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Duration getSoLingerTime()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getCertAlias()> 
<io.dropwizard.logging.FileAppenderFactory: io.dropwizard.util.Size getMaxFileSize()> 
<io.dropwizard.jetty.GzipHandlerFactory: io.dropwizard.util.Size getMinimumEntitySize()> 
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: java.util.TimeZone getTimeZone()> 
<io.dropwizard.logging.SyslogAppenderFactory: boolean getIncludeStackTrace()> 
<io.dropwizard.util.Generics: java.lang.Class getTypeParameter(java.lang.Class)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: io.dropwizard.util.Duration getConnectionTimeout()> 
<io.dropwizard.jetty.SslReload: void reload()> 
<io.dropwizard.util.Duration: java.util.concurrent.TimeUnit getUnit()> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: java.lang.String getJsonProtocolVersion()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Duration getIdleTimeout()> 
<io.dropwizard.logging.SyslogAppenderFactory: java.lang.String getHost()> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: com.google.common.collect.ImmutableSet getIncludes()> 
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: com.codahale.metrics.Timer getTimer()> 
<io.dropwizard.logging.json.layout.EventJsonLayout: com.google.common.collect.ImmutableSet getIncludesMdcKeys()> 
<io.dropwizard.jetty.SslReload: org.eclipse.jetty.util.ssl.SslContextFactory getFactory()> 
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: java.util.Set getRequestHeaders()> 
<io.dropwizard.jetty.NetUtil: java.util.Collection getAllLocalIPs()> 
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: java.util.EnumSet getIncludes()> 
<io.dropwizard.jetty.BiDiGzipHandler: io.dropwizard.jetty.BiDiGzipHandler$WrappedServletRequest wrapDeflatedRequest(javax.servlet.http.HttpServletRequest)> 
<io.dropwizard.jackson.DiscoverableSubtypeResolver: java.lang.ClassLoader getClassLoader()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getInputBufferSize()> 
<io.dropwizard.jetty.ServerPushFilterFactory: java.util.List getRefererPorts()> 
<io.dropwizard.util.Duration: long getQuantity()> 
<io.dropwizard.jetty.ServerPushFilterFactory: io.dropwizard.util.Duration getAssociatePeriod()> 
<io.dropwizard.validation.valuehandling.OptionalDoubleValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> 
<ch.qos.logback.core.recovery.ResilentSocketOutputStream: java.lang.String getDescription()> 
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: java.lang.String getProtocol()> 
<io.dropwizard.jetty.HttpConnectorFactory: long getMinRequestDataRate()> 
<io.dropwizard.logging.UdpSocketAppenderFactory: int getPort()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getBufferPoolIncrement()> 
<io.dropwizard.jetty.HttpConnectorFactory: java.lang.Integer getAcceptQueueSize()> 
<io.dropwizard.jetty.GzipHandlerFactory: java.util.Set getCompressedMimeTypes()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getExcludedCipherSuites()> 
<io.dropwizard.validation.selfvalidating.ViolationCollector: javax.validation.ConstraintValidatorContext getContext()> 
<io.dropwizard.jetty.HttpConnectorFactory: java.util.Optional getAcceptorThreads()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getWantClientAuth()> 
<io.dropwizard.jetty.NetUtil: int getDefaultTcpBacklog()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMinBufferPoolSize()> 
<io.dropwizard.logging.AbstractAppenderFactory: io.dropwizard.logging.layout.DiscoverableLayoutFactory getLayout()> 
<io.dropwizard.jetty.BiDiGzipHandler: javax.servlet.http.HttpServletRequest removeContentHeaders(javax.servlet.http.HttpServletRequest)> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: com.google.common.collect.ImmutableSet getResponseHeaders()> 
<io.dropwizard.jetty.GzipHandlerFactory: io.dropwizard.util.Size getBufferSize()> 
<io.dropwizard.jetty.GzipHandlerFactory: java.util.Set getIncludedMethods()> 
<io.dropwizard.logging.AbstractAppenderFactory: com.google.common.collect.ImmutableList getFilterFactories()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getOutputBufferSize()> 
<io.dropwizard.logging.FileAppenderFactory: io.dropwizard.util.Size getBufferSize()> 
<io.dropwizard.jetty.GzipHandlerFactory: java.util.Set getExcludedUserAgentPatterns()> 
<io.dropwizard.logging.AbstractAppenderFactory: java.util.TimeZone getTimeZone()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStorePassword()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getEnableOCSP()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getKeyStorePath()> 
<io.dropwizard.logging.FileAppenderFactory: int getArchivedFileCount()> 
<io.dropwizard.logging.DefaultLoggingFactory: java.io.PrintStream getConfigurationErrorsStream()> 
<io.dropwizard.jackson.DiscoverableSubtypeResolver: java.lang.Class loadClass(java.lang.String)> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: java.lang.String getTimestampFormat()> 
<io.dropwizard.logging.DefaultLoggingFactory: com.google.common.collect.ImmutableList getAppenders()> 
<io.dropwizard.request.logging.LogbackAccessRequestLogFactory: com.google.common.collect.ImmutableList getAppenders()> 
<io.dropwizard.jetty.SslReload: void reload(org.eclipse.jetty.util.ssl.SslContextFactory)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: int getPort()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStorePath()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getJceProvider()> 
<io.dropwizard.validation.valuehandling.GuavaOptionalValidatedValueUnwrapper: java.lang.reflect.Type getValidatedValueType(java.lang.reflect.Type)> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStoreProvider()> 
<io.dropwizard.logging.LoggerConfiguration: com.google.common.collect.ImmutableList getAppenders()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getTrustStorePassword()> 
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: java.util.Set getResponseHeaders()> 
<io.dropwizard.logging.LoggingUtil: ch.qos.logback.classic.LoggerContext getLoggerContext()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMaxResponseHeaderSize()> 
<io.dropwizard.util.Generics: java.lang.Class getTypeParameter(java.lang.Class,java.lang.Class)> 
<io.dropwizard.logging.ConsoleAppenderFactory: io.dropwizard.logging.ConsoleAppenderFactory$ConsoleStream getTarget()> 
<io.dropwizard.jetty.BiDiGzipHandler: io.dropwizard.jetty.BiDiGzipHandler$WrappedServletRequest wrapGzippedRequest(javax.servlet.http.HttpServletRequest)> 
<io.dropwizard.jetty.HttpConnectorFactory: java.util.Optional getSelectorThreads()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.util.List getSupportedProtocols()> 
<io.dropwizard.logging.TcpSocketAppenderFactory: java.lang.String getHost()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Boolean getNeedClientAuth()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.io.File getCrlPath()> 
<io.dropwizard.jetty.NonblockingServletHolder: javax.servlet.Servlet getServlet()> 
<io.dropwizard.jetty.NetUtil: int getTcpBacklog(int)> 
<io.dropwizard.util.Size: long getQuantity()> 
<io.dropwizard.jetty.ServerPushFilterFactory: int getMaxAssociations()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMaxBufferPoolSize()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getHeaderCacheSize()> 
<io.dropwizard.jetty.HttpConnectorFactory: io.dropwizard.util.Size getMaxRequestHeaderSize()> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: java.util.Map getAdditionalFields()> 
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: java.util.List getProtocols()> 
<io.dropwizard.logging.SyslogAppenderFactory: int getPort()> 
<io.dropwizard.logging.AbstractAppenderFactory: int getDiscardingThreshold()> 
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: java.util.EnumSet getIncludes()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.Integer getMaxCertPathLength()> 
<io.dropwizard.logging.json.layout.EventJsonLayout: com.google.common.collect.ImmutableSet getIncludes()> 
<io.dropwizard.jetty.HttpConnectorFactory: org.eclipse.jetty.http.HttpCompliance getHttpCompliance()> 
<io.dropwizard.util.Size: io.dropwizard.util.SizeUnit getUnit()> 
<io.dropwizard.jetty.HttpsConnectorFactory: java.lang.String getEndpointIdentificationAlgorithm()> 
<io.dropwizard.logging.json.layout.EventJsonLayout: java.lang.String getJsonProtocolVersion()> 
<io.dropwizard.logging.TcpSocketAppenderFactory: io.dropwizard.util.Size getSendBufferSize()> 
<io.dropwizard.logging.DefaultLoggingFactory: com.google.common.collect.ImmutableMap getLoggers()> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: com.google.common.collect.ImmutableSet getRequestHeaders()> 
<io.dropwizard.logging.SyslogAppenderFactory: java.lang.String getStackTracePrefix()> 
<io.dropwizard.logging.json.layout.MapBuilder: java.lang.String getFieldName(java.lang.String)> 
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: com.google.common.collect.ImmutableList getAppenders()> 
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: java.util.Set getIncludesMdcKeys()> 


***__sinks__*** 

<io.dropwizard.jetty.BiDiGzipHandler: void setInflateNoWrap(boolean)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setIncludedMethods(java.util.Set)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setIdleTimeout(io.dropwizard.util.Duration)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setMaxRequestHeaderSize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: void setIncludes(java.util.EnumSet)> 
<io.dropwizard.logging.json.layout.EventJsonLayout: void setJsonProtocolVersion(java.lang.String)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setExcludedUserAgentPatterns(java.util.Set)> 
<io.dropwizard.logging.ConsoleAppenderFactory: void setTarget(io.dropwizard.logging.ConsoleAppenderFactory$ConsoleStream)> 
<io.dropwizard.logging.FileAppenderFactory: void setArchivedFileCount(int)> 
<io.dropwizard.logging.FileAppenderFactory: void setCurrentLogFilename(java.lang.String)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setNeverBlock(boolean)> 
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: void setResponseHeaders(java.util.Set)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setHeaderCacheSize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.SyslogAppenderFactory: void setPort(int)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStorePath(java.lang.String)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setCrlPath(java.io.File)> 
<io.dropwizard.jetty.MutableServletContextHandler: void setSecurityEnabled(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setEnableOCSP(java.lang.Boolean)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: void setPort(int)> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setPrettyPrint(boolean)> 
<io.dropwizard.jetty.ServerPushFilterFactory: void setMaxAssociations(int)> 
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: void setFlattenMdc(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setOcspResponderUrl(java.net.URI)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setLayout(io.dropwizard.logging.layout.DiscoverableLayoutFactory)> 
<io.dropwizard.logging.json.EventJsonLayoutBaseFactory: void setIncludesMdcKeys(java.util.Set)> 
<io.dropwizard.jetty.setup.ServletEnvironment: void setSecurityHandler(org.eclipse.jetty.security.SecurityHandler)> 
<io.dropwizard.logging.LoggerConfiguration: void setAdditive(boolean)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setUseForwardedHeaders(boolean)> 
<io.dropwizard.validation.selfvalidating.ViolationCollector: void setViolationOccurred(boolean)> 
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: void setAppenders(com.google.common.collect.ImmutableList)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setMaxBufferPoolSize(io.dropwizard.util.Size)> 
<io.dropwizard.jetty.setup.ServletEnvironment: void setResourceBase(java.lang.String)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setQueueSize(int)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: void setConnectionTimeout(io.dropwizard.util.Duration)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setEnableCRLDP(java.lang.Boolean)> 
<io.dropwizard.jetty.MutableServletContextHandler: void setSessionsEnabled(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setSupportedCipherSuites(java.util.List)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setMinimumEntitySize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.SyslogAppenderFactory: void setStackTracePrefix(java.lang.String)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setEnabled(boolean)> 
<io.dropwizard.jetty.NetUtil: void setLocalIpFilter(io.dropwizard.jetty.LocalIpFilter)> 
<io.dropwizard.logging.SyslogAppenderFactory: void setHost(java.lang.String)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setExcludedCipherSuites(java.util.List)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setTimeZone(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setHttpCompliance(org.eclipse.jetty.http.HttpCompliance)> 
<io.dropwizard.logging.DefaultLoggingFactory: void setAppenders(java.util.List)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setValidatePeers(boolean)> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setJsonProtocolVersion(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setSelectorThreads(java.util.Optional)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: void setImmediateFlush(boolean)> 
<io.dropwizard.jetty.ServerPushFilterFactory: void setRefererPorts(java.util.List)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setDeflateCompressionLevel(int)> 
<io.dropwizard.jackson.FuzzyEnumModule: void setupModule(com.fasterxml.jackson.databind.Module$SetupContext)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setNeedClientAuth(java.lang.Boolean)> 
<io.dropwizard.jetty.setup.ServletEnvironment: void setSessionHandler(org.eclipse.jetty.server.session.SessionHandler)> 
<io.dropwizard.request.logging.LogbackAccessRequestLogFactory: void setAppenders(com.google.common.collect.ImmutableList)> 
<io.dropwizard.request.logging.old.LogbackClassicRequestLogFactory: void setTimeZone(java.util.TimeZone)> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setTimestampFormat(java.lang.String)> 
<io.dropwizard.logging.json.layout.EventJsonLayout: void setIncludesMdcKeys(java.util.Set)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setMinBufferPoolSize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setResponseHeaders(java.util.Set)> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setIncludes(java.util.Set)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setBufferSize(io.dropwizard.util.Size)> 
<io.dropwizard.jetty.setup.ServletEnvironment: void setInitParameter(java.lang.String,java.lang.String)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStoreType(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setBufferPoolIncrement(io.dropwizard.util.Size)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStoreProvider(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setBlockingTimeout(io.dropwizard.util.Duration)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStorePassword(java.lang.String)> 
<io.dropwizard.jackson.GuavaExtrasModule: void setupModule(com.fasterxml.jackson.databind.Module$SetupContext)> 
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: void setRequestHeaders(java.util.Set)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setIncludeCallerData(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setExcludedProtocols(java.util.List)> 
<io.dropwizard.logging.FileAppenderFactory: void setArchive(boolean)> 
<io.dropwizard.logging.DefaultLoggingFactory: void setLevel(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setInheritChannel(boolean)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setLogFormat(java.lang.String)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setEndpointIdentificationAlgorithm(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setUseServerHeader(boolean)> 
<io.dropwizard.validation.selfvalidating.ValidationCaller: void setValidationObject(java.lang.Object)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setTrustStoreType(java.lang.String)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setThreshold(java.lang.String)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setDiscardingThreshold(int)> 
<io.dropwizard.logging.DefaultLoggingFactory: void setLoggers(java.util.Map)> 
<io.dropwizard.logging.json.layout.JsonFormatter: java.lang.String toJson(java.util.Map)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setTimeZone(java.util.TimeZone)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setPort(int)> 
<io.dropwizard.logging.SyslogAppenderFactory: void setFacility(io.dropwizard.logging.SyslogAppenderFactory$Facility)> 
<io.dropwizard.logging.SyslogAppenderFactory: void setIncludeStackTrace(boolean)> 
<io.dropwizard.jetty.ServerPushFilterFactory: void setRefererHosts(java.util.List)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setInputBufferSize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.UdpSocketAppenderFactory: void setHost(java.lang.String)> 
<io.dropwizard.logging.FileAppenderFactory: void setArchivedLogFilenamePattern(java.lang.String)> 
<io.dropwizard.logging.FileAppenderFactory: void setMaxFileSize(io.dropwizard.util.Size)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setOutputBufferSize(io.dropwizard.util.Size)> 
<io.dropwizard.jetty.ServerPushFilterFactory: void setAssociatePeriod(io.dropwizard.util.Duration)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setMaxCertPathLength(java.lang.Integer)> 
<io.dropwizard.jetty.BiDiGzipHandler: void setInputBufferSize(int)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setJceProvider(java.lang.String)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setValidateCerts(boolean)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setUseDateHeader(boolean)> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setCustomFieldNames(java.util.Map)> 
<io.dropwizard.request.logging.ExternalRequestLogFactory: void setEnabled(boolean)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setGzipCompatibleInflation(boolean)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setAcceptQueueSize(java.lang.Integer)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: void setSendBufferSize(io.dropwizard.util.Size)> 
<io.dropwizard.jetty.setup.ServletEnvironment: void setBaseResource(org.eclipse.jetty.util.resource.Resource)> 
<io.dropwizard.logging.SyslogAppenderFactory: ch.qos.logback.core.Appender build(ch.qos.logback.classic.LoggerContext,java.lang.String,io.dropwizard.logging.layout.LayoutFactory,io.dropwizard.logging.filter.LevelFilterFactory,io.dropwizard.logging.async.AsyncAppenderFactory)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setSoLingerTime(io.dropwizard.util.Duration)> 
<io.dropwizard.logging.json.AccessJsonLayoutBaseFactory: void setIncludes(java.util.EnumSet)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setWantClientAuth(java.lang.Boolean)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setCompressedMimeTypes(java.util.Set)> 
<io.dropwizard.logging.json.layout.AccessJsonLayout: void setRequestHeaders(java.util.Set)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setReuseAddress(boolean)> 
<io.dropwizard.logging.UdpSocketAppenderFactory: void setPort(int)> 
<io.dropwizard.jetty.GzipHandlerFactory: void setSyncFlush(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyManagerPassword(java.lang.String)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setMaxResponseHeaderSize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.LoggerConfiguration: void setLevel(java.lang.String)> 
<io.dropwizard.jetty.ServerPushFilterFactory: void setEnabled(boolean)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: void setHost(java.lang.String)> 
<io.dropwizard.logging.json.layout.EventJsonLayout: void setIncludes(java.util.Set)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setCertAlias(java.lang.String)> 
<io.dropwizard.logging.FileAppenderFactory: void setImmediateFlush(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setSupportedProtocols(java.util.List)> 
<io.dropwizard.logging.AbstractAppenderFactory: void setFilterFactories(java.util.List)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setMinRequestDataRate(long)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setBindHost(java.lang.String)> 
<io.dropwizard.logging.LoggerConfiguration: void setAppenders(java.util.List)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStorePath(java.lang.String)> 
<io.dropwizard.logging.FileAppenderFactory: void setBufferSize(io.dropwizard.util.Size)> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setAdditionalFields(java.util.Map)> 
<io.dropwizard.jetty.HttpConnectorFactory: void setAcceptorThreads(java.util.Optional)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setAllowRenegotiation(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStorePassword(java.lang.String)> 
<io.dropwizard.logging.json.AbstractJsonLayoutBaseFactory: void setAppendLineSeparator(boolean)> 
<io.dropwizard.jetty.HttpsConnectorFactory: void setKeyStoreProvider(java.lang.String)> 


***__authentications_to_high__*** 

<io.dropwizard.jetty.HttpConnectorFactory: org.eclipse.jetty.server.HttpConnectionFactory buildHttpConnectionFactory(org.eclipse.jetty.server.HttpConfiguration)> 
<io.dropwizard.logging.TcpSocketAppenderFactory: void setConnectionTimeout(io.dropwizard.util.Duration)> 
<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: org.eclipse.jetty.io.Connection newConnection(org.eclipse.jetty.server.Connector,org.eclipse.jetty.io.EndPoint)> 
<io.dropwizard.jetty.HttpConnectorFactory: java.lang.String httpConnections()> 
<io.dropwizard.jetty.HttpConnectorFactory: org.eclipse.jetty.server.ServerConnector buildConnector(org.eclipse.jetty.server.Server,org.eclipse.jetty.util.thread.Scheduler,org.eclipse.jetty.io.ByteBufferPool,java.lang.String,org.eclipse.jetty.util.thread.ThreadPool,org.eclipse.jetty.server.ConnectionFactory[])> 


***__authentications_to_low__*** 



***__authentications_neutral__*** 

<io.dropwizard.jetty.Jetty93InstrumentedConnectionFactory: org.eclipse.jetty.server.ConnectionFactory getConnectionFactory()> 
<io.dropwizard.logging.TcpSocketAppenderFactory: io.dropwizard.util.Duration getConnectionTimeout()> 


***__sanitizers__*** 



***__none__*** 



