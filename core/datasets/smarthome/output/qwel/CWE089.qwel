methods CWE089_sources [ 
java.lang.String org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.readLabel(NodeIterator); 
org.eclipse.smarthome.core.library.types.PercentType org.eclipse.smarthome.core.library.types.HSBType.getBlue(); 
org.eclipse.smarthome.core.thing.Bridge org.eclipse.smarthome.core.thing.binding.BaseThingHandler.getBridge(); 
java.lang.String org.eclipse.smarthome.core.items.ManagedItemProvider.getKey(org.eclipse.smarthome.core.items.Item); 
java.util.List org.eclipse.smarthome.core.thing.type.ThingType.getChannelDefinitions(); 
org.eclipse.smarthome.core.library.types.PercentType org.eclipse.smarthome.core.library.types.HSBType.getSaturation(); 
org.osgi.framework.BundleContext org.eclipse.smarthome.core.scheduler.internal.SchedulerActivator.getContext(); 
java.lang.Object org.eclipse.smarthome.core.items.ManagedItemProvider.getKey(java.lang.Object); 
java.util.List org.eclipse.smarthome.core.library.items.DateTimeItem.getAcceptedDataTypes(); 
org.eclipse.smarthome.core.thing.Thing org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler.getThingByUID(org.eclipse.smarthome.core.thing.ThingUID); 
org.osgi.framework.BundleContext org.eclipse.smarthome.core.transform.internal.TransformationActivator.getContext(); 
int org.eclipse.smarthome.core.scriptengine.ScriptError.getColumnNumber(); 
org.eclipse.smarthome.core.library.types.PercentType org.eclipse.smarthome.core.library.types.HSBType.getBrightness(); 
java.util.Set org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry.getBoundChannels(java.lang.String); 
java.util.List org.eclipse.smarthome.core.thing.internal.ThingImpl.getChannels(); 
java.util.List org.eclipse.smarthome.core.thing.util.ThingHelper.getItemFactories(); 
java.lang.String org.eclipse.smarthome.core.binding.xml.internal.BindingInfoImpl.getDescription(); 
org.eclipse.smarthome.core.thing.Thing org.eclipse.smarthome.core.thing.binding.BaseThingHandler.getThing(); 
java.util.List org.eclipse.smarthome.core.library.items.RollershutterItem.getAcceptedCommandTypes(); 
java.util.List org.eclipse.smarthome.core.thing.internal.console.ThingConsoleCommandExtension.getUsages(); 
java.lang.Object org.eclipse.smarthome.core.thing.link.ManagedItemChannelLinkProvider.getKey(java.lang.Object); 
org.eclipse.smarthome.core.thing.type.ChannelType org.eclipse.smarthome.core.thing.type.ChannelDefinition.getType(); 
java.lang.String org.eclipse.smarthome.core.thing.UID.getSegment(int); 
java.lang.Object org.eclipse.smarthome.core.thing.binding.BaseThingHandler.getConfigAs(java.lang.Class); 
java.net.URI org.eclipse.smarthome.core.binding.xml.internal.BindingInfoConverter.readConfigDescriptionURI(NodeIterator); 
java.util.List org.eclipse.smarthome.core.library.items.ContactItem.getAcceptedCommandTypes(); 
java.util.List org.eclipse.smarthome.core.library.items.ContactItem.getAcceptedDataTypes(); 
ConfigDescription org.eclipse.smarthome.core.thing.xml.internal.ChannelTypeXmlResult.getConfigDescription(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.library.items.SwitchItem.getStateAs(java.lang.Class); 
org.eclipse.smarthome.core.thing.ThingUID org.eclipse.smarthome.core.thing.internal.ThingImpl.getUID(); 
java.util.List org.eclipse.smarthome.core.thing.type.ThingType.getSupportedBridgeTypeUIDs(); 
org.eclipse.smarthome.core.items.Item org.eclipse.smarthome.core.internal.items.ItemRegistryImpl.getItem(java.lang.String); 
java.util.List org.eclipse.smarthome.core.thing.internal.console.LinkConsoleCommandExtension.getUsages(); 
java.net.URI org.eclipse.smarthome.core.thing.type.AbstractDescriptionType.getConfigDescriptionURI(); 
org.eclipse.smarthome.core.thing.ThingUID org.eclipse.smarthome.core.thing.ManagedThingProvider.getKey(org.eclipse.smarthome.core.thing.Thing); 
java.lang.String org.eclipse.smarthome.core.thing.ThingUID.getThingTypeId(); 
java.net.URI org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.readConfigDescriptionURI(NodeIterator); 
java.util.List org.eclipse.smarthome.core.library.items.NumberItem.getAcceptedDataTypes(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.items.GenericItem.getStateAs(java.lang.Class); 
Configuration org.eclipse.smarthome.core.thing.binding.BaseThingHandler.getConfig(); 
ConfigDescription org.eclipse.smarthome.core.thing.xml.internal.ThingTypeXmlResult.getConfigDescription(); 
java.lang.String org.eclipse.smarthome.core.thing.type.AbstractDescriptionType.getLabel(); 
Configuration org.eclipse.smarthome.core.thing.Channel.getConfiguration(); 
org.eclipse.smarthome.core.thing.ThingTypeUID org.eclipse.smarthome.core.thing.ThingUID.getThingTypeUID(); 
java.util.SortedMap org.eclipse.smarthome.core.library.types.HSBType.getConstituents(); 
java.lang.String org.eclipse.smarthome.core.thing.link.ItemChannelLink.getID(); 
java.lang.String org.eclipse.smarthome.core.thing.ChannelUID.getThingTypeId(); 
java.lang.String org.eclipse.smarthome.core.thing.link.ItemChannelLink.getItemName(); 
java.lang.String org.eclipse.smarthome.core.common.registry.AbstractManagedProvider.getKeyAsString(java.lang.Object); 
org.eclipse.smarthome.core.items.ManagedItemProvider org.eclipse.smarthome.core.thing.util.ThingHelper.getManagedItemProvider(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.library.items.ColorItem.getStateAs(java.lang.Class); 
java.util.List org.eclipse.smarthome.core.library.items.ImageItem.getAcceptedCommandTypes(); 
org.eclipse.smarthome.core.library.types.PercentType org.eclipse.smarthome.core.library.types.HSBType.getGreen(); 
java.lang.String org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.getID(java.util.Map); 
java.lang.String org.eclipse.smarthome.core.items.ManagedItemProvider.getStorageName(); 
java.lang.String org.eclipse.smarthome.core.binding.xml.internal.BindingInfoImpl.getId(); 
int org.eclipse.smarthome.core.scriptengine.ScriptError.getLength(); 
org.eclipse.smarthome.core.thing.type.ThingType org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory.getThingTypeByUID(org.eclipse.smarthome.core.thing.ThingTypeUID); 
java.lang.String org.eclipse.smarthome.core.thing.ChannelUID.getThingId(); 
int org.eclipse.smarthome.core.scriptengine.ScriptError.getLineNumber(); 
int org.eclipse.smarthome.core.thing.type.ChannelTypeUID.getMinimalNumberOfSegments(); 
java.util.List org.eclipse.smarthome.core.thing.type.ThingTypeRegistry.getThingTypes(); 
java.util.Collection org.eclipse.smarthome.core.internal.items.ItemRegistryImpl.getItems(); 
java.lang.String[] org.eclipse.smarthome.core.thing.ThingUID.getArray(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.lang.String); 
int org.eclipse.smarthome.core.persistence.FilterCriteria.getPageNumber(); 
java.lang.String org.eclipse.smarthome.core.thing.link.ManagedItemChannelLinkProvider.getStorageName(); 
org.osgi.framework.BundleContext org.eclipse.smarthome.core.internal.CoreActivator.getContext(); 
java.util.Collection org.eclipse.smarthome.core.internal.items.ItemRegistryImpl.getItems(java.lang.String); 
java.util.List org.eclipse.smarthome.core.thing.type.ThingTypeRegistry.getThingTypes(java.lang.String); 
java.lang.String org.eclipse.smarthome.core.scriptengine.ScriptException.getMessage(); 
org.eclipse.smarthome.core.binding.BindingInfo org.eclipse.smarthome.core.binding.xml.internal.BindingInfoXmlResult.getBindingInfo(); 
org.eclipse.smarthome.core.persistence.FilterCriteria$Ordering org.eclipse.smarthome.core.persistence.FilterCriteria.getOrdering(); 
java.lang.Object org.eclipse.smarthome.core.scriptengine.ScriptExecutionThread.getResult(); 
java.lang.String org.eclipse.smarthome.core.scriptengine.ScriptError.getMessage(); 
java.lang.String org.eclipse.smarthome.core.thing.UID.getBindingId(); 
java.util.List org.eclipse.smarthome.core.library.items.SwitchItem.getAcceptedCommandTypes(); 
org.eclipse.smarthome.core.thing.type.ChannelType org.eclipse.smarthome.core.thing.xml.internal.ChannelTypeXmlResult.getChannelType(); 
java.util.List org.eclipse.smarthome.core.scriptengine.ScriptException.getErrors(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.library.items.ContactItem.getStateAs(java.lang.Class); 
java.lang.String org.eclipse.smarthome.core.binding.xml.internal.BindingInfoImpl.getName(); 
java.lang.String org.eclipse.smarthome.core.thing.ThingTypeUID.getId(); 
java.util.Date org.eclipse.smarthome.core.persistence.FilterCriteria.getEndDate(); 
org.eclipse.smarthome.core.items.ItemFactory org.eclipse.smarthome.core.thing.util.ThingHelper.getItemFactoryForItemType(java.util.List,java.lang.String); 
ConfigDescription org.eclipse.smarthome.core.binding.xml.internal.BindingInfoConverter.readConfigDescription(NodeIterator); 
java.lang.String[] org.eclipse.smarthome.core.thing.ThingUID.getArray(java.lang.String,java.lang.String,java.lang.String,java.lang.String[]); 
java.util.List org.eclipse.smarthome.core.library.items.ColorItem.getAcceptedCommandTypes(); 
java.lang.String org.eclipse.smarthome.core.thing.type.ChannelTypeUID.getId(); 
org.osgi.framework.BundleContext org.eclipse.smarthome.core.thing.internal.Activator.getContext(); 
java.lang.String org.eclipse.smarthome.core.items.GenericItem.getName(); 
org.eclipse.smarthome.core.items.GenericItem org.eclipse.smarthome.core.items.GroupItem.getBaseItem(); 
int org.eclipse.smarthome.core.thing.ThingTypeUID.getMinimalNumberOfSegments(); 
java.util.List org.eclipse.smarthome.core.items.GroupItem.getMembers(); 
java.util.Collection org.eclipse.smarthome.core.common.registry.AbstractRegistry.getAll(); 
java.util.List org.eclipse.smarthome.core.thing.xml.internal.ThingTypeConverter.readSupportedBridgeTypeUIDs(NodeIterator,UnmarshallingContext); 
java.lang.String[] org.eclipse.smarthome.core.thing.ChannelUID.getArray(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List); 
java.lang.Object[] org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.getConfigDescriptionObjects(NodeIterator); 
java.lang.String org.eclipse.smarthome.core.thing.ThingUID.getId(); 
java.lang.String org.eclipse.smarthome.core.thing.ChannelUID.getId(); 
java.util.List org.eclipse.smarthome.core.library.items.NumberItem.getAcceptedCommandTypes(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.persistence.FilterCriteria.getState(); 
java.lang.String org.eclipse.smarthome.core.persistence.FilterCriteria.getItemName(); 
java.util.Dictionary org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory.getServiceProperties(org.eclipse.smarthome.core.thing.Thing,org.eclipse.smarthome.core.thing.binding.ThingHandler); 
int org.eclipse.smarthome.core.persistence.FilterCriteria.getPageSize(); 
java.util.List org.eclipse.smarthome.core.scriptengine.internal.extensions.ScriptEngineConsoleCommandExtension.getUsages(); 
java.util.List org.eclipse.smarthome.core.library.items.StringItem.getAcceptedCommandTypes(); 
java.util.List org.eclipse.smarthome.core.items.GroupItem.getAcceptedCommandTypes(); 
org.eclipse.smarthome.core.thing.ChannelUID org.eclipse.smarthome.core.thing.Channel.getUID(); 
java.lang.String org.eclipse.smarthome.core.thing.type.AbstractDescriptionType.getDescription(); 
java.net.URI org.eclipse.smarthome.core.binding.xml.internal.BindingInfoImpl.getConfigDescriptionURI(); 
org.eclipse.smarthome.core.transform.TransformationService org.eclipse.smarthome.core.transform.TransformationHelper.getTransformationService(org.osgi.framework.BundleContext,java.lang.String); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.items.GroupItem.getStateAs(java.lang.Class); 
org.eclipse.smarthome.core.library.types.DecimalType org.eclipse.smarthome.core.library.types.HSBType.getHue(); 
java.util.Map org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory.getServiceProperties(org.eclipse.smarthome.core.thing.binding.ThingHandler); 
java.util.Date org.eclipse.smarthome.core.persistence.FilterCriteria.getBeginDate(); 
byte[] org.eclipse.smarthome.core.library.types.RawType.getBytes(); 
java.util.List org.eclipse.smarthome.core.thing.xml.internal.ThingTypeConverter.readChannelTypeDefinitions(NodeIterator); 
java.util.List org.eclipse.smarthome.core.library.items.ColorItem.getAcceptedDataTypes(); 
java.lang.String org.eclipse.smarthome.core.thing.ManagedThingProvider.getStorageName(); 
java.lang.String[] org.eclipse.smarthome.core.library.CoreItemFactory.getSupportedItemTypes(); 
java.util.List org.eclipse.smarthome.core.items.GroupItem.getAllMembers(); 
org.eclipse.smarthome.core.items.Item org.eclipse.smarthome.core.internal.items.ItemRegistryImpl.getItemByPattern(java.lang.String); 
java.util.List org.eclipse.smarthome.core.thing.internal.BridgeImpl.getThings(); 
org.eclipse.smarthome.core.thing.type.ChannelTypeUID org.eclipse.smarthome.core.thing.type.ChannelType.getUID(); 
java.lang.String org.eclipse.smarthome.core.thing.xml.internal.ChannelTypeConverter.readItemType(NodeIterator); 
org.eclipse.smarthome.core.items.GenericItem org.eclipse.smarthome.core.items.ManagedItemProvider.createItem(java.lang.String,java.lang.String); 
java.lang.String[] org.eclipse.smarthome.core.thing.UID.getSegments(); 
java.lang.String org.eclipse.smarthome.core.thing.type.ChannelDefinition.getId(); 
java.lang.String org.eclipse.smarthome.core.thing.type.ThingType.getBindingId(); 
Configuration org.eclipse.smarthome.core.thing.internal.ThingImpl.getConfiguration(); 
java.util.List org.eclipse.smarthome.core.events.AbstractEventSubscriber.getSourceFilterList(); 
XmlDocumentProvider org.eclipse.smarthome.core.binding.xml.internal.BindingInfoXmlProviderFactory.createDocumentProvider(org.osgi.framework.Bundle); 
java.util.List org.eclipse.smarthome.core.library.items.DimmerItem.getAcceptedCommandTypes(); 
java.lang.String org.eclipse.smarthome.core.thing.Channel.getAcceptedItemType(); 
org.eclipse.smarthome.core.thing.ThingStatus org.eclipse.smarthome.core.thing.internal.ThingImpl.getStatus(); 
java.util.List org.eclipse.smarthome.core.library.items.ImageItem.getAcceptedDataTypes(); 
org.eclipse.smarthome.core.thing.link.ManagedItemChannelLinkProvider org.eclipse.smarthome.core.thing.util.ThingHelper.getManagedItemChannelLinkProvider(); 
java.lang.String org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.getUID(java.util.Map,UnmarshallingContext); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.items.GenericItem.getState(); 
org.eclipse.smarthome.core.library.types.PercentType org.eclipse.smarthome.core.library.types.HSBType.getRed(); 
java.util.List org.eclipse.smarthome.core.items.GenericItem.getGroupNames(); 
org.eclipse.smarthome.core.thing.ThingTypeUID org.eclipse.smarthome.core.thing.type.ThingType.getUID(); 
int org.eclipse.smarthome.core.thing.ChannelUID.getMinimalNumberOfSegments(); 
java.lang.String org.eclipse.smarthome.core.thing.type.ChannelType.getItemType(); 
org.eclipse.smarthome.core.thing.Thing org.eclipse.smarthome.core.thing.internal.ThingRegistryImpl.getByUID(org.eclipse.smarthome.core.thing.ThingUID); 
java.util.Calendar org.eclipse.smarthome.core.library.types.DateTimeType.getCalendar(); 
java.lang.String org.eclipse.smarthome.core.thing.link.ManagedItemChannelLinkProvider.getKey(org.eclipse.smarthome.core.thing.link.ItemChannelLink); 
org.eclipse.smarthome.core.thing.Bridge org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler.getThing(); 
java.util.Collection org.eclipse.smarthome.core.items.ItemNotUniqueException.getMatchingItems(); 
java.lang.String org.eclipse.smarthome.core.transform.internal.TransformationActionService.getActionClassName(); 
ConfigDescription org.eclipse.smarthome.core.binding.xml.internal.BindingInfoXmlResult.getConfigDescription(); 
XmlDocumentProvider org.eclipse.smarthome.core.thing.xml.internal.ThingTypeXmlProviderFactory.createDocumentProvider(org.osgi.framework.Bundle); 
java.util.Set org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry.getBoundThings(java.lang.String); 
int org.eclipse.smarthome.core.thing.ThingUID.getMinimalNumberOfSegments(); 
java.util.List org.eclipse.smarthome.core.items.GroupItem.getAcceptedDataTypes(); 
java.util.List org.eclipse.smarthome.core.library.items.StringItem.getAcceptedDataTypes(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.library.items.DimmerItem.getStateAs(java.lang.Class); 
java.lang.String org.eclipse.smarthome.core.thing.internal.ThingImpl.getName(); 
java.lang.String org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry.getBoundItem(org.eclipse.smarthome.core.thing.ChannelUID); 
java.lang.String org.eclipse.smarthome.core.binding.xml.internal.BindingInfoImpl.getAuthor(); 
org.eclipse.smarthome.core.thing.type.ThingType org.eclipse.smarthome.core.thing.type.ThingTypeRegistry.getThingType(org.eclipse.smarthome.core.thing.ThingTypeUID); 
java.lang.String org.eclipse.smarthome.core.items.GenericItem.getType(); 
java.util.List org.eclipse.smarthome.core.thing.ChannelUID.getBridgeIds(); 
java.util.List org.eclipse.smarthome.core.library.items.RollershutterItem.getAcceptedDataTypes(); 
org.eclipse.smarthome.core.persistence.FilterCriteria$Operator org.eclipse.smarthome.core.persistence.FilterCriteria.getOperator(); 
java.lang.Object org.eclipse.smarthome.core.thing.ManagedThingProvider.getKey(java.lang.Object); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.library.items.RollershutterItem.getStateAs(java.lang.Class); 
org.eclipse.smarthome.core.thing.UID org.eclipse.smarthome.core.thing.type.AbstractDescriptionType.getUID(); 
java.util.List org.eclipse.smarthome.core.binding.BindingInfoRegistry.getBindingInfos(); 
java.util.Collection org.eclipse.smarthome.core.thing.xml.internal.XmlThingTypeProvider.getThingTypes(); 
ConfigDescription org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.readConfigDescription(NodeIterator); 
int org.eclipse.smarthome.core.library.types.HSBType.getRGB(); 
java.lang.String org.eclipse.smarthome.core.thing.xml.internal.AbstractDescriptionTypeConverter.readDescription(NodeIterator); 
org.eclipse.smarthome.core.thing.ChannelUID org.eclipse.smarthome.core.thing.link.ItemChannelLink.getChannelUID(); 
java.util.List org.eclipse.smarthome.core.thing.ThingUID.getBridgeIds(); 
org.eclipse.smarthome.core.types.State org.eclipse.smarthome.core.library.items.StringItem.getStateAs(java.lang.Class); 
java.util.List org.eclipse.smarthome.core.library.items.DateTimeItem.getAcceptedCommandTypes(); 
java.util.List org.eclipse.smarthome.core.library.items.DimmerItem.getAcceptedDataTypes(); 
java.util.List org.eclipse.smarthome.core.library.items.SwitchItem.getAcceptedDataTypes(); 
org.eclipse.smarthome.core.thing.ThingUID org.eclipse.smarthome.core.thing.ChannelUID.getThingUID(); 
org.eclipse.smarthome.core.thing.ThingTypeUID org.eclipse.smarthome.core.thing.internal.ThingImpl.getThingTypeUID(); 
org.eclipse.smarthome.core.thing.ThingUID org.eclipse.smarthome.core.thing.internal.ThingImpl.getBridgeUID(); 
org.eclipse.smarthome.core.thing.binding.ThingHandler org.eclipse.smarthome.core.thing.internal.ThingImpl.getHandler(); 
org.eclipse.smarthome.core.thing.Thing org.eclipse.smarthome.core.thing.internal.ThingManager.getThing(org.eclipse.smarthome.core.thing.ThingUID); 
java.lang.Class org.eclipse.smarthome.core.transform.internal.TransformationActionService.getActionClass(); 
java.util.Collection org.eclipse.smarthome.core.common.registry.AbstractManagedProvider.getAll(); 
]
methods CWE089_sinks [ 
void org.eclipse.smarthome.core.library.items.DimmerItem.setState(org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.library.items.RollershutterItem.send(org.eclipse.smarthome.core.library.types.UpDownType); 
void org.eclipse.smarthome.core.library.items.DimmerItem.send(org.eclipse.smarthome.core.library.types.PercentType); 
void org.eclipse.smarthome.core.thing.internal.ThingManager.receiveUpdate(java.lang.String,org.eclipse.smarthome.core.types.State,java.lang.String); 
void org.eclipse.smarthome.core.thing.internal.console.ThingConsoleCommandExtension.execute(java.lang.String[],Console); 
void org.eclipse.smarthome.core.thing.binding.BaseThingHandler.updateState(java.lang.String,org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.library.items.ColorItem.setState(org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.thing.internal.console.LinkConsoleCommandExtension.setManagedItemChannelLinkProvider(org.eclipse.smarthome.core.thing.link.ManagedItemChannelLinkProvider); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setOperator(org.eclipse.smarthome.core.persistence.FilterCriteria$Operator); 
void org.eclipse.smarthome.core.thing.internal.BridgeImpl.setStatus(org.eclipse.smarthome.core.thing.ThingStatus); 
void org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry.setThingRegistry(org.eclipse.smarthome.core.thing.ThingRegistry); 
void org.eclipse.smarthome.core.items.GenericItem.setEventPublisher(org.eclipse.smarthome.core.events.EventPublisher); 
void org.eclipse.smarthome.core.internal.events.EventPublisherImpl.sendCommand(java.lang.String,org.eclipse.smarthome.core.types.Command); 
java.lang.Object org.eclipse.smarthome.core.common.registry.AbstractManagedProvider.update(java.lang.Object); 
void org.eclipse.smarthome.core.library.items.NumberItem.send(org.eclipse.smarthome.core.library.types.DecimalType); 
void org.eclipse.smarthome.core.autoupdate.internal.AutoUpdateBinding.setItemRegistry(org.eclipse.smarthome.core.items.ItemRegistry); 
void org.eclipse.smarthome.core.items.GenericItem.send(org.eclipse.smarthome.core.types.RefreshType); 
void org.eclipse.smarthome.core.thing.binding.BaseThingHandler.setBundleContext(org.osgi.framework.BundleContext); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setChannels(java.util.List); 
void org.eclipse.smarthome.core.events.AbstractEventSubscriber.receiveUpdate(java.lang.String,org.eclipse.smarthome.core.types.State,java.lang.String); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setConfiguration(Configuration); 
void org.eclipse.smarthome.core.thing.xml.internal.XmlThingTypeProvider.addThingType(org.osgi.framework.Bundle,org.eclipse.smarthome.core.thing.type.ThingType); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setBridgeUID(org.eclipse.smarthome.core.thing.ThingUID); 
void org.eclipse.smarthome.core.thing.internal.console.LinkConsoleCommandExtension.setItemChannelLinkRegistry(org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setOrdering(org.eclipse.smarthome.core.persistence.FilterCriteria$Ordering); 
void org.eclipse.smarthome.core.autoupdate.internal.AutoUpdateBinding.postUpdate(java.lang.String,org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.common.registry.AbstractRegistry.updated(org.eclipse.smarthome.core.common.registry.Provider,java.lang.Object,java.lang.Object); 
void org.eclipse.smarthome.core.library.items.StringItem.send(org.eclipse.smarthome.core.library.types.StringType); 
void org.eclipse.smarthome.core.thing.binding.BaseThingHandler.handleUpdate(org.eclipse.smarthome.core.thing.ChannelUID,org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.thing.xml.internal.XmlThingTypeProvider.removeAllThingTypes(org.osgi.framework.Bundle); 
void org.eclipse.smarthome.core.thing.internal.console.ThingConsoleCommandExtension.setManagedThingProvider(org.eclipse.smarthome.core.thing.ManagedThingProvider); 
void org.eclipse.smarthome.core.internal.items.ItemUpdater.receiveUpdate(java.lang.String,org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.channelUpdated(org.eclipse.smarthome.core.thing.ChannelUID,org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.library.items.SwitchItem.send(org.eclipse.smarthome.core.library.types.OnOffType); 
void org.eclipse.smarthome.core.autoupdate.internal.AutoUpdateBinding.setEventPublisher(org.eclipse.smarthome.core.events.EventPublisher); 
void org.eclipse.smarthome.core.internal.items.ItemRegistryImpl.setEventPublisher(org.eclipse.smarthome.core.events.EventPublisher); 
void org.eclipse.smarthome.core.thing.internal.ThingManager.setItemChannelLinkRegistry(org.eclipse.smarthome.core.thing.link.ItemChannelLinkRegistry); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setHandler(org.eclipse.smarthome.core.thing.binding.ThingHandler); 
void org.eclipse.smarthome.core.items.GenericItem.internalSend(org.eclipse.smarthome.core.types.Command); 
void org.eclipse.smarthome.core.library.items.RollershutterItem.send(org.eclipse.smarthome.core.library.types.StopMoveType); 
void org.eclipse.smarthome.core.items.GenericItem.setState(org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.library.items.RollershutterItem.send(org.eclipse.smarthome.core.library.types.PercentType); 
void org.eclipse.smarthome.core.internal.events.EventPublisherImpl.sendCommand(java.lang.String,org.eclipse.smarthome.core.types.Command,java.lang.String); 
void org.eclipse.smarthome.core.scriptengine.internal.extensions.ScriptEngineConsoleCommandExtension.execute(java.lang.String[],Console); 
void org.eclipse.smarthome.core.library.items.RollershutterItem.setState(org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.internal.events.EventPublisherImpl.postUpdate(java.lang.String,org.eclipse.smarthome.core.types.State); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setState(org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setName(java.lang.String); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setStatus(org.eclipse.smarthome.core.thing.ThingStatus); 
void org.eclipse.smarthome.core.thing.internal.ThingRegistryImpl.notifyListenersAboutUpdatedElement(org.eclipse.smarthome.core.thing.Thing,org.eclipse.smarthome.core.thing.Thing); 
void org.eclipse.smarthome.core.items.GroupItem.send(org.eclipse.smarthome.core.types.Command); 
void org.eclipse.smarthome.core.internal.events.EventPublisherImpl.setEventAdmin(org.osgi.service.event.EventAdmin); 
void org.eclipse.smarthome.core.thing.internal.ThingManager.setThingRegistry(org.eclipse.smarthome.core.thing.ThingRegistry); 
void org.eclipse.smarthome.core.library.items.DateTimeItem.send(org.eclipse.smarthome.core.library.types.DateTimeType); 
void org.eclipse.smarthome.core.scriptengine.ScriptException.setScriptText(java.lang.String); 
void org.eclipse.smarthome.core.service.AbstractActiveService.setProperlyConfigured(boolean); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setItemName(java.lang.String); 
void org.eclipse.smarthome.core.items.GroupItem.internalSend(org.eclipse.smarthome.core.types.Command); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setBeginDate(java.util.Date); 
void org.eclipse.smarthome.core.thing.binding.BaseThingHandler.thingUpdated(org.eclipse.smarthome.core.thing.Thing); 
void org.eclipse.smarthome.core.events.AbstractEventSubscriber.receiveUpdate(java.lang.String,org.eclipse.smarthome.core.types.State); 
void org.eclipse.smarthome.core.internal.items.ItemUpdater.receiveCommand(java.lang.String,org.eclipse.smarthome.core.types.Command); 
void org.eclipse.smarthome.core.library.items.ColorItem.send(org.eclipse.smarthome.core.library.types.HSBType); 
void org.eclipse.smarthome.core.thing.internal.ThingManager.thingUpdated(org.eclipse.smarthome.core.thing.Thing,org.eclipse.smarthome.core.thing.internal.ThingTracker$ThingTrackerEvent); 
void org.eclipse.smarthome.core.thing.internal.ThingImpl.setId(org.eclipse.smarthome.core.thing.ThingUID); 
void org.eclipse.smarthome.core.thing.binding.BaseThingHandler.updateState(org.eclipse.smarthome.core.thing.ChannelUID,org.eclipse.smarthome.core.types.State); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setPageNumber(int); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setEndDate(java.util.Date); 
void org.eclipse.smarthome.core.thing.internal.console.ThingConsoleCommandExtension.setThingRegistry(org.eclipse.smarthome.core.thing.ThingRegistry); 
void org.eclipse.smarthome.core.scriptengine.internal.extensions.ScriptEngineConsoleCommandExtension.setScriptEngine(org.eclipse.smarthome.core.scriptengine.ScriptEngine); 
void org.eclipse.smarthome.core.thing.internal.console.LinkConsoleCommandExtension.execute(java.lang.String[],Console); 
void org.eclipse.smarthome.core.thing.internal.ThingManager.setEventPublisher(org.eclipse.smarthome.core.events.EventPublisher); 
org.eclipse.smarthome.core.persistence.FilterCriteria org.eclipse.smarthome.core.persistence.FilterCriteria.setPageSize(int); 
void org.eclipse.smarthome.core.internal.items.ItemUpdater.setItemRegistry(org.eclipse.smarthome.core.items.ItemRegistry); 
void org.eclipse.smarthome.core.internal.events.EventPublisherImpl.postUpdate(java.lang.String,org.eclipse.smarthome.core.types.State,java.lang.String); 
void org.eclipse.smarthome.core.common.registry.AbstractManagedProvider.setStorageService(org.eclipse.smarthome.core.storage.StorageService); 
]
methods CWE089_authentications_to_high [ 
]
methods CWE089_authentications_to_low [ 
]
methods CWE089_authentications_neutral [ 
]
methods CWE089_sanitizers [ 
]
methods CWE089_none [ 
]
